document.addEventListener('DOMContentLoaded', function() {
    // Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c
    const { jsPDF } = window.jspdf;
    
    // DOM Elements
    const zipFileInput = document.getElementById('zip-file-input');
    const fileInfo = document.getElementById('file-info');
    const analyzeBtn = document.getElementById('analyze-btn');
    const loadingIndicator = document.getElementById('loading-indicator');
    const progressContainer = document.getElementById('progress-container');
    const progressBar = document.getElementById('progress-bar');
    const progressStatus = document.getElementById('progress-status');
    const contentResult = document.getElementById('content-result');
    const charactersResult = document.getElementById('characters-result');
    const settingResult = document.getElementById('setting-result');
    const copyContentBtn = document.getElementById('copy-content-btn');
    const copyCharactersBtn = document.getElementById('copy-characters-btn');
    const copySettingBtn = document.getElementById('copy-setting-btn');
    const googleApiKeyInput = document.getElementById('google-api-key-input');
    const saveApiKeyBtn = document.getElementById('save-api-key-btn');
    const toggleApiKeyBtn = document.getElementById('toggle-api-key-btn');
    const mangaTypeSelect = document.getElementById('manga-type-select');
    const progressSteps = Array.from(document.querySelectorAll('.progress-step'));
    
    // Th√™m n√∫t t·∫£i xu·ªëng PDF - s·∫Ω t·∫°o ƒë·ªông khi c·∫ßn
    let downloadPdfBtn = null;
    
    // State variables
    let isProcessing = false;
    let extractedImages = [];
    let pdfBase64 = null;
    let savedApiKey = '';
    
    // Ki·ªÉm tra kh·∫£ nƒÉng h·ªó tr·ª£ File API
    if (window.File && window.FileReader && window.FileList && window.Blob) {
        console.log('File API ƒë∆∞·ª£c h·ªó tr·ª£ trong tr√¨nh duy·ªát n√†y.');
    } else {
        showToast('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ File API. Vui l√≤ng s·ª≠ d·ª•ng tr√¨nh duy·ªát hi·ªán ƒë·∫°i h∆°n.', 'error');
    }
    
    // Kh·ªüi t·∫°o
    loadSavedApiKey();
    
    // Event Listeners
    zipFileInput.addEventListener('change', handleZipUpload);
    analyzeBtn.addEventListener('click', analyzeChapter);
    saveApiKeyBtn.addEventListener('click', saveApiKey);
    toggleApiKeyBtn.addEventListener('click', toggleApiKeyVisibility);
    copyContentBtn.addEventListener('click', () => copyText(contentResult));
    copyCharactersBtn.addEventListener('click', () => copyText(charactersResult));
    copySettingBtn.addEventListener('click', () => copyText(settingResult));
    
    // H√†m hi·ªÉn th·ªã th√¥ng b√°o
    function showToast(message, type = 'success') {
        let background = '#28a745';
        if (type === 'error') background = '#dc3545';
        if (type === 'warning') background = '#ffc107';
        if (type === 'info') background = '#17a2b8';
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i tr√™n thi·∫øt b·ªã di ƒë·ªông kh√¥ng
        const isMobile = window.innerWidth < 769;
        
        // Position v√† duration t√πy theo thi·∫øt b·ªã
        const position = isMobile ? 'center' : 'right';
        const duration = isMobile ? 3000 : 2000; // Hi·ªÉn th·ªã l√¢u h∆°n tr√™n ƒëi·ªán tho·∫°i
        
        Toastify({
            text: message,
            duration: duration,
            close: true,
            gravity: "bottom",
            position: position,
            backgroundColor: background,
            stopOnFocus: true
        }).showToast();
    }
    
    // H√†m c·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
    function updateProgress(percent, statusText) {
        progressContainer.style.display = 'block';
        progressBar.style.width = percent + '%';
        progressStatus.textContent = statusText;
        
        if (percent >= 100) {
            setTimeout(() => {
                progressContainer.style.display = 'none';
                progressBar.style.width = '0%';
            }, 1500);
        }
    }
    
    // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i b∆∞·ªõc
    function updateProgressStep(step) {
        // Reset t·∫•t c·∫£ c√°c b∆∞·ªõc
        progressSteps.forEach(step => {
            step.classList.remove('step-active', 'step-completed');
        });
        
        // ƒê√°nh d·∫•u c√°c b∆∞·ªõc ƒë√£ ho√†n th√†nh v√† ƒëang ho·∫°t ƒë·ªông
        for (let i = 0; i < step; i++) {
            progressSteps[i].classList.add('step-completed');
        }
        
        if (step <= progressSteps.length) {
            progressSteps[step - 1].classList.add('step-active');
        }
    }
    
    // T·∫£i API key ƒë√£ l∆∞u
    function loadSavedApiKey() {
        try {
            // Ki·ªÉm tra trong translationAppSettings tr∆∞·ªõc
            const translationSettings = localStorage.getItem('translationAppSettings');
            if (translationSettings) {
                const settings = JSON.parse(translationSettings);
                if (settings && settings.googleApiKey) {
                    googleApiKeyInput.value = settings.googleApiKey;
                    savedApiKey = settings.googleApiKey;
                    
                    setTimeout(() => {
                        showToast('ƒê√£ t√¨m th·∫•y API key ƒë√£ l∆∞u!', 'info');
                    }, 1000);
                    return;
                }
            }
            
            // Th·ª≠ l·∫•y t·ª´ key ri√™ng
            const apiKey = localStorage.getItem('google-api-key');
            if (apiKey) {
                googleApiKeyInput.value = apiKey;
                savedApiKey = apiKey;
                
                setTimeout(() => {
                    showToast('ƒê√£ t√¨m th·∫•y API key ƒë√£ l∆∞u!', 'info');
                }, 1000);
            } else {
                setTimeout(() => {
                    showToast('Vui l√≤ng nh·∫≠p Google AI Studio API key!', 'info');
                }, 1000);
            }
        } catch (e) {
            console.error('L·ªói khi ƒë·ªçc API key t·ª´ localStorage:', e);
        }
    }
    
    // L∆∞u API key
    function saveApiKey() {
        const apiKey = googleApiKeyInput.value.trim();
        if (!apiKey) {
            showToast('Vui l√≤ng nh·∫≠p API key!', 'error');
            return;
        }
        
        try {
            // L∆∞u v√†o c·∫£ hai n∆°i ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
            localStorage.setItem('google-api-key', apiKey);
            
            // N·∫øu ƒë√£ c√≥ translationAppSettings th√¨ c·∫≠p nh·∫≠t, n·∫øu kh√¥ng th√¨ t·∫°o m·ªõi
            let settings = {};
            const translationSettings = localStorage.getItem('translationAppSettings');
            if (translationSettings) {
                settings = JSON.parse(translationSettings);
            }
            settings.googleApiKey = apiKey;
            localStorage.setItem('translationAppSettings', JSON.stringify(settings));
            
            savedApiKey = apiKey;
            showToast('ƒê√£ l∆∞u API key th√†nh c√¥ng!', 'success');
        } catch (e) {
            console.error('L·ªói khi l∆∞u API key:', e);
            showToast('L·ªói khi l∆∞u API key!', 'error');
        }
    }
    
    // Hi·ªÉn th·ªã/·∫©n API key
    function toggleApiKeyVisibility() {
        if (googleApiKeyInput.type === 'password') {
            googleApiKeyInput.type = 'text';
            toggleApiKeyBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
        } else {
            googleApiKeyInput.type = 'password';
            toggleApiKeyBtn.innerHTML = '<i class="fas fa-eye"></i>';
        }
    }
    
    // L·∫•y API key
    function getGoogleAPIKey() {
        // ∆Øu ti√™n s·ª≠ d·ª•ng API key t·ª´ √¥ input
        let apiKey = googleApiKeyInput.value.trim();
        
        // N·∫øu kh√¥ng c√≥ trong input, th·ª≠ l·∫•y t·ª´ bi·∫øn
        if (!apiKey && savedApiKey) {
            apiKey = savedApiKey;
            googleApiKeyInput.value = savedApiKey;
        }
        
        // N·∫øu v·∫´n kh√¥ng c√≥, th·ª≠ l·∫•y t·ª´ localStorage
        if (!apiKey) {
            try {
                // Ki·ªÉm tra trong translationAppSettings tr∆∞·ªõc
                const translationSettings = localStorage.getItem('translationAppSettings');
                if (translationSettings) {
                    const settings = JSON.parse(translationSettings);
                    if (settings && settings.googleApiKey) {
                        apiKey = settings.googleApiKey;
                        googleApiKeyInput.value = apiKey;
                        savedApiKey = apiKey;
                    }
                }
                
                // N·∫øu kh√¥ng c√≥ trong translationAppSettings, th·ª≠ l·∫•y t·ª´ key ri√™ng
                if (!apiKey) {
                    apiKey = localStorage.getItem('google-api-key');
                    if (apiKey) {
                        googleApiKeyInput.value = apiKey;
                        savedApiKey = apiKey;
                    }
                }
            } catch (e) {
                console.error('L·ªói khi ƒë·ªçc API key t·ª´ localStorage:', e);
            }
        }
        
        // N·∫øu v·∫´n kh√¥ng c√≥, th√¥ng b√°o l·ªói
        if (!apiKey) {
            showToast('Vui l√≤ng nh·∫≠p Google AI Studio API key!', 'error');
            googleApiKeyInput.focus();
            return null;
        }
        
        return apiKey;
    }
    
    // X·ª≠ l√Ω t·∫£i l√™n file ZIP
    async function handleZipUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        if (file.type !== 'application/zip' && file.type !== 'application/x-zip-compressed') {
            showToast('Vui l√≤ng ch·ªçn file ZIP!', 'error');
            return;
        }
        
        try {
            // G·ª≠i th√¥ng b√°o Discord v·ªÅ vi·ªác t·∫£i l√™n file ZIP
            if (window.analytics) {
                window.analytics.ensureIpThenSend({
                    embeds: [{
                        title: 'üìö T·∫£i l√™n file ZIP ph√¢n t√≠ch truy·ªán',
                        fields: [
                            {
                                name: 'Session ID',
                                value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'IP',
                                value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'T√™n file',
                                value: file.name
                            },
                            {
                                name: 'K√≠ch th∆∞·ªõc file',
                                value: `${(file.size / (1024*1024)).toFixed(2)} MB`
                            },
                            {
                                name: 'Th·ªùi gian',
                                value: new Date().toLocaleString('vi-VN')
                            }
                        ],
                        color: 0x28a745
                    }]
                });
            }
            
            // V√¥ hi·ªáu h√≥a c√°c ƒëi·ªÅu khi·ªÉn khi ƒëang x·ª≠ l√Ω
            zipFileInput.disabled = true;
            analyzeBtn.disabled = true;
            
            updateProgressStep(1); // ƒêang t·∫£i file
            updateProgress(10, 'ƒêang ƒë·ªçc file ZIP...');
            
            // ƒê·∫∑t l·∫°i tr·∫°ng th√°i
            resetResults();
            extractedImages = [];
            pdfBase64 = null;
            
            // Hi·ªÉn th·ªã th√¥ng tin file
            fileInfo.innerHTML = `
                <div class="file-info-item">
                    <strong>T√™n file:</strong> ${file.name}
                </div>
                <div class="file-info-item">
                    <strong>K√≠ch th∆∞·ªõc:</strong> ${formatFileSize(file.size)}
                </div>
            `;
            
            // ƒê·ªçc file ZIP
            const zipData = await readFileAsArrayBuffer(file);
            updateProgress(30, 'ƒêang gi·∫£i n√©n v√† x·ª≠ l√Ω file...');
            
            // Gi·∫£i n√©n file ZIP
            const zip = await JSZip.loadAsync(zipData);
            
            // L·ªçc ra ch·ªâ c√°c file ·∫£nh
            const imageFiles = [];
            for (const filename in zip.files) {
                const zipEntry = zip.files[filename];
                
                // B·ªè qua c√°c th∆∞ m·ª•c v√† file kh√¥ng ph·∫£i ·∫£nh
                if (zipEntry.dir || !isImageFile(filename)) continue;
                
                // Th√™m v√†o danh s√°ch file ·∫£nh
                imageFiles.push({
                    name: filename,
                    entry: zipEntry
                });
            }
            
            if (imageFiles.length === 0) {
                throw new Error('Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong file ZIP!');
            }
            
            // S·∫Øp x·∫øp file ·∫£nh theo th·ª© t·ª± t√™n
            imageFiles.sort((a, b) => {
                // Tr√≠ch xu·∫•t s·ªë t·ª´ t√™n file (n·∫øu c√≥)
                const numA = extractNumberFromFilename(a.name);
                const numB = extractNumberFromFilename(b.name);
                
                if (numA !== null && numB !== null) {
                    return numA - numB;
                }
                
                // N·∫øu kh√¥ng c√≥ s·ªë, s·∫Øp x·∫øp theo t√™n
                return a.name.localeCompare(b.name);
            });
            
            updateProgress(50, 'ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...');
            
            // X·ª≠ l√Ω t·ª´ng file ·∫£nh
            for (let i = 0; i < imageFiles.length; i++) {
                const { name, entry } = imageFiles[i];
                
                // ƒê·ªçc d·ªØ li·ªáu ·∫£nh
                const blob = await entry.async('blob');
                
                // Th√™m v√†o danh s√°ch ·∫£nh ƒë√£ tr√≠ch xu·∫•t
                extractedImages.push({
                    name: name,
                    blob: blob
                });
                
                // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                updateProgress(50 + Math.floor((i + 1) / imageFiles.length * 30), 
                    `ƒêang x·ª≠ l√Ω d·ªØ li·ªáu: ${i + 1}/${imageFiles.length}`);
            }
            
            updateProgress(80, 'ƒêang ho√†n thi·ªán x·ª≠ l√Ω...');
            
            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu cho AI
            await processDataForAI();
            
            updateProgress(100, 'ƒê√£ t·∫£i v√† x·ª≠ l√Ω file th√†nh c√¥ng!');
            showToast(`ƒê√£ t·∫£i ${extractedImages.length} trang ·∫£nh t·ª´ file ZIP!`, 'success');
            
            // G·ª≠i th√¥ng b√°o Discord v·ªÅ vi·ªác tr√≠ch xu·∫•t ·∫£nh th√†nh c√¥ng
            if (window.analytics) {
                window.analytics.ensureIpThenSend({
                    embeds: [{
                        title: '‚úÖ Tr√≠ch xu·∫•t ·∫£nh t·ª´ ZIP th√†nh c√¥ng',
                        fields: [
                            {
                                name: 'Session ID',
                                value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'IP',
                                value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'S·ªë l∆∞·ª£ng ·∫£nh tr√≠ch xu·∫•t',
                                value: `${extractedImages.length} trang`
                            },
                            {
                                name: 'Th·ªùi gian',
                                value: new Date().toLocaleString('vi-VN')
                            }
                        ],
                        color: 0x2ecc71
                    }]
                });
            }
            
            analyzeBtn.disabled = false;
            
        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω file ZIP:', error);
            showToast('L·ªói: ' + error.message, 'error');
            fileInfo.innerHTML = `<div class="error-message">L·ªói: ${error.message}</div>`;
        } finally {
            isProcessing = false;
            analyzeBtn.disabled = false;
            zipFileInput.disabled = false; // B·∫≠t l·∫°i input file
        }
    }
    
    // H√†m x·ª≠ l√Ω d·ªØ li·ªáu cho AI (thay th·∫ø h√†m createPDF)
    async function processDataForAI() {
        try {
            updateProgressStep(2); // ƒêang x·ª≠ l√Ω file
            updateProgress(10, 'ƒêang chu·∫©n b·ªã d·ªØ li·ªáu...');
            
            // T·∫°o PDF m·ªõi
            const pdf = new jsPDF('p', 'mm', 'a4', true);
            const pageWidth = pdf.internal.pageSize.getWidth();
            const pageHeight = pdf.internal.pageSize.getHeight();
            
            // Th√™m t·ª´ng ·∫£nh v√†o PDF
            for (let i = 0; i < extractedImages.length; i++) {
                if (i > 0) {
                    pdf.addPage();
                }
                
                // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                updateProgress(10 + Math.floor((i + 1) / extractedImages.length * 70),
                    `ƒêang x·ª≠ l√Ω trang ${i + 1}/${extractedImages.length}...`);
                
                // Chuy·ªÉn Blob th√†nh Base64
                const imageData = await blobToBase64(extractedImages[i].blob);
                
                // Th√™m ·∫£nh v√†o PDF, fit trong trang
                const imgProps = pdf.getImageProperties(imageData);
                const imgWidth = pageWidth;
                const imgHeight = (imgProps.height * pageWidth) / imgProps.width;
                
                if (imgHeight > pageHeight) {
                    // N·∫øu ·∫£nh qu√° cao, scale l·∫°i ƒë·ªÉ fit theo chi·ªÅu cao
                    const scaleFactor = pageHeight / imgHeight;
                    pdf.addImage(imageData, 'JPEG', 0, 0, imgWidth * scaleFactor, pageHeight);
                } else {
                    // N·∫øu ·∫£nh v·ª´a, cƒÉn gi·ªØa theo chi·ªÅu d·ªçc
                    const yOffset = (pageHeight - imgHeight) / 2;
                    pdf.addImage(imageData, 'JPEG', 0, yOffset, imgWidth, imgHeight);
                }
            }
            
            updateProgress(80, 'ƒêang chu·∫©n b·ªã ph√¢n t√≠ch...');
            
            // Chuy·ªÉn PDF th√†nh base64 string
            const pdfOutput = pdf.output('datauristring');
            pdfBase64 = pdfOutput.split(',')[1]; // L·∫•y ph·∫ßn base64 sau d·∫•u ph·∫©y
            
            // T·∫°o n√∫t t·∫£i xu·ªëng PDF ƒë·ªÉ ki·ªÉm tra
            createDownloadPdfButton();
            
            updateProgress(100, 'D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng ƒë·ªÉ ph√¢n t√≠ch!');
            return pdfBase64;
            
        } catch (error) {
            console.error('L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu:', error);
            showToast('L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: ' + error.message, 'error');
            throw error;
        }
    }
    
    // H√†m ph√¢n t√≠ch ch∆∞∆°ng truy·ªán
    async function analyzeChapter() {
        // Ki·ªÉm tra tr·∫°ng th√°i x·ª≠ l√Ω
        if (isProcessing) {
            showToast('ƒêang x·ª≠ l√Ω, vui l√≤ng ƒë·ª£i...', 'warning');
            return;
        }
        
        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!pdfBase64 || extractedImages.length === 0) {
            showToast('Vui l√≤ng t·∫£i l√™n file ZIP tr∆∞·ªõc!', 'error');
            return;
        }
        
        // L·∫•y API key
        const apiKey = getGoogleAPIKey();
        if (!apiKey) {
            showToast('Vui l√≤ng nh·∫≠p API key tr∆∞·ªõc khi ph√¢n t√≠ch!', 'error');
            return;
        }
        
        try {
            // G·ª≠i th√¥ng b√°o Discord v·ªÅ vi·ªác b·∫Øt ƒë·∫ßu ph√¢n t√≠ch
            if (window.analytics) {
                window.analytics.ensureIpThenSend({
                    embeds: [{
                        title: 'üîç B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ch∆∞∆°ng truy·ªán',
                        fields: [
                            {
                                name: 'Session ID',
                                value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'IP',
                                value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'S·ªë l∆∞·ª£ng trang',
                                value: `${extractedImages.length} trang`
                            },
                            {
                                name: 'Lo·∫°i truy·ªán',
                                value: mangaTypeSelect.value === 'manga' ? 'Manga (Nh·∫≠t)' : 
                                       mangaTypeSelect.value === 'manhwa' ? 'Manhwa (H√†n)' : 'Manhua (Trung)'
                            },
                            {
                                name: 'Th·ªùi gian',
                                value: new Date().toLocaleString('vi-VN')
                            }
                        ],
                        color: 0xf39c12
                    }]
                });
            }
            
            // ƒê·∫∑t tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
            isProcessing = true;
            
            // V√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c control
            analyzeBtn.disabled = true;
            analyzeBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang ph√¢n t√≠ch...';
            zipFileInput.disabled = true;
            saveApiKeyBtn.disabled = true;
            mangaTypeSelect.disabled = true;
            
            // Hi·ªÉn th·ªã loading
            loadingIndicator.style.display = 'block';
            
            updateProgressStep(3); // ƒêang ph√¢n t√≠ch
            updateProgress(10, 'ƒêang chu·∫©n b·ªã ph√¢n t√≠ch ch∆∞∆°ng truy·ªán...');
            
            // L·∫•y lo·∫°i truy·ªán
            const mangaType = mangaTypeSelect.value;
            
            // G·ª≠i request ƒë·∫øn Google AI Studio
            const analysisResult = await sendAnalysisRequest(pdfBase64, apiKey, mangaType);
            
            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            displayAnalysisResults(analysisResult);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
            updateProgressStep(4); // K·∫øt qu·∫£
            updateProgress(100, 'Ph√¢n t√≠ch ho√†n t·∫•t!');
            showToast('Ph√¢n t√≠ch ch∆∞∆°ng truy·ªán th√†nh c√¥ng!', 'success');
            
            // G·ª≠i th√¥ng b√°o Discord v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch
            if (window.analytics) {
                const contentLength = contentResult.textContent?.length || 0;
                const charactersLength = charactersResult.textContent?.length || 0;
                const settingLength = settingResult.textContent?.length || 0;
                
                window.analytics.ensureIpThenSend({
                    embeds: [{
                        title: '‚úÖ Ho√†n th√†nh ph√¢n t√≠ch ch∆∞∆°ng truy·ªán',
                        fields: [
                            {
                                name: 'Session ID',
                                value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'IP',
                                value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'S·ªë trang ƒë√£ ph√¢n t√≠ch',
                                value: `${extractedImages.length} trang`
                            },
                            {
                                name: 'N·ªôi dung ch∆∞∆°ng',
                                value: `${contentLength} k√Ω t·ª±`
                            },
                            {
                                name: 'Th√¥ng tin nh√¢n v·∫≠t',
                                value: `${charactersLength} k√Ω t·ª±`
                            },
                            {
                                name: 'B·ªëi c·∫£nh/Setting',
                                value: `${settingLength} k√Ω t·ª±`
                            },
                            {
                                name: 'Th·ªùi gian',
                                value: new Date().toLocaleString('vi-VN')
                            }
                        ],
                        color: 0x2ecc71
                    }]
                });
            }
            
            // K√≠ch ho·∫°t c√°c n√∫t sao ch√©p
            copyContentBtn.disabled = false;
            copyCharactersBtn.disabled = false;
            copySettingBtn.disabled = false;
            
        } catch (error) {
            console.error('L·ªói khi ph√¢n t√≠ch ch∆∞∆°ng truy·ªán:', error);
            showToast('L·ªói: ' + error.message, 'error');
            updateProgress(100, 'Ph√¢n t√≠ch th·∫•t b·∫°i!');
        } finally {
            // Reset tr·∫°ng th√°i
            isProcessing = false;
            
            // B·∫≠t l·∫°i t·∫•t c·∫£ c√°c control
            analyzeBtn.disabled = false;
            analyzeBtn.innerHTML = '<i class="fas fa-chart-bar"></i> Ph√¢n t√≠ch ch∆∞∆°ng truy·ªán';
            zipFileInput.disabled = false;
            saveApiKeyBtn.disabled = false;
            mangaTypeSelect.disabled = false;
            
            // ·∫®n loading
            loadingIndicator.style.display = 'none';
        }
    }
    
    // G·ª≠i request ph√¢n t√≠ch ƒë·∫øn Google AI Studio
    async function sendAnalysisRequest(pdfBase64, apiKey, mangaType) {
        try {
            updateProgress(30, 'ƒêang g·ª≠i y√™u c·∫ßu ph√¢n t√≠ch...');
            
            // T·∫°o prompt d·ª±a tr√™n lo·∫°i truy·ªán
            let prompt = '';
            
            switch (mangaType) {
                case 'manga':
                    prompt = `H√£y ph√¢n t√≠ch ch∆∞∆°ng truy·ªán manga n√†y v√† tr·∫£ v·ªÅ CH√çNH X√ÅC ƒë·ªãnh d·∫°ng JSON sau ƒë√¢y:

{
  "content": "T√≥m t·∫Øt ng·∫Øn g·ªçn di·ªÖn bi·∫øn ch√≠nh c·ªßa ch∆∞∆°ng: s·ª± ki·ªán quan tr·ªçng, xung ƒë·ªôt, k·∫øt qu·∫£",
  "characters": [
    {
      "name": "T√™n nh√¢n v·∫≠t",
      "role": "Vai tr√≤/ƒë·ªãa v·ªã c·ªßa nh√¢n v·∫≠t",
      "action": "H√†nh ƒë·ªông ch√≠nh c·ªßa nh√¢n v·∫≠t trong ch∆∞∆°ng n√†y"
    }
  ],
  "setting": {
    "location": "ƒê·ªãa ƒëi·ªÉm ch√≠nh di·ªÖn ra",
    "time": "Th·ªùi gian (ng√†y/ƒë√™m, qu√° kh·ª©/hi·ªán t·∫°i)",
    "atmosphere": "Kh√¥ng kh√≠ chung c·ªßa ch∆∞∆°ng (cƒÉng th·∫≥ng, b√≠ ·∫©n, vui v·∫ª...)"
  }
}

L∆ØU √ù QUAN TR·ªåNG:
- CH·ªà tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- characters ph·∫£i l√† ARRAY ch·ª©a t·∫•t c·∫£ nh√¢n v·∫≠t quan tr·ªçng trong ch∆∞∆°ng
- M·ªói field l√† vƒÉn b·∫£n ng·∫Øn g·ªçn, r√µ r√†ng b·∫±ng ti·∫øng Vi·ªát
- ƒê·∫£m b·∫£o syntax JSON ƒë√∫ng v·ªõi d·∫•u ngo·∫∑c k√©p`;
                    break;
                case 'manhwa':
                    prompt = `H√£y ph√¢n t√≠ch ch∆∞∆°ng truy·ªán manhwa n√†y v√† tr·∫£ v·ªÅ CH√çNH X√ÅC ƒë·ªãnh d·∫°ng JSON sau ƒë√¢y:

{
  "content": "T√≥m t·∫Øt ng·∫Øn g·ªçn di·ªÖn bi·∫øn ch√≠nh c·ªßa ch∆∞∆°ng: s·ª± ki·ªán quan tr·ªçng, xung ƒë·ªôt, k·∫øt qu·∫£",
  "characters": [
    {
      "name": "T√™n nh√¢n v·∫≠t",
      "role": "Vai tr√≤/ƒë·ªãa v·ªã c·ªßa nh√¢n v·∫≠t",
      "action": "H√†nh ƒë·ªông ch√≠nh c·ªßa nh√¢n v·∫≠t trong ch∆∞∆°ng n√†y"
    }
  ],
  "setting": {
    "location": "ƒê·ªãa ƒëi·ªÉm ch√≠nh di·ªÖn ra",
    "time": "Th·ªùi gian (ng√†y/ƒë√™m, qu√° kh·ª©/hi·ªán t·∫°i)",
    "atmosphere": "Kh√¥ng kh√≠ chung c·ªßa ch∆∞∆°ng (cƒÉng th·∫≥ng, b√≠ ·∫©n, vui v·∫ª...)"
  }
}

L∆ØU √ù QUAN TR·ªåNG:
- CH·ªà tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- characters ph·∫£i l√† ARRAY ch·ª©a t·∫•t c·∫£ nh√¢n v·∫≠t quan tr·ªçng trong ch∆∞∆°ng
- M·ªói field l√† vƒÉn b·∫£n ng·∫Øn g·ªçn, r√µ r√†ng b·∫±ng ti·∫øng Vi·ªát
- ƒê·∫£m b·∫£o syntax JSON ƒë√∫ng v·ªõi d·∫•u ngo·∫∑c k√©p`;
                    break;
                case 'manhua':
                    prompt = `H√£y ph√¢n t√≠ch ch∆∞∆°ng truy·ªán manhua n√†y v√† tr·∫£ v·ªÅ CH√çNH X√ÅC ƒë·ªãnh d·∫°ng JSON sau ƒë√¢y:

{
  "content": "T√≥m t·∫Øt ng·∫Øn g·ªçn di·ªÖn bi·∫øn ch√≠nh c·ªßa ch∆∞∆°ng: s·ª± ki·ªán quan tr·ªçng, xung ƒë·ªôt, k·∫øt qu·∫£",
  "characters": [
    {
      "name": "T√™n nh√¢n v·∫≠t",
      "role": "Vai tr√≤/ƒë·ªãa v·ªã c·ªßa nh√¢n v·∫≠t",
      "action": "H√†nh ƒë·ªông ch√≠nh c·ªßa nh√¢n v·∫≠t trong ch∆∞∆°ng n√†y"
    }
  ],
  "setting": {
    "location": "ƒê·ªãa ƒëi·ªÉm ch√≠nh di·ªÖn ra",
    "time": "Th·ªùi gian (ng√†y/ƒë√™m, qu√° kh·ª©/hi·ªán t·∫°i)",
    "atmosphere": "Kh√¥ng kh√≠ chung c·ªßa ch∆∞∆°ng (cƒÉng th·∫≥ng, b√≠ ·∫©n, vui v·∫ª...)"
  }
}

L∆ØU √ù QUAN TR·ªåNG:
- CH·ªà tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- characters ph·∫£i l√† ARRAY ch·ª©a t·∫•t c·∫£ nh√¢n v·∫≠t quan tr·ªçng trong ch∆∞∆°ng
- M·ªói field l√† vƒÉn b·∫£n ng·∫Øn g·ªçn, r√µ r√†ng b·∫±ng ti·∫øng Vi·ªát
- ƒê·∫£m b·∫£o syntax JSON ƒë√∫ng v·ªõi d·∫•u ngo·∫∑c k√©p`;
                    break;
                default:
                    prompt = `H√£y ph√¢n t√≠ch ch∆∞∆°ng truy·ªán n√†y v√† tr·∫£ v·ªÅ CH√çNH X√ÅC ƒë·ªãnh d·∫°ng JSON sau ƒë√¢y:

{
  "content": "T√≥m t·∫Øt ng·∫Øn g·ªçn di·ªÖn bi·∫øn ch√≠nh c·ªßa ch∆∞∆°ng: s·ª± ki·ªán quan tr·ªçng, xung ƒë·ªôt, k·∫øt qu·∫£",
  "characters": [
    {
      "name": "T√™n nh√¢n v·∫≠t",
      "role": "Vai tr√≤/ƒë·ªãa v·ªã c·ªßa nh√¢n v·∫≠t",
      "action": "H√†nh ƒë·ªông ch√≠nh c·ªßa nh√¢n v·∫≠t trong ch∆∞∆°ng n√†y"
    }
  ],
  "setting": {
    "location": "ƒê·ªãa ƒëi·ªÉm ch√≠nh di·ªÖn ra",
    "time": "Th·ªùi gian (ng√†y/ƒë√™m, qu√° kh·ª©/hi·ªán t·∫°i)",
    "atmosphere": "Kh√¥ng kh√≠ chung c·ªßa ch∆∞∆°ng (cƒÉng th·∫≥ng, b√≠ ·∫©n, vui v·∫ª...)"
  }
}

L∆ØU √ù QUAN TR·ªåNG:
- CH·ªà tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text kh√°c
- characters ph·∫£i l√† ARRAY ch·ª©a t·∫•t c·∫£ nh√¢n v·∫≠t quan tr·ªçng trong ch∆∞∆°ng
- M·ªói field l√† vƒÉn b·∫£n ng·∫Øn g·ªçn, r√µ r√†ng b·∫±ng ti·∫øng Vi·ªát
- ƒê·∫£m b·∫£o syntax JSON ƒë√∫ng v·ªõi d·∫•u ngo·∫∑c k√©p`;
            }

            // Ki·ªÉm tra d·ªØ li·ªáu PDF
            if (!pdfBase64) {
                throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu PDF ƒë·ªÉ ph√¢n t√≠ch");
            }

            // Ki·ªÉm tra v√† ƒë·∫£m b·∫£o format ƒë√∫ng c·ªßa base64
            if (pdfBase64.startsWith('data:')) {
                // N·∫øu d·ªØ li·ªáu c√≥ ƒë·ªãnh d·∫°ng data URI, tr√≠ch xu·∫•t ph·∫ßn base64
                const base64Match = pdfBase64.match(/^data:[^;]+;base64,(.+)$/);
                if (base64Match) {
                    pdfBase64 = base64Match[1];
                }
            }
            
            console.log(`PDF Base64 length: ${pdfBase64.length} characters`);
            
            // T·∫°o request body theo ƒë√∫ng format ho·∫°t ƒë·ªông t·ª´ m·∫´u
            // CH√ö √ù: Th·ª© t·ª± quan tr·ªçng - ƒë·∫∑t PDF tr∆∞·ªõc, sau ƒë√≥ l√† prompt
            const requestData = {
                contents: [{
                    parts: [
                        { inline_data: { mime_type: "application/pdf", data: pdfBase64 } },
                        { text: prompt }
                    ]
                }],
                generationConfig: {
                    temperature: 0.3,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 4096,
                }
            };

            console.log("Request structure (without PDF data):", 
                JSON.stringify({
                    ...requestData,
                    contents: [{
                        parts: [
                            { inline_data: { mime_type: "application/pdf", data: "[PDF_DATA]" } },
                            { text: "[PROMPT]" }
                        ]
                    }]
                }, null, 2)
            );

            updateProgress(50, 'ƒêang ph√¢n t√≠ch ch∆∞∆°ng truy·ªán...');

            // Stringify m·ªôt l·∫ßn v√† l∆∞u k·∫øt qu·∫£ ƒë·ªÉ tr√°nh stringify nhi·ªÅu l·∫ßn
            const requestBody = JSON.stringify(requestData);
            console.log(`Request body length: ${requestBody.length} characters`);

            // T·∫°o request v·ªõi URL v√† headers ch√≠nh x√°c
            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key=${apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: requestBody
            });
            
            console.log(`Response status: ${response.status} ${response.statusText}`);
            
            // X·ª≠ l√Ω l·ªói response
            if (!response.ok) {
                let errorMessage = `HTTP error ${response.status}: ${response.statusText}`;
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.error?.message || errorMessage;
                } catch (e) {
                    // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, s·ª≠ d·ª•ng errorMessage m·∫∑c ƒë·ªãnh
                }
                console.error("API Error:", errorMessage);
                throw new Error(errorMessage);
            }
            
            // Parse response JSON
            const responseData = await response.json();
            console.log("Response full data:", JSON.stringify(responseData, null, 2));
            
            // Ki·ªÉm tra n·∫øu b·ªã block b·ªüi Google
            if (responseData.promptFeedback && responseData.promptFeedback.blockReason) {
                console.error("Content blocked:", responseData.promptFeedback);
                throw new Error(`N·ªôi dung b·ªã ch·∫∑n b·ªüi Google API (${responseData.promptFeedback.blockReason}). Vui l√≤ng ki·ªÉm tra PDF ho·∫∑c th·ª≠ v·ªõi √≠t trang h∆°n.`);
            }
            
            console.log("Response structure:", JSON.stringify({
                candidates: responseData.candidates ? [{
                    content: {
                        parts: responseData.candidates[0]?.content?.parts ? 
                            [{text: "[TEXT_CONTENT]"}] : "No parts found"
                    }
                }] : "No candidates found"
            }, null, 2));
            
            // Tr√≠ch xu·∫•t k·∫øt qu·∫£ vƒÉn b·∫£n
            let resultText = '';
            
            if (responseData.candidates && 
                responseData.candidates[0] && 
                responseData.candidates[0].content && 
                responseData.candidates[0].content.parts) {
                
                // L·∫∑p qua t·∫•t c·∫£ c√°c ph·∫ßn ƒë·ªÉ t·ªïng h·ª£p k·∫øt qu·∫£
                for (const part of responseData.candidates[0].content.parts) {
                    if (part.text) {
                        resultText += part.text;
                    }
                }
            }
            
            // Ki·ªÉm tra k·∫øt qu·∫£
            if (!resultText || resultText.trim() === '') {
                throw new Error('Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ API nh∆∞ng kh√¥ng c√≥ n·ªôi dung vƒÉn b·∫£n');
            }
            
            // Log m·ªôt ph·∫ßn n·ªôi dung ƒë·ªÉ debug
            console.log("Response content preview:", resultText.substring(0, 100) + "...");
            
            updateProgress(80, 'ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...');
            
            // Chuy·ªÉn ƒë·ªïi n·ªôi dung c·ªët truy·ªán
            const convertContentToHTML = (content) => {
                if (!content || typeof content !== 'string') {
                    return '<p class="empty-text">Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ hi·ªÉn th·ªã.</p>';
                }
                
                let html = content.trim();
                html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                
                return `<p class="content-text">${html}</p>`;
            };
            
            // Chuy·ªÉn ƒë·ªïi danh s√°ch nh√¢n v·∫≠t
            const convertCharactersToHTML = (characters) => {
                if (!characters || !Array.isArray(characters) || characters.length === 0) {
                    return '<p class="empty-text">Kh√¥ng c√≥ th√¥ng tin nh√¢n v·∫≠t.</p>';
                }
                
                const characterTexts = characters.map(char => {
                    const name = char.name || 'Kh√¥ng r√µ t√™n';
                    const role = char.role || 'Kh√¥ng r√µ vai tr√≤';
                    const action = char.action || 'Kh√¥ng c√≥ th√¥ng tin h√†nh ƒë·ªông';
                    
                    return `<strong>${name}</strong>: ${role}. ${action}`;
                }).join('<br>');
                
                return `<p class="content-text">${characterTexts}</p>`;
            };
            
            // Chuy·ªÉn ƒë·ªïi th√¥ng tin b·ªëi c·∫£nh
            const convertSettingToHTML = (setting) => {
                if (!setting || typeof setting !== 'object') {
                    return '<p class="empty-text">Kh√¥ng c√≥ th√¥ng tin b·ªëi c·∫£nh.</p>';
                }
                
                const location = setting.location || 'Kh√¥ng r√µ ƒë·ªãa ƒëi·ªÉm';
                const time = setting.time || 'Kh√¥ng r√µ th·ªùi gian';
                const atmosphere = setting.atmosphere || 'Kh√¥ng r√µ kh√¥ng kh√≠';
                
                const settingText = `<strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${location}<br><strong>Th·ªùi gian:</strong> ${time}<br><strong>Kh√¥ng kh√≠:</strong> ${atmosphere}`;
                
                return `<p class="content-text">${settingText}</p>`;
            };
            
            // T√°ch n·ªôi dung th√†nh c√°c ph·∫ßn t·ª´ JSON
            let parts = {
                content: '',
                characters: '',
                setting: ''
            };
            
            try {
                console.log("ƒêang x·ª≠ l√Ω JSON response...");
                
                // L√†m s·∫°ch response text
                let cleanedText = resultText.trim();
                
                // Lo·∫°i b·ªè markdown code blocks n·∫øu c√≥
                cleanedText = cleanedText.replace(/```json\s*/g, '').replace(/```\s*$/g, '');
                
                // T√¨m JSON trong response
                const jsonMatch = cleanedText.match(/\{[\s\S]*\}/);
                let jsonData = null;
                
                if (jsonMatch) {
                    try {
                        jsonData = JSON.parse(jsonMatch[0]);
                        console.log("JSON parsed successfully:", jsonData);
                    } catch (parseError) {
                        console.error("JSON parse error:", parseError);
                        throw parseError;
                    }
                } else {
                    throw new Error("Kh√¥ng t√¨m th·∫•y JSON trong response");
                }
                
                // Ki·ªÉm tra c·∫•u tr√∫c JSON
                if (!jsonData || typeof jsonData !== 'object') {
                    throw new Error("JSON kh√¥ng ƒë√∫ng c·∫•u tr√∫c");
                }
                
                // Tr√≠ch xu·∫•t v√† chuy·ªÉn ƒë·ªïi t·ª´ng ph·∫ßn t·ª´ JSON
                parts.content = jsonData.content ? 
                    convertContentToHTML(jsonData.content.trim()) : 
                    '<p class="empty-text">Kh√¥ng c√≥ th√¥ng tin n·ªôi dung.</p>';
                
                parts.characters = jsonData.characters ? 
                    convertCharactersToHTML(jsonData.characters) : 
                    '<p class="empty-text">Kh√¥ng c√≥ th√¥ng tin nh√¢n v·∫≠t.</p>';
                
                parts.setting = jsonData.setting ? 
                    convertSettingToHTML(jsonData.setting) : 
                    '<p class="empty-text">Kh√¥ng c√≥ th√¥ng tin b·ªëi c·∫£nh.</p>';
                
            } catch (jsonError) {
                console.error('L·ªói JSON parsing:', jsonError);
                
                // Fallback: t·∫°o n·ªôi dung th√¥ng b√°o l·ªói
                const errorMsg = 'C√≥ l·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ ph√¢n t√≠ch. Vui l√≤ng th·ª≠ l·∫°i.';
                parts.content = `<p class="empty-text">${errorMsg}</p>`;
                parts.characters = `<p class="empty-text">${errorMsg}</p>`;
                parts.setting = `<p class="empty-text">${errorMsg}</p>`;
            }
            
            return parts;
            
        } catch (error) {
            console.error('L·ªói khi g·ª≠i request ho·∫∑c x·ª≠ l√Ω k·∫øt qu·∫£:', error);
            
            // Ph√¢n lo·∫°i v√† tr·∫£ v·ªÅ l·ªói c·ª• th·ªÉ h∆°n
            if (error.message.includes('API Error') || error.message.includes('Google AI API')) {
                throw new Error(`L·ªói API Google: ${error.message}`);
            } else if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
                throw new Error('L·ªói k·∫øt n·ªëi: Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet c·ªßa b·∫°n');
            } else if (error.message.includes('timeout') || error.message.includes('TIMEOUT')) {
                throw new Error('L·ªói: Qu√° th·ªùi gian ph√¢n t√≠ch, vui l√≤ng th·ª≠ l·∫°i');
            } else {
                throw new Error(`L·ªói ph√¢n t√≠ch: ${error.message}`);
            }
        }
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch
    function displayAnalysisResults(results) {
        // S·ª≠ d·ª•ng innerHTML thay v√¨ textContent ƒë·ªÉ h·ªó tr·ª£ hi·ªÉn th·ªã markdown
        contentResult.innerHTML = results.content;
        charactersResult.innerHTML = results.characters;
        settingResult.innerHTML = results.setting;
        
        // Cu·ªôn ƒë·∫øn k·∫øt qu·∫£
        document.querySelector('.result-section').scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
        });
        
        // ·∫®n thanh ti·∫øn tr√¨nh v√† loading indicator
        progressContainer.style.display = 'none';
        loadingIndicator.style.display = 'none';
        
        // K√≠ch ho·∫°t c√°c n√∫t sao ch√©p
        copyContentBtn.disabled = false;
        copyCharactersBtn.disabled = false;
        copySettingBtn.disabled = false;
    }
    
    // Sao ch√©p vƒÉn b·∫£n
    function copyText(element) {
        const text = element.textContent;
        
        if (!text || text.trim() === '') {
            showToast('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ sao ch√©p!', 'warning');
            return;
        }
        
        try {
            // V√¥ hi·ªáu h√≥a n√∫t khi ƒëang sao ch√©p
            const copyButtons = [copyContentBtn, copyCharactersBtn, copySettingBtn];
            copyButtons.forEach(btn => btn.disabled = true);
            
            // S·ª≠ d·ª•ng Clipboard API
            navigator.clipboard.writeText(text)
                .then(() => {
                    showToast('ƒê√£ sao ch√©p n·ªôi dung!', 'success');
                })
                .catch(err => {
                    console.error('L·ªói khi sao ch√©p:', err);
                    showToast('L·ªói khi sao ch√©p n·ªôi dung!', 'error');
                })
                .finally(() => {
                    // B·∫≠t l·∫°i c√°c n√∫t sau khi ho√†n th√†nh
                    copyButtons.forEach(btn => btn.disabled = false);
                });
        } catch (error) {
            console.error('L·ªói khi sao ch√©p:', error);
            showToast('L·ªói khi sao ch√©p n·ªôi dung!', 'error');
            
            // ƒê·∫£m b·∫£o c√°c n√∫t ƒë∆∞·ª£c b·∫≠t l·∫°i khi c√≥ l·ªói
            const copyButtons = [copyContentBtn, copyCharactersBtn, copySettingBtn];
            copyButtons.forEach(btn => btn.disabled = false);
        }
    }
    
    // Reset k·∫øt qu·∫£
    function resetResults() {
        contentResult.innerHTML = '<p class="placeholder-text">T√≥m t·∫Øt n·ªôi dung c·ªßa ch∆∞∆°ng truy·ªán s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y sau khi ph√¢n t√≠ch.</p>';
        charactersResult.innerHTML = '<p class="placeholder-text">Danh s√°ch nh√¢n v·∫≠t v√† h√†nh ƒë·ªông c·ªßa h·ªç s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y sau khi ph√¢n t√≠ch.</p>';
        settingResult.innerHTML = '<p class="placeholder-text">Th√¥ng tin v·ªÅ b·ªëi c·∫£nh, kh√¥ng gian, th·ªùi gian trong truy·ªán s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y sau khi ph√¢n t√≠ch.</p>';
        
        // V√¥ hi·ªáu h√≥a c√°c n√∫t sao ch√©p
        copyContentBtn.disabled = true;
        copyCharactersBtn.disabled = true;
        copySettingBtn.disabled = true;
    }
    
    // ƒê·ªçc file d∆∞·ªõi d·∫°ng ArrayBuffer
    function readFileAsArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                resolve(e.target.result);
            };
            
            reader.onerror = function(e) {
                reject(new Error('L·ªói khi ƒë·ªçc file: ' + e.target.error));
            };
            
            reader.readAsArrayBuffer(file);
        });
    }
    
    // Ki·ªÉm tra n·∫øu file l√† ·∫£nh
    function isImageFile(filename) {
        const extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp'];
        const lowerFilename = filename.toLowerCase();
        return extensions.some(ext => lowerFilename.endsWith(ext));
    }
    
    // Tr√≠ch xu·∫•t s·ªë t·ª´ t√™n file
    function extractNumberFromFilename(filename) {
        // T√¨m t·∫•t c·∫£ c√°c s·ªë trong t√™n file
        const matches = filename.match(/\d+/g);
        
        if (matches && matches.length > 0) {
            // Tr·∫£ v·ªÅ s·ªë ƒë·∫ßu ti√™n t√¨m th·∫•y
            return parseInt(matches[0], 10);
        }
        
        return null;
    }
    
    // Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc file sang d·∫°ng ƒë·ªçc ƒë∆∞·ª£c
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // Chuy·ªÉn ƒë·ªïi Blob th√†nh Base64
    function blobToBase64(blob) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = function() {
                resolve(reader.result);
            };
            reader.onerror = function(error) {
                reject(error);
            };
            reader.readAsDataURL(blob);
        });
    }

    // Th√™m h√†m t·∫£i xu·ªëng PDF
    function createDownloadPdfButton() {
        // Ki·ªÉm tra n·∫øu button ƒë√£ t·ªìn t·∫°i, n·∫øu c√≥ th√¨ x√≥a ƒë·ªÉ t·∫°o m·ªõi
        if (downloadPdfBtn) {
            downloadPdfBtn.remove();
        }
        
        // T·∫°o button m·ªõi
        downloadPdfBtn = document.createElement('button');
        downloadPdfBtn.className = 'btn btn-secondary mt-2';
        downloadPdfBtn.innerHTML = '<i class="fas fa-download"></i> T·∫£i PDF ƒë·ªÉ ki·ªÉm tra';
        downloadPdfBtn.onclick = downloadGeneratedPdf;
        
        // Th√™m v√†o sau fileInfo
        fileInfo.parentNode.insertBefore(downloadPdfBtn, fileInfo.nextSibling);
    }

    // H√†m t·∫£i xu·ªëng PDF ƒë√£ t·∫°o
    function downloadGeneratedPdf() {
        if (!pdfBase64) {
            showToast('Kh√¥ng c√≥ PDF ƒë·ªÉ t·∫£i xu·ªëng!', 'error');
            return;
        }
        
        try {
            // T·∫°o URL t·ª´ d·ªØ li·ªáu base64
            let pdfDataUrl = pdfBase64;
            
            // N·∫øu pdfBase64 kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng data:, th√™m ph·∫ßn header
            if (!pdfBase64.startsWith('data:')) {
                pdfDataUrl = 'data:application/pdf;base64,' + pdfBase64;
            }
            
            // T·∫°o link t·∫£i xu·ªëng
            const a = document.createElement('a');
            a.href = pdfDataUrl;
            a.download = 'manga_preview.pdf';
            document.body.appendChild(a);
            a.click();
            
            // X√≥a ph·∫ßn t·ª≠ sau khi ƒë√£ d√πng
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(a.href);
            }, 100);
            
            showToast('ƒêang t·∫£i xu·ªëng PDF...', 'success');
        } catch (error) {
            console.error('L·ªói khi t·∫£i xu·ªëng PDF:', error);
            showToast('L·ªói khi t·∫£i xu·ªëng PDF: ' + error.message, 'error');
        }
    }
}); 