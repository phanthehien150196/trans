document.addEventListener('DOMContentLoaded', function() {
    // Thay API URL OpenRouter th√†nh h·∫±ng s·ªë chung cho API URL
    const API_BASE = 'https://generativelanguage.googleapis.com/v1beta';
    // S·ª≠ d·ª•ng API key t·ª´ input
    let apiKeyInput = document.getElementById('api-key');
    
    // DOM elements
    const characterContainer = document.getElementById('characters-container');
    const relationshipContainer = document.getElementById('relationships-container');
    const pronounContainer = document.getElementById('pronouns-container');
    const expressionsContainer = document.getElementById('expressions-container');
    const contextInput = document.getElementById('context');
    const genreInput = document.getElementById('genre');
    const styleInput = document.getElementById('style');
    const requirementsInput = document.getElementById('requirements');
    const sourceTextInput = document.getElementById('source-text');
    const textFileInput = document.getElementById('text-file-input');
    const textTableBody = document.getElementById('text-table-body');
    const translateBtn = document.getElementById('translate-btn');
    const translationResult = document.getElementById('translation-result');
    const loadingIndicator = document.getElementById('loading-indicator');
    const refineAgainBtn = document.getElementById('refine-again-btn');
    
    // Bi·∫øn tr·∫°ng th√°i
    let isLoading = false;
    
    // H√†m hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫πp
    function showToast(message, type = 'info') {
        const backgroundColor = {
            'success': '#4caf50',
            'error': '#f44336',
            'warning': '#ff9800',
            'info': '#2196f3'
        };
        
        Toastify({
            text: message,
            duration: 3000,
            close: true,
            gravity: "top",
            position: "right",
            stopOnFocus: true,
            style: {
                background: backgroundColor[type],
                boxShadow: "none",
                borderRadius: "4px",
                color: "#fff",
                fontWeight: "500"
            }
        }).showToast();
    }
    
    // Th√™m c√°c n√∫t sao ch√©p cho k·∫øt qu·∫£ d·ªãch
    const outputSection = document.querySelector('.output-section');
    const resultActions = document.createElement('div');
    resultActions.className = 'result-actions';
    
    // Button to copy as text
    const copyTextBtn = document.createElement('button');
    copyTextBtn.textContent = 'Sao ch√©p k·∫øt qu·∫£';
    copyTextBtn.className = 'btn btn-secondary btn-small';
    copyTextBtn.addEventListener('click', function() {
        navigator.clipboard.writeText(translationResult.textContent).then(() => {
            showToast('ƒê√£ sao ch√©p k·∫øt qu·∫£!', 'success');
        }).catch(err => {
            console.error('L·ªói khi sao ch√©p:', err);
            showToast('Kh√¥ng th·ªÉ sao ch√©p: ' + err.message, 'error');
        });
    });
    
    resultActions.appendChild(copyTextBtn);
    outputSection.appendChild(resultActions);
    
    // Templates
    const characterTemplate = document.getElementById('character-template');
    const relationshipTemplate = document.getElementById('relationship-template');
    const pronounTemplate = document.getElementById('pronoun-template');
    const expressionTemplate = document.getElementById('expression-template');
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa c√°c n√∫t
    updateButtonState();
    
    // Th√™m n√∫t th√™m d√≤ng m·ªõi
    addNewRowButton();
    
    // Add event listeners for buttons
    document.getElementById('add-character').addEventListener('click', addCharacter);
    document.getElementById('add-relationship').addEventListener('click', addRelationship);
    document.getElementById('add-pronoun').addEventListener('click', addPronoun);
    document.getElementById('add-expression').addEventListener('click', addExpression);
    translateBtn.addEventListener('click', translateText);
    refineAgainBtn.addEventListener('click', refineAgain);
    textFileInput.addEventListener('change', handleFileUpload);
    
    // Th√™m n√∫t l∆∞u v√† t·∫£i c√†i ƒë·∫∑t
    document.getElementById('save-settings').addEventListener('click', saveSettings);
    document.getElementById('load-settings').addEventListener('click', loadSettings);
    document.getElementById('export-json').addEventListener('click', exportToJson);
    document.getElementById('import-json-btn').addEventListener('click', function() {
        document.getElementById('import-json').click();
    });
    document.getElementById('import-json').addEventListener('change', importFromJson);
    document.getElementById('reset-settings').addEventListener('click', resetSettings);
    
    // Th√™m ch·ª©c nƒÉng hi·ªÉn th·ªã/·∫©n API key
    document.getElementById('toggle-api-key').addEventListener('click', function() {
        const apiKeyInput = document.getElementById('api-key');
        if (apiKeyInput.type === 'password') {
            apiKeyInput.type = 'text';
            this.textContent = 'üîí';
        } else {
            apiKeyInput.type = 'password';
            this.textContent = 'üëÅÔ∏è';
        }
    });
    
    // Th√™m event listeners cho tr∆∞·ªùng nh·∫≠p
    genreInput.addEventListener('input', function() {
        markAsChanged();
    });
    styleInput.addEventListener('input', function() {
        markAsChanged();
    });
    requirementsInput.addEventListener('input', function() {
        markAsChanged();
    });
    contextInput.addEventListener('input', function() {
        markAsChanged();
    });
    sourceTextInput.addEventListener('input', function() {
        markAsChanged();
    });
    
    // Characters data array
    let characters = [];
    // Expressions data array
    let expressions = [];
    // L∆∞u c√°c c·∫∑p x∆∞ng h√¥ ƒë√£ t·ªìn t·∫°i ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    let existingPronounPairs = new Set();
    // Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i
    let hasUnsavedChanges = false;
    // Lines of text for translation
    let textLines = [];
    
    // Kh√¥ng c√≤n t·ª± ƒë·ªông l∆∞u ƒë·ªãnh k·ª≥
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i khi c√≥ thay ƒë·ªïi
    function markAsChanged() {
        hasUnsavedChanges = true;
    }
    
    // Th√™m s·ª± ki·ªán beforeunload ƒë·ªÉ c·∫£nh b√°o ng∆∞·ªùi d√πng khi r·ªùi trang m√† ch∆∞a l∆∞u
    window.addEventListener('beforeunload', function(e) {
        if (hasUnsavedChanges) {
            // Hi·ªÉn th·ªã th√¥ng b√°o
            const confirmationMessage = 'B·∫°n c√≥ thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c l∆∞u. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r·ªùi kh·ªèi trang?';
            e.returnValue = confirmationMessage;
            return confirmationMessage;
        }
    });
    
    // Ki·ªÉm tra xem c√°c ph·∫ßn t·ª≠ DOM ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
    if (!characterContainer || !relationshipContainer || !pronounContainer || 
        !contextInput || !genreInput || !styleInput || !requirementsInput || !sourceTextInput) {
        console.error("Kh√¥ng th·ªÉ t√¨m th·∫•y m·ªôt ho·∫∑c nhi·ªÅu ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt!");
        alert("L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng t·∫£i l·∫°i trang.");
    } else {
        console.log("C√°c ph·∫ßn t·ª≠ DOM ƒë√£ ƒë∆∞·ª£c t√¨m th·∫•y:", {
            characterContainer: !!characterContainer,
            relationshipContainer: !!relationshipContainer,
            pronounContainer: !!pronounContainer,
            contextInput: !!contextInput,
            genreInput: !!genreInput,
            styleInput: !!styleInput,
            requirementsInput: !!requirementsInput,
            sourceTextInput: !!sourceTextInput,
        });
        
        // T·∫£i d·ªØ li·ªáu t·ª´ localStorage n·∫øu c√≥
        const savedSettings = localStorage.getItem('dich-ai-settings');
        if (savedSettings) {
            try {
                const jsonData = JSON.parse(savedSettings);
                loadDataFromJson(jsonData);
                console.log("ƒê√£ t·∫£i c√†i ƒë·∫∑t t·ª´ localStorage");
            } catch (error) {
                console.error("L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ localStorage:", error);
            }
        }
    }
    
    // If there's no character yet, add an initial one
    if (characterContainer.children.length === 0) {
        addCharacter();
    }
    
    // Functions
    function addCharacter() {
        const newCharacter = characterTemplate.content.cloneNode(true);
        characterContainer.appendChild(newCharacter);
        
        // Add event listener to the remove button
        const removeBtn = characterContainer.querySelector('.character-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            this.closest('.character-entry').remove();
            updateCharactersList();
            markAsChanged();
        });
        
        // Add event listener to input for updating characters list
        const nameInput = characterContainer.querySelector('.character-entry:last-child .character-name');
        nameInput.addEventListener('input', function() {
            updateCharactersList();
            markAsChanged();
        });
        
        updateCharactersList();
        markAsChanged();
    }
    
    function addRelationship() {
        const newRelationship = relationshipTemplate.content.cloneNode(true);
        relationshipContainer.appendChild(newRelationship);
        
        // Add event listener to the remove button
        const removeBtn = relationshipContainer.querySelector('.relationship-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            this.closest('.relationship-entry').remove();
            markAsChanged();
        });
        
        // Add event listener to input for auto saving
        const descInput = relationshipContainer.querySelector('.relationship-entry:last-child .relationship-description');
        descInput.addEventListener('input', function() {
            markAsChanged();
        });
        
        markAsChanged();
    }
    
    function addPronoun() {
        const newPronoun = pronounTemplate.content.cloneNode(true);
        pronounContainer.appendChild(newPronoun);
        
        // Populate selects with character names
        const fromSelect = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-from');
        const toSelect = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-to');
        const valueInput = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-value');
        const selfValueInput = pronounContainer.querySelector('.pronoun-entry:last-child .self-pronoun-value');
        
        populateCharacterSelect(fromSelect);
        populateCharacterSelect(toSelect);
        
        // Add event listeners for selects to prevent duplicates
        fromSelect.addEventListener('change', function() {
            updateAvailableToCharacters(this.closest('.pronoun-entry'));
            markAsChanged();
        });
        
        toSelect.addEventListener('change', function() {
            // Check if this is a valid combination
            const fromValue = this.closest('.pronoun-entry').querySelector('.pronoun-from').value;
            const toValue = this.value;
            
            if (fromValue === toValue) {
                alert('Kh√¥ng th·ªÉ thi·∫øt l·∫≠p x∆∞ng h√¥ v·ªõi ch√≠nh m√¨nh!');
                this.selectedIndex = 0;
                return;
            }
            
            const pairKey = `${fromValue}-${toValue}`;
            if (existingPronounPairs.has(pairKey) && !this.dataset.originalPair) {
                alert('X∆∞ng h√¥ gi·ªØa hai nh√¢n v·∫≠t n√†y ƒë√£ t·ªìn t·∫°i!');
                this.selectedIndex = 0;
                return;
            }
            
            markAsChanged();
        });
        
        // Add event listeners for input fields to auto save
        valueInput.addEventListener('input', function() {
            markAsChanged();
        });
        selfValueInput.addEventListener('input', function() {
            markAsChanged();
        });
        
        // Add event listener to the remove button
        const removeBtn = pronounContainer.querySelector('.pronoun-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            const entry = this.closest('.pronoun-entry');
            const fromValue = entry.querySelector('.pronoun-from').value;
            const toValue = entry.querySelector('.pronoun-to').value;
            
            // Remove from existing pairs
            existingPronounPairs.delete(`${fromValue}-${toValue}`);
            
            entry.remove();
            updatePronounPairs();
            markAsChanged();
        });
        
        // Trigger initial validation
        updateAvailableToCharacters(pronounContainer.querySelector('.pronoun-entry:last-child'));
        
        // Save after adding
        markAsChanged();
    }
    
    function updateAvailableToCharacters(entryElement) {
        const fromSelect = entryElement.querySelector('.pronoun-from');
        const toSelect = entryElement.querySelector('.pronoun-to');
        const selectedFrom = fromSelect.value;
        
        // Store current selection
        const currentTo = toSelect.value;
        
        // Clear existing options
        toSelect.innerHTML = '';
        
        // Add options excluding the selected "from" character
        characters.forEach(character => {
            // Skip if it's the same character
            if (character === selectedFrom) return;
            
            // Skip if this pair already exists elsewhere
            const pairKey = `${selectedFrom}-${character}`;
            if (existingPronounPairs.has(pairKey) && 
                (!toSelect.dataset.originalPair || 
                 toSelect.dataset.originalPair !== pairKey)) {
                return;
            }
            
            const option = document.createElement('option');
            option.value = character;
            option.textContent = character;
            toSelect.appendChild(option);
        });
        
        // Add empty option at the beginning
        const emptyOption = document.createElement('option');
        emptyOption.value = '';
        emptyOption.textContent = '-- Ch·ªçn nh√¢n v·∫≠t --';
        toSelect.insertBefore(emptyOption, toSelect.firstChild);
        
        // Restore selection if still available
        if (currentTo && Array.from(toSelect.options).some(opt => opt.value === currentTo)) {
            toSelect.value = currentTo;
        } else {
            toSelect.selectedIndex = 0;
        }
    }
    
    function updateCharactersList() {
        characters = [];
        document.querySelectorAll('.character-name').forEach(input => {
            if (input.value.trim() !== '') {
                characters.push(input.value.trim());
            }
        });
        
        console.log("Character list updated:", characters);
        
        // Update all pronoun selects
        document.querySelectorAll('.pronoun-from').forEach(select => {
            const currentValue = select.value;
            const entryElement = select.closest('.pronoun-entry');
            
            populateCharacterSelect(select);
            select.value = currentValue;
            
            // Update "to" selects based on new character list
            updateAvailableToCharacters(entryElement);
        });
        
        // Update character selects in the table
        updateTableCharacterSelects();
        
        updatePronounPairs();
        markAsChanged();
    }
    
    function updatePronounPairs() {
        // Clear and rebuild existing pairs
        existingPronounPairs.clear();
        
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const fromValue = entry.querySelector('.pronoun-from').value;
            const toValue = entry.querySelector('.pronoun-to').value;
            
            if (fromValue && toValue) {
                const pairKey = `${fromValue}-${toValue}`;
                existingPronounPairs.add(pairKey);
                
                // Store original pair for this entry
                entry.querySelector('.pronoun-to').dataset.originalPair = pairKey;
            }
        });
    }
    
    function populateCharacterSelect(select) {
        const currentValue = select.value;
        select.innerHTML = '';
        
        characters.forEach(character => {
            const option = document.createElement('option');
            option.value = character;
            option.textContent = character;
            select.appendChild(option);
        });
        
        // Add empty option at the beginning
        const emptyOption = document.createElement('option');
        emptyOption.value = '';
        emptyOption.textContent = '-- Ch·ªçn nh√¢n v·∫≠t --';
        select.insertBefore(emptyOption, select.firstChild);
        
        // Restore previous selection if possible
        if (currentValue && Array.from(select.options).some(opt => opt.value === currentValue)) {
            select.value = currentValue;
        } else {
            select.selectedIndex = 0;
        }
    }
    
    async function translateText() {
        const originalText = getOriginalText();
        if (!originalText.trim()) {
            displayErrorMessage('Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ d·ªãch.');
            return;
        }

        // Hi·ªÉn th·ªã ti·∫øn tr√¨nh
        const progressElement = document.createElement('div');
        progressElement.className = 'translation-progress';
        progressElement.innerHTML = `
            <div class="progress-step step-active">B∆∞·ªõc 1: D·ªãch ban ƒë·∫ßu</div>
            <div class="progress-step">B∆∞·ªõc 2: Trau chu·ªët b·∫£n d·ªãch</div>
        `;
        translationResult.innerHTML = '';
        translationResult.appendChild(progressElement);

        const apiKey = document.getElementById('api-key').value.trim();
        if (!apiKey) {
            displayErrorMessage('Vui l√≤ng nh·∫≠p API key.');
            return;
        }

        // Thi·∫øt l·∫≠p model Gemini
        const model = "gemini-2.0-flash-thinking-exp-01-21"; // S·ª≠ d·ª•ng model Gemini
        const prompt = buildTranslationPrompt();
        
        // Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng t·ª´ d·ªØ li·ªáu nh·∫≠p v√†o
        const promptInfo = extractPromptInfo();
        
        isLoading = true;
        updateButtonState();

        // B∆∞·ªõc 1: D·ªãch ban ƒë·∫ßu
        callChatGPT(apiKey, model, prompt)
            .then(response => {
                if (progressElement.parentNode === translationResult) {
                    progressElement.children[0].classList.remove('step-active');
                    progressElement.children[0].classList.add('step-completed');
                    progressElement.children[1].classList.add('step-active');
                }
                
                // S·ª≠ d·ª•ng h√†m stripMarkdownOnly ƒë·ªÉ gi·ªØ th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
                const initialTranslation = stripMarkdownOnly(response);
                
                // Thay th·∫ø "c√¢u c·∫ßn d·ªãch" th√†nh "c√¢u c·∫ßn trau chu·ªët" trong b·∫£n trau chu·ªët 
                const formattedInitialTranslation = initialTranslation.replace(/c√¢u c·∫ßn d·ªãch:/gi, "c√¢u c·∫ßn trau chu·ªët:");
                
                // B∆∞·ªõc 2: Trau chu·ªët b·∫£n d·ªãch
                const refinementPrompt = buildRefinementPrompt(formattedInitialTranslation, promptInfo);
                
                return callChatGPT(apiKey, model, refinementPrompt);
            })
            .then(refinedTranslation => {
                // Lo·∫°i b·ªè m·ªçi ƒë·ªãnh d·∫°ng Markdown v√† th√¥ng tin nh√¢n v·∫≠t, bi·ªÉu hi·ªán ·ªü k·∫øt qu·∫£ cu·ªëi c√πng
                const finalTranslation = stripMarkdown(refinedTranslation);
                
                translationResult.innerHTML = '';
                translationResult.appendChild(document.createTextNode(finalTranslation));
                
                // Hi·ªÉn th·ªã n√∫t trau chu·ªët l·∫ßn n·ªØa khi c√≥ k·∫øt qu·∫£ d·ªãch
                document.getElementById('refine-again-controls').style.display = 'flex';
                
                isLoading = false;
                updateButtonState();
            })
            .catch(error => {
                displayErrorMessage('L·ªói d·ªãch vƒÉn b·∫£n: ' + error.message);
                isLoading = false;
                updateButtonState();
            });
    }
    
    // H√†m tr√≠ch xu·∫•t th√¥ng tin t·ª´ prompt ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i trong b∆∞·ªõc trau chu·ªët
    function extractPromptInfo() {
        // Thu th·∫≠p th√¥ng tin v·ªÅ x∆∞ng h√¥
        const pronounInfo = [];
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const from = entry.querySelector('.pronoun-from').value;
            const to = entry.querySelector('.pronoun-to').value;
            const value = entry.querySelector('.pronoun-value').value;
            const selfValue = entry.querySelector('.self-pronoun-value').value;
            
            if (from && to && value) {
                pronounInfo.push({
                    from: from,
                    to: to,
                    value: value,
                    selfValue: selfValue
                });
            }
        });
        
        // Thu th·∫≠p th√¥ng tin v·ªÅ c√°c d√≤ng "gi·ªØ nguy√™n"
        const keepOriginalLines = [];
        document.querySelectorAll('#text-table-body tr').forEach((row, index) => {
            const expressionSelect = row.querySelector('.expression-select');
            const textCell = row.querySelector('td:nth-child(4)');
            
            const expression = expressionSelect.value;
            const text = textCell.getAttribute('data-original-text');
            
            if (expression === 'Gi·ªØ nguy√™n') {
                keepOriginalLines.push({
                    index: index + 1,
                    text: text
                });
            }
        });
        
        // Thu th·∫≠p th√¥ng tin v·ªÅ m·ªëi quan h·ªá nh√¢n v·∫≠t
        const relationships = [];
        document.querySelectorAll('.relationship-description').forEach(input => {
            if (input.value.trim() !== '') {
                relationships.push(input.value.trim());
            }
        });
        
        return {
            pronouns: pronounInfo,
            keepOriginalLines: keepOriginalLines,
            relationships: relationships,
            genre: genreInput.value.trim(),
            style: styleInput.value.trim()
        };
    }
    
    // H√†m t·∫°o prompt cho vi·ªác trau chu·ªët b·∫£n d·ªãch
    function buildRefinementPrompt(firstTranslation, promptInfo) {
        let prompt = "D∆∞·ªõi ƒë√¢y l√† b·∫£n d·ªãch c·ªßa m·ªôt vƒÉn b·∫£n. H√£y trau chu·ªët l·∫°i b·∫£n d·ªãch n√†y ƒë·ªÉ c√≥ vƒÉn phong ·ªïn h∆°n, hay h∆°n, m∆∞·ª£t nh∆∞ ƒë·ªëi tho·∫°i ngo√†i ƒë·ªùi, nh∆∞ng kh√¥ng ƒë∆∞·ª£c th√™m b·ªõt, ph·∫£i ƒë√∫ng √Ω nghƒ©a c√¢u vƒÉn v√† PH·∫¢I GI·ªÆ NGUY√äN X∆ØNG H√î theo y√™u c·∫ßu. L∆ØU √ù: VI·ªÜC GI·ªÆ NGUY√äN X∆ØNG H√î L√Ä QUAN TR·ªåNG NH·∫§T, KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI D∆Ø·ªöI B·∫§T K·ª≤ H√åNH TH·ª®C N√ÄO.\n\n";
        
        prompt += "X∆Øng H√î GI·ªÆA C√ÅC NH√ÇN V·∫¨T (PH·∫¢I TU√ÇN THEO NGHI√äM NG·∫∂T - ƒê√ÇY L√Ä Y√äU C·∫¶U QUAN TR·ªåNG NH·∫§T):\n";
        promptInfo.pronouns.forEach(item => {
            prompt += `- ${item.from}: g·ªçi ${item.to} l√† "${item.value}"`;
            if (item.selfValue) {
                prompt += `, x∆∞ng b·∫£n th√¢n l√† "${item.selfValue}"`;
            }
            prompt += '\n';
        });
        
        if (promptInfo.relationships.length > 0) {
            prompt += "\nM·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC NH√ÇN V·∫¨T:\n";
            promptInfo.relationships.forEach(rel => {
                prompt += `- ${rel}\n`;
            });
        }
        
        prompt += "\nY√äU C·∫¶U B·∫ÆT BU·ªòC PH·∫¢I TU√ÇN TH·ª¶:\n";
        prompt += "- Trau chu·ªët vƒÉn phong ƒë·ªÉ ·ªïn h∆°n\n";
        prompt += "- PH·∫¢I GI·ªÆ NGUY√äN T·∫§T C·∫¢ X∆ØNG H√î gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n - ƒê√ÇY L√Ä Y√äU C·∫¶U QUAN TR·ªåNG NH·∫§T\n";
        prompt += "- Gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "- Kh√¥ng s·ª≠ d·ª•ng Markdown, tr·∫£ v·ªÅ vƒÉn b·∫£n thu·∫ßn t√∫y\n";
        prompt += "- Kh√¥ng th√™m b·∫•t k·ª≥ th√¥ng tin m·ªõi n√†o\n";
        prompt += "- V√î C√ôNG QUAN TR·ªåNG: PH·∫¢I GI·ªÆ NGUY√äN ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' ·ªü m·ªói d√≤ng trong QU√Å TR√åNH trau chu·ªët, nh∆∞ng KH√îNG ƒë∆∞a th√¥ng tin n√†y v√†o k·∫øt qu·∫£ cu·ªëi c√πng\n";
        
        // Th√™m vƒÉn phong n·∫øu c√≥
        if (promptInfo.style) {
            prompt += `- √Åp d·ª•ng vƒÉn phong: ${promptInfo.style}\n`;
        }
        
        // Th√™m th·ªÉ lo·∫°i n·∫øu c√≥
        if (promptInfo.genre) {
            prompt += `- Ph√π h·ª£p v·ªõi th·ªÉ lo·∫°i: ${promptInfo.genre}\n`;
        }
        
        // Th√™m th√¥ng tin v·ªÅ c√°c d√≤ng c·∫ßn gi·ªØ nguy√™n
        if (promptInfo.keepOriginalLines.length > 0) {
            prompt += "\nC√ÅC D√íNG VƒÇN B·∫¢N C·∫¶N GI·ªÆ NGUY√äN (KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI):\n";
            promptInfo.keepOriginalLines.forEach(line => {
                prompt += `D√≤ng ${line.index}: ${line.text}\n`;
            });
            prompt += "Nh·ªØng d√≤ng tr√™n PH·∫¢I ƒë∆∞·ª£c gi·ªØ nguy√™n trong b·∫£n d·ªãch cu·ªëi c√πng, KH√îNG ƒê∆Ø·ª¢C D·ªäCH c√°c d√≤ng n√†y.\n";
        }
        
        prompt += "\nB·∫¢N D·ªäCH C·∫¶N TRAU CHU·ªêT:\n\n";
        prompt += firstTranslation;
        
        prompt += "\n\nC√ÅCH TR·∫¢ L·ªúI Y√äU C·∫¶U: Sau khi trau chu·ªët, h√£y ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ trau chu·ªët THEO ƒê√öNG ƒê·ªäNH D·∫†NG CHU·∫®N SAU:\n";
        prompt += "1. M·ªói d√≤ng ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z'\n";
        prompt += "2. TUY·ªÜT ƒê·ªêI KH√îNG th√™m m√¥ t·∫£, gi·∫£i th√≠ch ho·∫∑c b·∫•t k·ª≥ ph·∫ßn gi·ªõi thi·ªáu/k·∫øt lu·∫≠n n√†o\n";
        prompt += "3. Kh√¥ng th√™m b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng Markdown n√†o\n";
        prompt += "4. Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng vƒÉn b·∫£n thu·∫ßn (plain text)\n\n";
        
        prompt += "NH·∫ÆC L·∫†I C√ÅC QUY T·∫ÆC TRAU CHU·ªêT (ƒê·ªåC K·ª∏ V√Ä TU√ÇN TH·ª¶):\n";
        prompt += "1. PH·∫¢I gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "2. PH·∫¢I s·ª≠ d·ª•ng CH√çNH X√ÅC x∆∞ng h√¥ gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n - ƒê√ÇY L√Ä QUAN TR·ªåNG NH·∫§T\n";
        prompt += "3. PH·∫¢I gi·ªØ nguy√™n nh·ªØng d√≤ng ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh l√† 'gi·ªØ nguy√™n'\n";
        prompt += "4. PH·∫¢I gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' ·ªü m·ªói d√≤ng trong k·∫øt qu·∫£ trau chu·ªët\n";
        prompt += "5. KH√îNG ƒë∆∞·ª£c th√™m ph·∫ßn gi·ªõi thi·ªáu ho·∫∑c k·∫øt lu·∫≠n n√†o v√†o k·∫øt qu·∫£";
        
        return prompt;
    }
    
    // H√†m ch·ªâ b·ªè ƒë·ªãnh d·∫°ng Markdown, gi·ªØ nguy√™n th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
    function stripMarkdownOnly(text) {
        if (!text) return '';
        
        // Ch·ªâ b·ªè c√°c d·∫•u hi·ªáu ƒë·ªãnh d·∫°ng ph·ªï bi·∫øn c·ªßa Markdown
        text = text
            // B·ªè c√°c ti√™u ƒë·ªÅ
            .replace(/^#+\s+/gm, '')
            // B·ªè ƒë·ªãnh d·∫°ng in ƒë·∫≠m
            .replace(/\*\*(.*?)\*\*/g, '$1')
            .replace(/__(.*?)__/g, '$1')
            // B·ªè ƒë·ªãnh d·∫°ng in nghi√™ng
            .replace(/\*(.*?)\*/g, '$1')
            .replace(/_(.*?)_/g, '$1')
            // B·ªè ƒë·ªãnh d·∫°ng blockquote
            .replace(/^>\s+/gm, '')
            // B·ªè ƒë·ªãnh d·∫°ng danh s√°ch
            .replace(/^[\*\-+]\s+/gm, '')
            .replace(/^\d+\.\s+/gm, '')
            // B·ªè backticks cho code
            .replace(/`([^`]+)`/g, '$1')
            .replace(/```[\s\S]*?```/g, '')
            // B·ªè ƒë∆∞·ªùng k·∫ª ngang
            .replace(/^[\-=_]{3,}\s*$/gm, '')
            // B·ªè li√™n k·∫øt
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1')
            // B·ªè h√¨nh ·∫£nh
            .replace(/!\[([^\]]+)\]\(([^)]+)\)/g, '');
            
        return text;
    }
    
    // H√†m b·ªè ƒë·ªãnh d·∫°ng Markdown v√† th√¥ng tin nh√¢n v·∫≠t/bi·ªÉu hi·ªán trong vƒÉn b·∫£n
    function stripMarkdown(text) {
        if (!text) return '';
        
        // Lo·∫°i b·ªè c√°c ph·∫ßn th√¥ng tin v·ªÅ nh√¢n v·∫≠t, bi·ªÉu hi·ªán v√† c√¢u c·∫ßn trau chu·ªët
        text = text
            // Lo·∫°i b·ªè c·∫£ d√≤ng n·∫øu n√≥ b·∫Øt ƒë·∫ßu v·ªõi "Nh√¢n v·∫≠t:" v√† k·∫øt th√∫c v·ªõi "c√¢u c·∫ßn trau chu·ªët:"
            .replace(/Nh√¢n v·∫≠t:.*?Bi·ªÉu hi·ªán\/d·∫°ng tho·∫°i:.*?c√¢u c·∫ßn trau chu·ªët:[\s]*/gi, '')
            // Lo·∫°i b·ªè t·ª´ng ph·∫ßn ri√™ng l·∫ª ƒë·ªÉ ƒë·∫£m b·∫£o x·ª≠ l√Ω tri·ªát ƒë·ªÉ
            .replace(/Nh√¢n v·∫≠t:[\s\S]*?(,\s+|,)/gi, '')
            .replace(/Bi·ªÉu hi·ªán\/d·∫°ng tho·∫°i:[\s\S]*?(,\s+|,)/gi, '')
            .replace(/[cC]√¢u c·∫ßn (d·ªãch|trau chu·ªët):[\s]*/gi, '');
        
        // B·ªè c√°c d·∫•u hi·ªáu ƒë·ªãnh d·∫°ng ph·ªï bi·∫øn c·ªßa Markdown
        text = text
            // B·ªè c√°c ti√™u ƒë·ªÅ
            .replace(/^#+\s+/gm, '')
            // B·ªè ƒë·ªãnh d·∫°ng in ƒë·∫≠m
            .replace(/\*\*(.*?)\*\*/g, '$1')
            .replace(/__(.*?)__/g, '$1')
            // B·ªè ƒë·ªãnh d·∫°ng in nghi√™ng
            .replace(/\*(.*?)\*/g, '$1')
            .replace(/_(.*?)_/g, '$1')
            // B·ªè ƒë·ªãnh d·∫°ng blockquote
            .replace(/^>\s+/gm, '')
            // B·ªè ƒë·ªãnh d·∫°ng danh s√°ch
            .replace(/^[\*\-+]\s+/gm, '')
            .replace(/^\d+\.\s+/gm, '')
            // B·ªè backticks cho code
            .replace(/`([^`]+)`/g, '$1')
            .replace(/```[\s\S]*?```/g, '')
            // B·ªè ƒë∆∞·ªùng k·∫ª ngang
            .replace(/^[\-=_]{3,}\s*$/gm, '')
            // B·ªè li√™n k·∫øt
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1')
            // B·ªè h√¨nh ·∫£nh
            .replace(/!\[([^\]]+)\]\(([^)]+)\)/g, '');
            
        // Lo·∫°i b·ªè d√≤ng tr·ªëng d∆∞ th·ª´a
        text = text
            .replace(/\n{3,}/g, '\n\n') // Thay th·∫ø 3+ d√≤ng tr·ªëng th√†nh 2 d√≤ng
            .trim();
            
        return text;
    }
    
    function buildTranslationPrompt() {
        let prompt = "B·∫°n l√† m·ªôt d·ªãch gi·∫£ chuy√™n nghi·ªáp, ƒë√£ c√≥ h∆°n 20 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c d·ªãch truy·ªán, gi·ªù h√£y d·ªãch ch∆∞∆°ng truy·ªán sau sang ti·∫øng vi·ªát. L∆ØU √ù QUAN TR·ªåNG: B·∫Øt bu·ªôc PH·∫¢I gi·ªØ nguy√™n t·∫•t c·∫£ x∆∞ng h√¥, tu√¢n th·ªß c√°c y√™u c·∫ßu v√† vƒÉn phong v√† c√°c l∆∞u √Ω quan tr·ªçng.\n\n";
        
        // Add character pronouns
        prompt += "X∆Øng H√î GI·ªÆA C√ÅC NH√ÇN V·∫¨T (ph·∫£i tu√¢n theo nghi√™m ng·∫∑t):\n";
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const from = entry.querySelector('.pronoun-from').value;
            const to = entry.querySelector('.pronoun-to').value;
            const value = entry.querySelector('.pronoun-value').value;
            const selfValue = entry.querySelector('.self-pronoun-value').value;
            
            if (from && to && value) {
                prompt += `- ${from}: g·ªçi ${to} l√† "${value}"`;
                
                if (selfValue) {
                    prompt += `, x∆∞ng b·∫£n th√¢n l√† "${selfValue}"`;
                }
                
                prompt += '\n';
            }
        });
        
        // Add th·ªÉ lo·∫°i if provided
        if (genreInput.value.trim()) {
            prompt += `\nTh·ªÉ lo·∫°i: ${genreInput.value.trim()}\n`;
        }
        
        // Add vƒÉn phong if provided
        if (styleInput.value.trim()) {
            prompt += `\nVƒÉn phong: ${styleInput.value.trim()}\n`;
        }
        
        // Add relationships
        prompt += "\nM·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC NH√ÇN V·∫¨T:\n";
        document.querySelectorAll('.relationship-description').forEach(input => {
            if (input.value.trim() !== '') {
                prompt += `- ${input.value.trim()}\n`;
            }
        });
        
        // Add context
        if (contextInput.value.trim() !== '') {
            prompt += "\nB·ªêI C·∫¢NH:\n" + contextInput.value.trim() + "\n";
        }
        
        // Add translation instructions
        prompt += "\nY√äU C·∫¶U B·∫ÆT BU·ªòC PH·∫¢I TU√ÇN TH·ª¶:\n";
        prompt += "- " + requirementsInput.value.trim() + "\n";
        prompt += "- PH·∫¢I D·ªäCH CH√çNH X√ÅC, D·ªäCH TR√îI CH·∫¢Y, T·ª∞ NHI√äN, TR√ÅNH L·ªñI L·∫∂P T·ª™ HO√ÄN TO√ÄN, bao g·ªìm:\n";
        prompt += "* Ki·ªÉm tra k·ªπ t·ª´ng c√¢u ƒë·ªÉ tr√°nh s·ª≠ d·ª•ng t·ª´ ho·∫∑c c·ª•m t·ª´ gi·ªëng nhau l·∫∑p l·∫°i kh√¥ng c·∫ßn thi·∫øt.\n";
        prompt += "* S·ª≠ d·ª•ng t·ª´ ƒë·ªìng nghƒ©a h·ª£p l√Ω ƒë·ªÉ tr√°nh tr√πng l·∫∑p trong nh·ªØng d√≤ng g·∫ßn nhau.\n";
        prompt += "* D√πng ƒëa d·∫°ng c·∫•u tr√∫c c√¢u ƒë·ªÉ tr√°nh l·∫∑p v·ªÅ m·∫∑t ng·ªØ ph√°p.\n";
        prompt += "* Kh√¥ng ƒë∆∞·ª£c L·∫∑p t·ª´ gi·ªØa hai c√¢u g·∫ßn nhau.\n";
        prompt += "* Kh√¥ng ƒë∆∞·ª£c L·∫∑p t·ª´ trong c√πng m·ªôt c√¢u.\n";
        prompt += "- D·ªãch ch√≠nh x√°c, gi·ªØ nguy√™n t·∫•t c·∫£ x∆∞ng h√¥ c·ªßa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n\n";
        prompt += "- Gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n nh∆∞ vƒÉn b·∫£n g·ªëc\n";
        prompt += "- Kh√¥ng s·ª≠ d·ª•ng Markdown, tr·∫£ v·ªÅ vƒÉn b·∫£n thu·∫ßn t√∫y\n";
        prompt += "- Ph·∫£i ƒë√∫ng ch√≠nh t·∫£, kh√¥ng ƒë∆∞·ª£c nh·∫ßm sang ng√¥n ng·ªØ kh√°c\n";
        prompt += "- N·∫øu m·ªôt d√≤ng c√≥ Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i l√† \"gi·ªØ nguy√™n\", KH√îNG D·ªäCH d√≤ng ƒë√≥, gi·ªØ nguy√™n vƒÉn b·∫£n g·ªëc\n";
        prompt += "- V√î C√ôNG QUAN TR·ªåNG: PH·∫¢I GI·ªÆ NGUY√äN c√°c ph·∫ßn 'Nh√¢n v·∫≠t:' v√† 'Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i:' trong k·∫øt qu·∫£ d·ªãch CH√çNH X√ÅC nh∆∞ ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o: 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn d·ªãch: Z'\n";
        
        prompt += "\nX·ª¨ L√ù L·ªñI L·∫∂P T·ª™ HO√ÄN TO√ÄN NH∆Ø SAU:\n\n";
        prompt += `1. N·∫øu hai c√¢u g·∫ßn nhau b·ªã l·∫∑p t·ª´ (v√≠ d·ª• "√¥ng ta"):\nThay th·∫ø t·ª´ b·ªã l·∫∑p b·∫±ng ƒë·∫°i t·ª´ ph√π h·ª£p ho·∫∑c mi√™u t·∫£ gi√°n ti·∫øp\nV√≠ d·ª•:\nSai (l·∫∑p t·ª´):\n√îng ta ƒëang l·∫£m nh·∫£m ƒëi·ªÅu g√¨ v·∫≠y?\n√îng ta ƒëi√™n r·ªìi...\n\nƒê√∫ng (lo·∫°i b·ªè l·∫∑p t·ª´):\n\n√îng ta ƒëang l·∫£m nh·∫£m ƒëi·ªÅu g√¨ v·∫≠y?\nƒê√∫ng l√† ƒëi√™n r·ªìi...\n`;
        prompt += `\n2. N·∫øu m·ªôt c√¢u l·∫∑p m·ªôt t·ª´ qu√° nhi·ªÅu l·∫ßn (v√≠ d·ª• "t√¥i"):\nBi·∫øn ƒë·ªïi c·∫•u tr√∫c c√¢u ho·∫∑c thay th·∫ø t·ª´ b·∫±ng c√°ch r√∫t g·ªçn h·ª£p l√Ω\nV√≠ d·ª•:\nSai (l·∫∑p t·ª´ qu√° nhi·ªÅu):\nT√¥i kh√¥ng mu·ªën gia ƒë√¨nh ph√°t hi·ªán ra vi·ªác t√¥i ƒëang t√¨m ki·∫øm Haru... √Ω t√¥i l√†... Nagi.\n\nƒê√∫ng (lo·∫°i b·ªè l·∫∑p t·ª´):\n\nT√¥i kh√¥ng mu·ªën gia ƒë√¨nh bi·∫øt chuy·ªán m√¨nh ƒëang t√¨m ki·∫øm Haru... √Ω l√†... Nagi.\n`;

        // Add text lines with character and expression information
        prompt += "\nVƒÇN B·∫¢N C·∫¶N D·ªäCH:\n\n";
        
        // Get all rows from the table
        const rows = document.querySelectorAll('#text-table-body tr');
        
        if (rows.length > 0) {
            rows.forEach((row, index) => {
                const characterSelect = row.querySelector('.character-select');
                const expressionSelect = row.querySelector('.expression-select');
                const textCell = row.querySelector('td:nth-child(4)');
                
                const character = characterSelect.value !== 'none' ? characterSelect.value : '';
                const expression = expressionSelect.value !== 'none' ? expressionSelect.value : '';
                const text = textCell.getAttribute('data-original-text');
                
                // ƒê·ªãnh d·∫°ng c√¢u theo y√™u c·∫ßu
                let line = '';
                
                // Th√™m th√¥ng tin nh√¢n v·∫≠t n·∫øu c√≥
                if (character) {
                    line += `Nh√¢n v·∫≠t: ${character}, `;
                }
                
                // Th√™m th√¥ng tin bi·ªÉu hi·ªán n·∫øu c√≥
                if (expression) {
                    line += `Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: ${expression}, `;
                }
                
                // Th√™m c√¢u c·∫ßn d·ªãch
                line += `c√¢u c·∫ßn d·ªãch: ${text}`;
                
                prompt += line + '\n';
            });
        } else {
            // Fallback to source text if no table rows
            prompt += sourceTextInput.value.trim();
        }
        
        // Final reminder about pronouns and formatting
        prompt += "\n\nNH·∫ÆC L·∫†I C√ÅC Y√äU C·∫¶U QUAN TR·ªåNG (PH·∫¢I TU√ÇN TH·ª¶):\n";
        prompt += "1. PH·∫¢I gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "2. B·∫ÆT BU·ªòC PH·∫¢I s·ª≠ d·ª•ng ch√≠nh x√°c x∆∞ng h√¥ gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n. Tuy·ªát ƒë·ªëi kh√¥ng thay ƒë·ªïi.\n";
        prompt += "3. B·∫ÆT BU·ªòC PH·∫¢I gi·ªØ nguy√™n nh·ªØng d√≤ng c√≥ Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i l√† \"gi·ªØ nguy√™n\"\n";
        prompt += "4. PH·∫¢I GI·ªÆ NGUY√äN ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn d·ªãch: Z' ·ªü m·ªói d√≤ng trong k·∫øt qu·∫£ d·ªãch\n";
        prompt += "5. D·ªãch th·∫≠t ch√≠nh x√°c, m∆∞·ª£t m√†, ƒë√∫ng vƒÉn phong ·ªü ph·∫ßn Y√™u c·∫ßu, ƒë√∫ng c·∫£m x√∫c, tr√°nh l·ªói l·∫∑p t·ª´\n";
        
        console.log(prompt);
        return prompt;
    }
    
    // C√°c h√†m li√™n quan ƒë·∫øn l∆∞u v√† t·∫£i c√†i ƒë·∫∑t
    function saveSettings() {
        try {
            // Thu th·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu
            const settingsData = collectAllData();
            
            // L∆∞u v√†o localStorage
            localStorage.setItem('dich-ai-settings', JSON.stringify(settingsData));
            
            console.log("ƒê√£ l∆∞u c√†i ƒë·∫∑t v√†o localStorage");
            showToast("ƒê√£ l∆∞u c√†i ƒë·∫∑t th√†nh c√¥ng!", 'success');
            
            // Reset tr·∫°ng th√°i thay ƒë·ªïi
            hasUnsavedChanges = false;
        } catch (error) {
            console.error("L·ªói khi l∆∞u c√†i ƒë·∫∑t:", error);
            showToast("C√≥ l·ªói khi l∆∞u c√†i ƒë·∫∑t: " + error.message, 'error');
        }
    }
    
    function loadSettings() {
        try {
            // ƒê·ªçc t·ª´ localStorage
            const savedSettings = localStorage.getItem('dich-ai-settings');
            
            if (!savedSettings) {
                alert("Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t ƒë√£ l∆∞u!");
                return;
            }
            
            // Parse d·ªØ li·ªáu JSON
            const jsonData = JSON.parse(savedSettings);
            
            // T·∫£i d·ªØ li·ªáu
            loadDataFromJson(jsonData);
            console.log("ƒê√£ t·∫£i c√†i ƒë·∫∑t t·ª´ localStorage");
            showToast("ƒê√£ t·∫£i c√†i ƒë·∫∑t th√†nh c√¥ng!", 'success');
        } catch (error) {
            console.error("L·ªói khi t·∫£i c√†i ƒë·∫∑t:", error);
            showToast("C√≥ l·ªói khi t·∫£i c√†i ƒë·∫∑t: " + error.message, 'error');
        }
    }
    
    function exportToJson() {
        try {
            // Thu th·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu
            const settingsData = collectAllData();
            
            // Chuy·ªÉn ƒë·ªïi th√†nh chu·ªói JSON
            const jsonString = JSON.stringify(settingsData, null, 2);
            
            // T·∫°o Blob t·ª´ chu·ªói JSON
            const blob = new Blob([jsonString], { type: 'application/json' });
            
            // T·∫°o URL cho Blob
            const url = URL.createObjectURL(blob);
            
            // T·∫°o ph·∫ßn t·ª≠ a ƒë·ªÉ t·∫£i xu·ªëng
            const a = document.createElement('a');
            a.href = url;
            a.download = 'dich-ai-settings.json';
            document.body.appendChild(a);
            a.click();
            
            // D·ªçn d·∫πp
            setTimeout(function() {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 0);
            
            console.log("ƒê√£ t·∫£i file c√†i ƒë·∫∑t th√†nh c√¥ng");
        } catch (error) {
            console.error("L·ªói khi t·∫£i file c√†i ƒë·∫∑t:", error);
            showToast("C√≥ l·ªói khi t·∫£i file c√†i ƒë·∫∑t: " + error.message, 'error');
        }
    }
    
    // Ch·ª©c nƒÉng nh·∫≠p d·ªØ li·ªáu t·ª´ file c√†i ƒë·∫∑t
    function importFromJson(event) {
        try {
            const file = event.target.files[0];
            if (!file) {
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const jsonData = JSON.parse(e.target.result);
                    loadDataFromJson(jsonData);
                    console.log("ƒê√£ nh·∫≠p c√†i ƒë·∫∑t t·ª´ file th√†nh c√¥ng");
                    showToast("ƒê√£ nh·∫≠p c√†i ƒë·∫∑t t·ª´ file th√†nh c√¥ng!", 'success');
                } catch (parseError) {
                    console.error("L·ªói khi ph√¢n t√≠ch file c√†i ƒë·∫∑t:", parseError);
                    showToast("File c√†i ƒë·∫∑t kh√¥ng h·ª£p l·ªá: " + parseError.message, 'error');
                }
            };
            
            reader.readAsText(file);
            
            // Reset input ƒë·ªÉ c√≥ th·ªÉ ch·ªçn l·∫°i c√πng m·ªôt file
            event.target.value = "";
        } catch (error) {
            console.error("L·ªói khi ƒë·ªçc file c√†i ƒë·∫∑t:", error);
            showToast("C√≥ l·ªói khi ƒë·ªçc file c√†i ƒë·∫∑t: " + error.message, 'error');
        }
    }
    
    // Thu th·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÉ l∆∞u
    function collectAllData() {
        // Thu th·∫≠p danh s√°ch nh√¢n v·∫≠t
        const charactersData = [];
        document.querySelectorAll('.character-entry').forEach(entry => {
            const name = entry.querySelector('.character-name').value.trim();
            if (name) {
                charactersData.push(name);
            }
        });
        
        // Thu th·∫≠p danh s√°ch m·ªëi quan h·ªá
        const relationshipsData = [];
        document.querySelectorAll('.relationship-entry').forEach(entry => {
            const desc = entry.querySelector('.relationship-description').value.trim();
            if (desc) {
                relationshipsData.push(desc);
            }
        });
        
        // Thu th·∫≠p danh s√°ch x∆∞ng h√¥
        const pronounsData = [];
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const from = entry.querySelector('.pronoun-from').value;
            const to = entry.querySelector('.pronoun-to').value;
            const value = entry.querySelector('.pronoun-value').value.trim();
            const selfValue = entry.querySelector('.self-pronoun-value').value.trim();
            
            if (from && to && value) {
                pronounsData.push({
                    from: from,
                    to: to,
                    value: value,
                    selfValue: selfValue
                });
            }
        });
        
        // Thu th·∫≠p danh s√°ch bi·ªÉu hi·ªán/d·∫°ng tho·∫°i
        const expressionsData = [];
        document.querySelectorAll('.expression-entry').forEach(entry => {
            const value = entry.querySelector('.expression-value').value.trim();
            if (value) {
                expressionsData.push(value);
            }
        });
        
        // Thu th·∫≠p d·ªØ li·ªáu t·ª´ b·∫£ng vƒÉn b·∫£n
        const tableData = [];
        document.querySelectorAll('#text-table-body tr').forEach(row => {
            const characterSelect = row.querySelector('.character-select');
            const expressionSelect = row.querySelector('.expression-select');
            const textCell = row.querySelector('td:nth-child(4)');
            
            tableData.push({
                character: characterSelect.value,
                expression: expressionSelect.value,
                text: textCell.getAttribute('data-original-text')
            });
        });
        
        // Thu th·∫≠p c√°c tr∆∞·ªùng kh√°c
        return {
            characters: charactersData,
            relationships: relationshipsData,
            pronouns: pronounsData,
            expressions: expressionsData,
            textTable: tableData,
            genre: document.getElementById('genre').value,
            style: document.getElementById('style').value,
            requirements: document.getElementById('requirements').value,
            context: document.getElementById('context').value,
            sourceText: document.getElementById('source-text').value,
            apiKey: document.getElementById('api-key').value,
            version: "1.1"
        };
    }
    
    // T·∫£i d·ªØ li·ªáu t·ª´ JSON v√†o ·ª©ng d·ª•ng
    function loadDataFromJson(jsonData) {
        try {
            // Ki·ªÉm tra phi√™n b·∫£n ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
            if (!jsonData.version) {
                console.warn("File JSON kh√¥ng c√≥ th√¥ng tin phi√™n b·∫£n");
            }
            
            // T·∫£i danh s√°ch nh√¢n v·∫≠t
            if (jsonData.characters && Array.isArray(jsonData.characters)) {
                // X√≥a nh√¢n v·∫≠t hi·ªán t·∫°i
                characterContainer.innerHTML = '';
                
                // Th√™m nh√¢n v·∫≠t t·ª´ d·ªØ li·ªáu
                jsonData.characters.forEach(name => {
                    const newCharacter = characterTemplate.content.cloneNode(true);
                    characterContainer.appendChild(newCharacter);
                    
                    const nameInput = characterContainer.querySelector('.character-entry:last-child .character-name');
                    nameInput.value = name;
                    
                    const removeBtn = characterContainer.querySelector('.character-entry:last-child .remove-btn');
                    removeBtn.addEventListener('click', function() {
                        this.closest('.character-entry').remove();
                        updateCharactersList();
                        markAsChanged();
                    });
                    
                    nameInput.addEventListener('input', function() {
                        updateCharactersList();
                        markAsChanged();
                    });
                });
                
                // C·∫≠p nh·∫≠t danh s√°ch nh√¢n v·∫≠t
                updateCharactersList();
            }
            
            // T·∫£i danh s√°ch m·ªëi quan h·ªá
            if (jsonData.relationships && Array.isArray(jsonData.relationships)) {
                // X√≥a m·ªëi quan h·ªá hi·ªán t·∫°i
                relationshipContainer.innerHTML = '';
                
                // Th√™m m·ªëi quan h·ªá t·ª´ d·ªØ li·ªáu
                jsonData.relationships.forEach(desc => {
                    const newRelationship = relationshipTemplate.content.cloneNode(true);
                    relationshipContainer.appendChild(newRelationship);
                    
                    const descInput = relationshipContainer.querySelector('.relationship-entry:last-child .relationship-description');
                    descInput.value = desc;
                    
                    const removeBtn = relationshipContainer.querySelector('.relationship-entry:last-child .remove-btn');
                    removeBtn.addEventListener('click', function() {
                        this.closest('.relationship-entry').remove();
                        markAsChanged();
                    });
                    
                    descInput.addEventListener('input', function() {
                        markAsChanged();
                    });
                });
            }
            
            // T·∫£i danh s√°ch x∆∞ng h√¥
            if (jsonData.pronouns && Array.isArray(jsonData.pronouns)) {
                // X√≥a x∆∞ng h√¥ hi·ªán t·∫°i
                pronounContainer.innerHTML = '';
                
                // Th√™m x∆∞ng h√¥ t·ª´ d·ªØ li·ªáu
                jsonData.pronouns.forEach(item => {
                    addPronounWithData(item.from, item.to, item.value, item.selfValue);
                });
            }
            
            // T·∫£i c√°c tr∆∞·ªùng kh√°c
            if (jsonData.genre !== undefined) {
                document.getElementById('genre').value = jsonData.genre;
            }
            
            if (jsonData.style !== undefined) {
                document.getElementById('style').value = jsonData.style;
            }
            
            if (jsonData.requirements !== undefined) {
                document.getElementById('requirements').value = jsonData.requirements;
            }
            
            if (jsonData.context !== undefined) {
                document.getElementById('context').value = jsonData.context;
            }
            
            if (jsonData.sourceText !== undefined) {
                document.getElementById('source-text').value = jsonData.sourceText;
            }
            
            // T·∫£i API key n·∫øu c√≥
            if (jsonData.apiKey !== undefined) {
                document.getElementById('api-key').value = jsonData.apiKey;
            }
            
            // T·∫£i danh s√°ch bi·ªÉu hi·ªán/d·∫°ng tho·∫°i
            if (jsonData.expressions && Array.isArray(jsonData.expressions)) {
                // X√≥a bi·ªÉu hi·ªán hi·ªán t·∫°i
                expressionsContainer.innerHTML = '';
                
                // Th√™m bi·ªÉu hi·ªán t·ª´ d·ªØ li·ªáu
                jsonData.expressions.forEach(value => {
                    const newExpression = expressionTemplate.content.cloneNode(true);
                    expressionsContainer.appendChild(newExpression);
                    
                    const valueInput = expressionsContainer.querySelector('.expression-entry:last-child .expression-value');
                    valueInput.value = value;
                    
                    const removeBtn = expressionsContainer.querySelector('.expression-entry:last-child .remove-btn');
                    removeBtn.addEventListener('click', function() {
                        this.closest('.expression-entry').remove();
                        updateExpressionsData();
                        markAsChanged();
                    });
                    
                    valueInput.addEventListener('input', function() {
                        updateExpressionsData();
                        markAsChanged();
                    });
                });
                
                // C·∫≠p nh·∫≠t danh s√°ch bi·ªÉu hi·ªán
                updateExpressionsData();
            }
            
            // T·∫£i d·ªØ li·ªáu b·∫£ng vƒÉn b·∫£n
            if (jsonData.textTable && Array.isArray(jsonData.textTable)) {
                // T·∫°o vƒÉn b·∫£n t·ª´ c√°c d√≤ng trong b·∫£ng
                const lines = jsonData.textTable.map(item => item.text);
                sourceTextInput.value = lines.join('\n');
                textLines = lines;
                
                // T·∫°o b·∫£ng
                createTextTable(lines);
                
                // Kh√¥i ph·ª•c l·ª±a ch·ªçn nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
                jsonData.textTable.forEach((item, index) => {
                    const row = textTableBody.querySelector(`tr:nth-child(${index + 1})`);
                    if (row) {
                        const characterSelect = row.querySelector('.character-select');
                        const expressionSelect = row.querySelector('.expression-select');
                        
                        // Kh√¥i ph·ª•c l·ª±a ch·ªçn nh√¢n v·∫≠t n·∫øu c√≥
                        if (item.character && item.character !== 'none' && 
                            Array.from(characterSelect.options).some(opt => opt.value === item.character)) {
                            characterSelect.value = item.character;
                        }
                        
                        // Kh√¥i ph·ª•c l·ª±a ch·ªçn bi·ªÉu hi·ªán n·∫øu c√≥
                        if (item.expression && item.expression !== 'none' && 
                            Array.from(expressionSelect.options).some(opt => opt.value === item.expression)) {
                            expressionSelect.value = item.expression;
                        }
                    }
                });
            }
            
            // ƒê√°nh d·∫•u l√† ƒë√£ c√≥ thay ƒë·ªïi
            markAsChanged();
        } catch (error) {
            console.error("L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ JSON:", error);
            throw error;
        }
    }
    
    function addPronounWithData(from, to, value, selfValue) {
        const newPronoun = pronounTemplate.content.cloneNode(true);
        pronounContainer.appendChild(newPronoun);
        
        const fromSelect = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-from');
        const toSelect = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-to');
        const valueInput = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-value');
        const selfValueInput = pronounContainer.querySelector('.pronoun-entry:last-child .self-pronoun-value');
        
        populateCharacterSelect(fromSelect);
        populateCharacterSelect(toSelect);
        
        // ƒê·∫∑t gi√° tr·ªã
        fromSelect.value = from;
        toSelect.value = to;
        valueInput.value = value;
        selfValueInput.value = selfValue;
        
        // L∆∞u c·∫∑p g·ªëc
        const pairKey = `${from}-${to}`;
        toSelect.dataset.originalPair = pairKey;
        existingPronounPairs.add(pairKey);
        
        // Add event listeners
        fromSelect.addEventListener('change', function() {
            // X√≥a c·∫∑p g·ªëc kh·ªèi danh s√°ch hi·ªán c√≥
            const originalPair = toSelect.dataset.originalPair;
            if (originalPair) {
                existingPronounPairs.delete(originalPair);
                delete toSelect.dataset.originalPair;
            }
            
            updateAvailableToCharacters(this.closest('.pronoun-entry'));
            markAsChanged();
        });
        
        toSelect.addEventListener('change', function() {
            // X√≥a c·∫∑p g·ªëc kh·ªèi danh s√°ch hi·ªán c√≥
            const originalPair = this.dataset.originalPair;
            if (originalPair) {
                existingPronounPairs.delete(originalPair);
                delete this.dataset.originalPair;
            }
            
            // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
            const fromValue = this.closest('.pronoun-entry').querySelector('.pronoun-from').value;
            const toValue = this.value;
            
            if (fromValue === toValue) {
                alert('Kh√¥ng th·ªÉ thi·∫øt l·∫≠p x∆∞ng h√¥ v·ªõi ch√≠nh m√¨nh!');
                this.selectedIndex = 0;
                return;
            }
            
            const pairKey = `${fromValue}-${toValue}`;
            if (existingPronounPairs.has(pairKey)) {
                alert('X∆∞ng h√¥ gi·ªØa hai nh√¢n v·∫≠t n√†y ƒë√£ t·ªìn t·∫°i!');
                this.selectedIndex = 0;
                return;
            }
            
            // Th√™m c·∫∑p m·ªõi
            if (fromValue && toValue) {
                existingPronounPairs.add(pairKey);
                this.dataset.originalPair = pairKey;
            }
            
            markAsChanged();
        });
        
        // Value input listeners
        valueInput.addEventListener('change', markAsChanged);
        selfValueInput.addEventListener('change', markAsChanged);
        
        // Remove button
        const removeBtn = pronounContainer.querySelector('.pronoun-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            const entry = this.closest('.pronoun-entry');
            const fromValue = entry.querySelector('.pronoun-from').value;
            const toValue = entry.querySelector('.pronoun-to').value;
            
            // Remove from existing pairs
            existingPronounPairs.delete(`${fromValue}-${toValue}`);
            
            entry.remove();
            updatePronounPairs();
            markAsChanged();
        });
    }
    
    function addExpression() {
        const newExpression = expressionTemplate.content.cloneNode(true);
        expressionsContainer.appendChild(newExpression);
        
        // Add event listener to the remove button
        const removeBtn = expressionsContainer.querySelector('.expression-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            this.closest('.expression-entry').remove();
            updateExpressionsData();
            markAsChanged();
        });
        
        // Add event listener to input for updating expressions list
        const valueInput = expressionsContainer.querySelector('.expression-entry:last-child .expression-value');
        valueInput.addEventListener('input', function() {
            updateExpressionsData();
            markAsChanged();
        });
        
        updateExpressionsData();
        markAsChanged();
    }
    
    function updateExpressionsData() {
        expressions = [];
        document.querySelectorAll('.expression-value').forEach(input => {
            if (input.value.trim() !== '') {
                expressions.push(input.value.trim());
            }
        });
        
        console.log("Expressions list updated:", expressions);
        
        // Update all expression selects in the table
        updateTableExpressionSelects();
    }
    
    function updateTableExpressionSelects() {
        document.querySelectorAll('.text-table select.expression-select').forEach(select => {
            const currentValue = select.value;
            
            // Clear select
            select.innerHTML = '';
            
            // Add default "None" option
            const noneOption = document.createElement('option');
            noneOption.value = 'none';
            noneOption.textContent = 'Kh√¥ng c√≥';
            select.appendChild(noneOption);
            
            // Add options for each expression
            expressions.forEach(expression => {
                const option = document.createElement('option');
                option.value = expression;
                option.textContent = expression;
                select.appendChild(option);
            });
            
            // Restore selection if possible
            if (currentValue && Array.from(select.options).some(opt => opt.value === currentValue)) {
                select.value = currentValue;
            } else {
                select.selectedIndex = 0;
            }
        });
    }
    
    function handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            const content = e.target.result;
            textLines = content.split(/\r?\n/);
            
            // Filter out empty lines
            textLines = textLines.filter(line => line.trim() !== '');
            
            // Update hidden text area with the full content
            sourceTextInput.value = content;
            
            // Create table rows for each line
            createTextTable(textLines);
            
            console.log(`Loaded ${textLines.length} lines of text`);
            markAsChanged();
        };
        
        reader.readAsText(file);
    }
    
    // H√†m t·∫°o d√≤ng m·ªõi cho b·∫£ng vƒÉn b·∫£n, th√™m c√°c n√∫t di chuy·ªÉn l√™n/xu·ªëng
    function createTextTable(lines) {
        // Clear existing rows
        textTableBody.innerHTML = '';
        
        // Create a row for each line
        lines.forEach((line, index) => {
            const row = document.createElement('tr');
            
            // Line number cell
            const numberCell = document.createElement('td');
            numberCell.textContent = index + 1;
            numberCell.className = 'line-number';
            row.appendChild(numberCell);
            
            // Character select cell
            const characterCell = document.createElement('td');
            const characterSelect = document.createElement('select');
            characterSelect.className = 'character-select';
            
            // Add default "None" option
            const noneOption = document.createElement('option');
            noneOption.value = 'none';
            noneOption.textContent = 'Kh√¥ng c√≥';
            characterSelect.appendChild(noneOption);
            
            // Add option for each character
            characters.forEach(character => {
                const option = document.createElement('option');
                option.value = character;
                option.textContent = character;
                characterSelect.appendChild(option);
            });
            
            characterSelect.addEventListener('change', function() {
                markAsChanged();
            });
            
            characterCell.appendChild(characterSelect);
            row.appendChild(characterCell);
            
            // Expression select cell
            const expressionCell = document.createElement('td');
            const expressionSelect = document.createElement('select');
            expressionSelect.className = 'expression-select';
            
            // Add default "None" option
            const noneExpressionOption = document.createElement('option');
            noneExpressionOption.value = 'none';
            noneExpressionOption.textContent = 'Kh√¥ng c√≥';
            expressionSelect.appendChild(noneExpressionOption);
            
            // Add option for each expression
            expressions.forEach(expression => {
                const option = document.createElement('option');
                option.value = expression;
                option.textContent = expression;
                expressionSelect.appendChild(option);
            });
            
            expressionSelect.addEventListener('change', function() {
                markAsChanged();
            });
            
            expressionCell.appendChild(expressionSelect);
            row.appendChild(expressionCell);
            
            // Text cell
            const textCell = document.createElement('td');
            textCell.textContent = line;
            textCell.setAttribute('data-original-text', line);
            textCell.className = 'editable-text';
            textCell.title = 'Nh·∫•p ƒë√∫p ƒë·ªÉ ch·ªânh s·ª≠a vƒÉn b·∫£n';
            
            // Th√™m s·ª± ki·ªán double-click ƒë·ªÉ ch·ªânh s·ª≠a
            textCell.addEventListener('dblclick', function() {
                makeTextEditable(this);
            });
            
            // Th√™m n√∫t h√†nh ƒë·ªông di chuy·ªÉn v√† x√≥a
            const actionSpan = document.createElement('span');
            actionSpan.className = 'table-row-actions';
            
            // N√∫t di chuy·ªÉn l√™n
            if (index > 0) {
                const moveUpBtn = document.createElement('button');
                moveUpBtn.type = 'button';
                moveUpBtn.className = 'action-btn move-up-btn';
                moveUpBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
                moveUpBtn.title = 'Di chuy·ªÉn l√™n';
                moveUpBtn.addEventListener('click', function() {
                    moveRow(row, 'up');
                });
                actionSpan.appendChild(moveUpBtn);
            }
            
            // N√∫t di chuy·ªÉn xu·ªëng
            if (index < lines.length - 1) {
                const moveDownBtn = document.createElement('button');
                moveDownBtn.type = 'button';
                moveDownBtn.className = 'action-btn move-down-btn';
                moveDownBtn.innerHTML = '<i class="fas fa-arrow-down"></i>';
                moveDownBtn.title = 'Di chuy·ªÉn xu·ªëng';
                moveDownBtn.addEventListener('click', function() {
                    moveRow(row, 'down');
                });
                actionSpan.appendChild(moveDownBtn);
            }
            
            // N√∫t x√≥a d√≤ng
            const deleteBtn = document.createElement('button');
            deleteBtn.type = 'button';
            deleteBtn.className = 'action-btn delete-row-btn';
            deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
            deleteBtn.title = 'X√≥a d√≤ng n√†y';
            deleteBtn.addEventListener('click', function() {
                deleteTextRow(row, index);
            });
            actionSpan.appendChild(deleteBtn);
            
            textCell.appendChild(actionSpan);
            row.appendChild(textCell);
            
            // Add row to table body
            textTableBody.appendChild(row);
        });
    }
    
    // H√†m di chuy·ªÉn d√≤ng l√™n/xu·ªëng
    function moveRow(row, direction) {
        const rows = Array.from(textTableBody.querySelectorAll('tr'));
        const currentIndex = rows.indexOf(row);
        
        if (direction === 'up' && currentIndex > 0) {
            // Di chuy·ªÉn l√™n
            const targetIndex = currentIndex - 1;
            
            // Ho√°n ƒë·ªïi v·ªã tr√≠ trong DOM
            textTableBody.insertBefore(row, rows[targetIndex]);
            
            // Ho√°n ƒë·ªïi d·ªØ li·ªáu trong m·∫£ng textLines
            [textLines[targetIndex], textLines[currentIndex]] = [textLines[currentIndex], textLines[targetIndex]];
            
            // C·∫≠p nh·∫≠t l·∫°i s·ªë th·ª© t·ª±
            updateRowNumbers();
            
            // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
            markAsChanged();
        } else if (direction === 'down' && currentIndex < rows.length - 1) {
            // Di chuy·ªÉn xu·ªëng
            const targetIndex = currentIndex + 1;
            
            // Ho√°n ƒë·ªïi v·ªã tr√≠ trong DOM
            if (rows[targetIndex].nextElementSibling) {
                textTableBody.insertBefore(row, rows[targetIndex].nextElementSibling);
            } else {
                textTableBody.appendChild(row);
            }
            
            // Ho√°n ƒë·ªïi d·ªØ li·ªáu trong m·∫£ng textLines
            [textLines[currentIndex], textLines[targetIndex]] = [textLines[targetIndex], textLines[currentIndex]];
            
            // C·∫≠p nh·∫≠t l·∫°i s·ªë th·ª© t·ª±
            updateRowNumbers();
            
            // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
            markAsChanged();
        }
        
        // C·∫≠p nh·∫≠t n√∫t di chuy·ªÉn (l√™n/xu·ªëng) cho t·∫•t c·∫£ c√°c d√≤ng
        updateMoveButtons();
    }
    
    // C·∫≠p nh·∫≠t s·ªë th·ª© t·ª± cho t·∫•t c·∫£ c√°c d√≤ng
    function updateRowNumbers() {
        const rows = textTableBody.querySelectorAll('tr');
        rows.forEach((row, idx) => {
            row.querySelector('.line-number').textContent = idx + 1;
            
            // C·∫≠p nh·∫≠t l·∫°i s·ª± ki·ªán x√≥a v·ªõi index m·ªõi
            const deleteBtn = row.querySelector('.delete-row-btn');
            if (deleteBtn) {
                deleteBtn.onclick = null;
                deleteBtn.addEventListener('click', function() {
                    deleteTextRow(row, idx);
                });
            }
        });
        
        // C·∫≠p nh·∫≠t textarea ch·ª©a to√†n b·ªô n·ªôi dung
        sourceTextInput.value = textLines.join('\n');
    }
    
    // C·∫≠p nh·∫≠t n√∫t di chuy·ªÉn cho t·∫•t c·∫£ c√°c d√≤ng
    function updateMoveButtons() {
        const rows = Array.from(textTableBody.querySelectorAll('tr'));
        
        rows.forEach((row, idx) => {
            const actionsContainer = row.querySelector('.table-row-actions');
            if (!actionsContainer) return;
            
            // X√≥a n√∫t di chuy·ªÉn c≈©
            const oldMoveUpBtn = actionsContainer.querySelector('.move-up-btn');
            const oldMoveDownBtn = actionsContainer.querySelector('.move-down-btn');
            if (oldMoveUpBtn) actionsContainer.removeChild(oldMoveUpBtn);
            if (oldMoveDownBtn) actionsContainer.removeChild(oldMoveDownBtn);
            
            // Th√™m n√∫t di chuy·ªÉn l√™n n·∫øu kh√¥ng ph·∫£i d√≤ng ƒë·∫ßu ti√™n
            if (idx > 0) {
                const moveUpBtn = document.createElement('button');
                moveUpBtn.type = 'button';
                moveUpBtn.className = 'action-btn move-up-btn';
                moveUpBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
                moveUpBtn.title = 'Di chuy·ªÉn l√™n';
                moveUpBtn.addEventListener('click', function() {
                    moveRow(row, 'up');
                });
                
                // Th√™m v√†o ƒë·∫ßu ƒë·ªÉ n√∫t di chuy·ªÉn n·∫±m tr∆∞·ªõc n√∫t x√≥a
                actionsContainer.insertBefore(moveUpBtn, actionsContainer.firstChild);
            }
            
            // Th√™m n√∫t di chuy·ªÉn xu·ªëng n·∫øu kh√¥ng ph·∫£i d√≤ng cu·ªëi c√πng
            if (idx < rows.length - 1) {
                const moveDownBtn = document.createElement('button');
                moveDownBtn.type = 'button';
                moveDownBtn.className = 'action-btn move-down-btn';
                moveDownBtn.innerHTML = '<i class="fas fa-arrow-down"></i>';
                moveDownBtn.title = 'Di chuy·ªÉn xu·ªëng';
                moveDownBtn.addEventListener('click', function() {
                    moveRow(row, 'down');
                });
                
                // Th√™m tr∆∞·ªõc n√∫t x√≥a
                const deleteBtn = actionsContainer.querySelector('.delete-row-btn');
                if (deleteBtn) {
                    actionsContainer.insertBefore(moveDownBtn, deleteBtn);
                } else {
                    actionsContainer.appendChild(moveDownBtn);
                }
            }
        });
    }

    // H√†m x√≥a m·ªôt d√≤ng vƒÉn b·∫£n
    function deleteTextRow(row, index) {
        // Ki·ªÉm tra xem n√∫t x√≥a c√≥ ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω kh√¥ng
        if (row.getAttribute('data-deleting') === 'true') {
            return;
        }
        
        // ƒê√°nh d·∫•u ƒëang trong qu√° tr√¨nh x√≥a
        row.setAttribute('data-deleting', 'true');
        
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d√≤ng n√†y kh√¥ng?')) {
            // X√°c ƒë·ªãnh index th·ª±c c·ªßa d√≤ng (v√¨ ph·∫ßn t·ª≠ row c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi v·ªã tr√≠)
            const currentIndex = Array.from(textTableBody.querySelectorAll('tr')).indexOf(row);
            
            // X√≥a d√≤ng kh·ªèi m·∫£ng textLines v·ªõi index ƒë√£ x√°c ƒë·ªãnh l·∫°i
            textLines.splice(currentIndex, 1);
            
            // X√≥a d√≤ng kh·ªèi b·∫£ng
            row.parentNode.removeChild(row);
            
            // C·∫≠p nh·∫≠t l·∫°i s·ªë th·ª© t·ª± c√°c d√≤ng
            const rows = textTableBody.querySelectorAll('tr');
            rows.forEach((row, idx) => {
                row.cells[0].textContent = idx + 1;
                
                // C·∫≠p nh·∫≠t l·∫°i s·ª± ki·ªán x√≥a v·ªõi index m·ªõi
                const deleteBtn = row.querySelector('.delete-row-btn');
                if (deleteBtn) {
                    deleteBtn.onclick = null;
                    deleteBtn.addEventListener('click', function() {
                        deleteTextRow(row, idx);
                    });
                }
            });
            
            // C·∫≠p nh·∫≠t textarea ch·ª©a to√†n b·ªô n·ªôi dung
            sourceTextInput.value = textLines.join('\n');
            
            // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
            markAsChanged();
            
            // Th√¥ng b√°o ƒë√£ x√≥a
            showToast('ƒê√£ x√≥a d√≤ng th√†nh c√¥ng', 'info');
        } else {
            // H·ªßy ƒë√°nh d·∫•u x√≥a n·∫øu ng∆∞·ªùi d√πng ch·ªçn Cancel
            row.removeAttribute('data-deleting');
        }
    }
    
    // Th√™m n√∫t x√≥a d√≤ng trong h√†m addNewTextRow
    function addNewTextRow() {
        // Th√™m d√≤ng tr·ªëng v√†o m·∫£ng textLines
        textLines.push('');
        
        // T·∫°o d√≤ng m·ªõi
        const row = document.createElement('tr');
        
        // Line number cell
        const numberCell = document.createElement('td');
        numberCell.textContent = textLines.length;
        numberCell.className = 'line-number';
        row.appendChild(numberCell);
        
        // Character select cell
        const characterCell = document.createElement('td');
        const characterSelect = document.createElement('select');
        characterSelect.className = 'character-select';
        
        // Add default "None" option
        const noneOption = document.createElement('option');
        noneOption.value = 'none';
        noneOption.textContent = 'Kh√¥ng c√≥';
        characterSelect.appendChild(noneOption);
        
        // Add option for each character
        characters.forEach(character => {
            const option = document.createElement('option');
            option.value = character;
            option.textContent = character;
            characterSelect.appendChild(option);
        });
        
        characterSelect.addEventListener('change', function() {
            markAsChanged();
        });
        
        characterCell.appendChild(characterSelect);
        row.appendChild(characterCell);
        
        // Expression select cell
        const expressionCell = document.createElement('td');
        const expressionSelect = document.createElement('select');
        expressionSelect.className = 'expression-select';
        
        // Add default "None" option
        const noneExpressionOption = document.createElement('option');
        noneExpressionOption.value = 'none';
        noneExpressionOption.textContent = 'Kh√¥ng c√≥';
        expressionSelect.appendChild(noneExpressionOption);
        
        // Add option for each expression
        expressions.forEach(expression => {
            const option = document.createElement('option');
            option.value = expression;
            option.textContent = expression;
            expressionSelect.appendChild(option);
        });
        
        expressionSelect.addEventListener('change', function() {
            markAsChanged();
        });
        
        expressionCell.appendChild(expressionSelect);
        row.appendChild(expressionCell);
        
        // Text cell (empty)
        const textCell = document.createElement('td');
        textCell.textContent = '';
        textCell.setAttribute('data-original-text', '');
        textCell.className = 'editable-text';
        textCell.title = 'Nh·∫•p ƒë√∫p ƒë·ªÉ ch·ªânh s·ª≠a vƒÉn b·∫£n';
        
        // Th√™m s·ª± ki·ªán double-click ƒë·ªÉ ch·ªânh s·ª≠a
        textCell.addEventListener('dblclick', function() {
            makeTextEditable(this);
        });
        
        // Th√™m c√°c n√∫t h√†nh ƒë·ªông
        const actionSpan = document.createElement('span');
        actionSpan.className = 'table-row-actions';
        
        // N√∫t di chuy·ªÉn l√™n (lu√¥n c√≥ v√¨ d√≤ng m·ªõi l√† d√≤ng cu·ªëi)
        const moveUpBtn = document.createElement('button');
        moveUpBtn.type = 'button';
        moveUpBtn.className = 'action-btn move-up-btn';
        moveUpBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
        moveUpBtn.title = 'Di chuy·ªÉn l√™n';
        moveUpBtn.addEventListener('click', function() {
            moveRow(row, 'up');
        });
        actionSpan.appendChild(moveUpBtn);
        
        // N√∫t x√≥a d√≤ng
        const deleteBtn = document.createElement('button');
        deleteBtn.type = 'button';
        deleteBtn.className = 'action-btn delete-row-btn';
        deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
        deleteBtn.title = 'X√≥a d√≤ng n√†y';
        deleteBtn.addEventListener('click', function() {
            // S·ª≠ d·ª•ng v·ªã tr√≠ th·ª±c t·∫ø c·ªßa d√≤ng trong b·∫£ng
            const currentRowIndex = Array.from(textTableBody.querySelectorAll('tr')).indexOf(row);
            deleteTextRow(row, currentRowIndex);
        });
        actionSpan.appendChild(deleteBtn);
        
        textCell.appendChild(actionSpan);
        row.appendChild(textCell);
        
        // Add row to table body
        textTableBody.appendChild(row);
        
        // C·∫≠p nh·∫≠t n√∫t di chuy·ªÉn cho t·∫•t c·∫£ c√°c d√≤ng
        updateMoveButtons();
        
        // C·∫≠p nh·∫≠t textarea ch·ª©a to√†n b·ªô n·ªôi dung
        sourceTextInput.value = textLines.join('\n');
        
        // B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a ngay l·∫≠p t·ª©c
        setTimeout(() => makeTextEditable(textCell), 0);
        
        // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
        markAsChanged();
    }
    
    // Update character selects in the table when character list changes
    function updateTableCharacterSelects() {
        document.querySelectorAll('.text-table select.character-select').forEach(select => {
            const currentValue = select.value;
            
            // Clear select
            select.innerHTML = '';
            
            // Add default "None" option
            const noneOption = document.createElement('option');
            noneOption.value = 'none';
            noneOption.textContent = 'Kh√¥ng c√≥';
            select.appendChild(noneOption);
            
            // Add options for each character
            characters.forEach(character => {
                const option = document.createElement('option');
                option.value = character;
                option.textContent = character;
                select.appendChild(option);
            });
            
            // Restore selection if possible
            if (currentValue && Array.from(select.options).some(opt => opt.value === currentValue)) {
                select.value = currentValue;
            } else {
                select.selectedIndex = 0;
            }
        });
    }
    
    // Add a few expressions by default if none exist
    if (expressionsContainer.children.length === 0) {
        // Define some default expressions
        const defaultExpressions = [
            'Gi·ªØ nguy√™n', 'Vui v·∫ª', 'Bu·ªìn b√£', 'T·ª©c gi·∫≠n', 'Suy nghƒ©', 
            'H√©t l·ªõn', 'Kh√≥c l√≥c', 'C∆∞·ªùi nh·∫π', 'Nghi√™m t√∫c', 
        ];
        
        // Add them to the UI
        defaultExpressions.forEach(expr => {
            const newExpression = expressionTemplate.content.cloneNode(true);
            expressionsContainer.appendChild(newExpression);
            
            const valueInput = expressionsContainer.querySelector('.expression-entry:last-child .expression-value');
            valueInput.value = expr;
            
            const removeBtn = expressionsContainer.querySelector('.expression-entry:last-child .remove-btn');
            removeBtn.addEventListener('click', function() {
                this.closest('.expression-entry').remove();
                updateExpressionsData();
                markAsChanged();
            });
            
            valueInput.addEventListener('input', function() {
                updateExpressionsData();
                markAsChanged();
            });
        });
        
        updateExpressionsData();
    }
    
    // H√†m l·∫•y vƒÉn b·∫£n g·ªëc c·∫ßn d·ªãch
    function getOriginalText() {
        // N·∫øu c√≥ d·ªØ li·ªáu trong b·∫£ng vƒÉn b·∫£n, s·ª≠ d·ª•ng n√≥
        if (textTableBody.children.length > 0) {
            return Array.from(textTableBody.querySelectorAll('tr')).map(row => {
                const textCell = row.querySelector('td:nth-child(4)');
                return textCell.getAttribute('data-original-text') || textCell.textContent;
            }).join('\n');
        }
        
        // Ng∆∞·ª£c l·∫°i, s·ª≠ d·ª•ng vƒÉn b·∫£n t·ª´ √¥ nh·∫≠p li·ªáu
        return sourceTextInput.value.trim();
    }
    
    // H√†m hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    function displayErrorMessage(message) {
        showToast(message, 'error');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói trong k·∫øt qu·∫£ d·ªãch
        const errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        errorElement.textContent = message;
        
        translationResult.innerHTML = '';
        translationResult.appendChild(errorElement);
        
        console.error(message);
    }
    
    // H√†m g·ªçi API ChatGPT
    async function callChatGPT(apiKey, model, prompt) {
        try {
            // Endpoint m·ªõi c·ªßa Google Gemini API
            const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-thinking-exp-01-21:generateContent?key=${apiKey}`;
            
            // C·∫•u tr√∫c d·ªØ li·ªáu cho API Gemini
            const payload = {
                contents: [
                    {
                        role: "user",
                        parts: [
                            {
                                text: prompt
                            }
                        ]
                    }
                ],
                generationConfig: {
                    temperature: 1,
                    topK: 64,
                    topP: 0.95,
                    maxOutputTokens: 65536,
                    responseMimeType: "text/plain"
                }
            };
            
            console.log("ƒêang g·ª≠i y√™u c·∫ßu d·ªãch t·ªõi API Gemini...");
            
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`L·ªói API (${response.status}): ${errorText}`);
            }
            
            const data = await response.json();
            
            // Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ c·∫•u tr√∫c ph·∫£n h·ªìi c·ªßa Gemini
            if (data.candidates && data.candidates.length > 0 && 
                data.candidates[0].content && 
                data.candidates[0].content.parts && 
                data.candidates[0].content.parts.length > 0) {
                return data.candidates[0].content.parts[0].text;
            } else {
                console.error("C·∫•u tr√∫c ph·∫£n h·ªìi kh√¥ng ƒë√∫ng:", data);
                throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t k·∫øt qu·∫£ t·ª´ ph·∫£n h·ªìi API");
            }
        } catch (error) {
            console.error("L·ªói khi g·ªçi API:", error);
            throw error;
        }
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t d·ªãch
    function updateButtonState() {
        translateBtn.disabled = isLoading;
        refineAgainBtn.disabled = isLoading || !translationResult.textContent.trim();
        copyTextBtn.disabled = isLoading || !translationResult.textContent.trim();
        
        if (isLoading) {
            translateBtn.textContent = 'ƒêang d·ªãch...';
            refineAgainBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang trau chu·ªët...';
            loadingIndicator.style.display = 'block';
            copyTextBtn.style.opacity = '0.5';
            copyTextBtn.style.cursor = 'not-allowed';
        } else {
            translateBtn.textContent = 'D·ªãch vƒÉn b·∫£n';
            refineAgainBtn.innerHTML = '<i class="fas fa-magic"></i> Trau chu·ªët l·∫ßn n·ªØa';
            loadingIndicator.style.display = 'none';
            copyTextBtn.style.opacity = translationResult.textContent.trim() ? '1' : '0.5';
            copyTextBtn.style.cursor = translationResult.textContent.trim() ? 'pointer' : 'not-allowed';
        }
    }

    async function refineAgain() {
        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ d·ªãch ho·∫∑c ƒëang trong qu√° tr√¨nh x·ª≠ l√Ω
        if (isLoading || !translationResult.textContent.trim()) {
            displayErrorMessage('Kh√¥ng c√≥ k·∫øt qu·∫£ d·ªãch ƒë·ªÉ trau chu·ªët th√™m.');
            return;
        }

        // Hi·ªÉn th·ªã ti·∫øn tr√¨nh
        const progressElement = document.createElement('div');
        progressElement.className = 'translation-progress';
        progressElement.innerHTML = `
            <div class="progress-step step-active">Trau chu·ªët b·∫£n d·ªãch th√™m m·ªôt l·∫ßn n·ªØa</div>
        `;
        
        // L∆∞u l·∫°i n·ªôi dung k·∫øt qu·∫£ d·ªãch hi·ªán t·∫°i
        const currentTranslation = translationResult.textContent;
        
        // X√≥a n·ªôi dung hi·ªán t·∫°i v√† hi·ªÉn th·ªã ti·∫øn tr√¨nh
        translationResult.innerHTML = '';
        translationResult.appendChild(progressElement);

        const apiKey = document.getElementById('api-key').value.trim();
        if (!apiKey) {
            displayErrorMessage('Vui l√≤ng nh·∫≠p API key.');
            return;
        }

        // Thi·∫øt l·∫≠p model m·∫∑c ƒë·ªãnh
        const model = "google/gemini-2.0-pro-exp-02-05:free"; // S·ª≠ d·ª•ng model m·∫∑c ƒë·ªãnh
        
        // Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng t·ª´ d·ªØ li·ªáu nh·∫≠p v√†o
        const promptInfo = extractPromptInfo();
        
        isLoading = true;
        updateButtonState();

        // Chu·∫©n b·ªã prompt cho vi·ªác trau chu·ªët l·∫ßn n·ªØa
        let additionalRefinementPrompt = buildAdditionalRefinementPrompt(currentTranslation, promptInfo);
        
        // G·ªçi API ƒë·ªÉ trau chu·ªët l·∫ßn n·ªØa
        try {
            const additionalRefinedTranslation = await callChatGPT(apiKey, model, additionalRefinementPrompt);
            
            // Lo·∫°i b·ªè m·ªçi ƒë·ªãnh d·∫°ng Markdown v√† th√¥ng tin nh√¢n v·∫≠t, bi·ªÉu hi·ªán ·ªü k·∫øt qu·∫£ cu·ªëi c√πng
            const finalTranslation = stripMarkdown(additionalRefinedTranslation);
            
            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            translationResult.innerHTML = '';
            translationResult.appendChild(document.createTextNode(finalTranslation));
            
            // Hi·ªÉn th·ªã n√∫t trau chu·ªët l·∫ßn n·ªØa khi c√≥ k·∫øt qu·∫£ d·ªãch
            document.getElementById('refine-again-controls').style.display = 'flex';
            
            isLoading = false;
            updateButtonState();
        } catch (error) {
            displayErrorMessage('L·ªói trau chu·ªët vƒÉn b·∫£n: ' + error.message);
            isLoading = false;
            updateButtonState();
        }
    }
    
    // H√†m t·∫°o prompt cho vi·ªác trau chu·ªët th√™m l·∫ßn n·ªØa
    function buildAdditionalRefinementPrompt(currentTranslation, promptInfo) {
        let prompt = "D∆∞·ªõi ƒë√¢y l√† b·∫£n d·ªãch ƒë√£ ƒë∆∞·ª£c trau chu·ªët m·ªôt l·∫ßn. H√£y ti·∫øp t·ª•c trau chu·ªët th√™m m·ªôt l·∫ßn n·ªØa ƒë·ªÉ c√≥ vƒÉn phong t·ª± nhi√™n h∆°n, m∆∞·ª£t m√† h∆°n nh∆∞ ƒë·ªëi tho·∫°i ngo√†i ƒë·ªùi, nh∆∞ng kh√¥ng ƒë∆∞·ª£c th√™m b·ªõt n·ªôi dung, ph·∫£i ƒë√∫ng √Ω nghƒ©a c√¢u vƒÉn v√† TUY·ªÜT ƒê·ªêI PH·∫¢I GI·ªÆ NGUY√äN X∆ØNG H√î theo y√™u c·∫ßu. L∆ØU √ù: VI·ªÜC GI·ªÆ NGUY√äN X∆ØNG H√î L√Ä QUAN TR·ªåNG NH·∫§T, KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI D∆Ø·ªöI B·∫§T K·ª≤ H√åNH TH·ª®C N√ÄO.\n\n";
        
        prompt += "X∆ØNG H√î GI·ªÆA C√ÅC NH√ÇN V·∫¨T (PH·∫¢I TU√ÇN THEO NGHI√äM NG·∫∂T - ƒê√ÇY L√Ä Y√äU C·∫¶U QUAN TR·ªåNG NH·∫§T):\n";
        promptInfo.pronouns.forEach(item => {
            prompt += `- ${item.from}: g·ªçi ${item.to} l√† "${item.value}"`;
            if (item.selfValue) {
                prompt += `, x∆∞ng b·∫£n th√¢n l√† "${item.selfValue}"`;
            }
            prompt += '\n';
        });
        
        if (promptInfo.relationships.length > 0) {
            prompt += "\nM·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC NH√ÇN V·∫¨T:\n";
            promptInfo.relationships.forEach(rel => {
                prompt += `- ${rel}\n`;
            });
        }
        
        prompt += "\nY√äU C·∫¶U B·∫ÆT BU·ªòC PH·∫¢I TU√ÇN TH·ª¶:\n";
        prompt += "- N√¢ng cao vƒÉn phong ƒë·ªÉ t·ª± nhi√™n h∆°n, d·ªÖ ƒë·ªçc h∆°n\n";
        prompt += "- T·∫°o c·∫£m x√∫c ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh nh∆∞ng kh√¥ng l√†m thay ƒë·ªïi √Ω nghƒ©a\n";
        prompt += "- TUY·ªÜT ƒê·ªêI GI·ªÆ NGUY√äN T·∫§T C·∫¢ X∆ØNG H√î gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n\n";
        prompt += "- Gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "- Kh√¥ng s·ª≠ d·ª•ng Markdown, tr·∫£ v·ªÅ vƒÉn b·∫£n thu·∫ßn t√∫y\n";
        prompt += "- Kh√¥ng th√™m b·∫•t k·ª≥ th√¥ng tin m·ªõi n√†o\n";
        prompt += "- V√î C√ôNG QUAN TR·ªåNG: PH·∫¢I GI·ªÆ NGUY√äN ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' ·ªü m·ªói d√≤ng trong QU√Å TR√åNH trau chu·ªët, nh∆∞ng KH√îNG ƒë∆∞a th√¥ng tin n√†y v√†o k·∫øt qu·∫£ cu·ªëi c√πng\n";
        
        // Th√™m vƒÉn phong n·∫øu c√≥
        if (promptInfo.style) {
            prompt += `- √Åp d·ª•ng vƒÉn phong: ${promptInfo.style}\n`;
        }
        
        // Th√™m th·ªÉ lo·∫°i n·∫øu c√≥
        if (promptInfo.genre) {
            prompt += `- Ph√π h·ª£p v·ªõi th·ªÉ lo·∫°i: ${promptInfo.genre}\n`;
        }
        
        // Th√™m th√¥ng tin v·ªÅ c√°c d√≤ng c·∫ßn gi·ªØ nguy√™n
        if (promptInfo.keepOriginalLines.length > 0) {
            prompt += "\nC√ÅC D√íNG VƒÇN B·∫¢N C·∫¶N GI·ªÆ NGUY√äN (KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI):\n";
            promptInfo.keepOriginalLines.forEach(line => {
                prompt += `D√≤ng ${line.index}: ${line.text}\n`;
            });
            prompt += "Nh·ªØng d√≤ng tr√™n PH·∫¢I ƒë∆∞·ª£c gi·ªØ nguy√™n trong b·∫£n d·ªãch cu·ªëi c√πng, KH√îNG ƒê∆Ø·ª¢C D·ªäCH c√°c d√≤ng n√†y.\n";
        }
        
        // X·ª≠ l√Ω tr√≠ch xu·∫•t th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán/d·∫°ng tho·∫°i t·ª´ vƒÉn b·∫£n hi·ªán t·∫°i
        const processedTranslation = prepareTranslationForRefinement(currentTranslation);
        
        prompt += "\nB·∫¢N D·ªäCH C·∫¶N TRAU CHU·ªêT TH√äM:\n\n";
        prompt += processedTranslation;
        
        prompt += "\n\nC√ÅCH TR·∫¢ L·ªúI Y√äU C·∫¶U: Sau khi trau chu·ªët, h√£y ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ trau chu·ªët THEO ƒê√öNG ƒê·ªäNH D·∫†NG CHU·∫®N SAU:\n";
        prompt += "1. M·ªói d√≤ng ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z'\n";
        prompt += "2. TUY·ªÜT ƒê·ªêI KH√îNG th√™m m√¥ t·∫£, gi·∫£i th√≠ch ho·∫∑c b·∫•t k·ª≥ ph·∫ßn gi·ªõi thi·ªáu/k·∫øt lu·∫≠n n√†o\n";
        prompt += "3. Kh√¥ng th√™m b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng Markdown n√†o\n";
        prompt += "4. Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng vƒÉn b·∫£n thu·∫ßn (plain text)\n\n";
        
        prompt += "NH·∫ÆC L·∫†I C√ÅC QUY T·∫ÆC TRAU CHU·ªêT (ƒê·ªåC K·ª∏ V√Ä TU√ÇN TH·ª¶):\n";
        prompt += "1. PH·∫¢I gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "2. PH·∫¢I s·ª≠ d·ª•ng CH√çNH X√ÅC x∆∞ng h√¥ gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n - ƒê√ÇY L√Ä QUAN TR·ªåNG NH·∫§T\n";
        prompt += "3. PH·∫¢I gi·ªØ nguy√™n nh·ªØng d√≤ng ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh l√† 'gi·ªØ nguy√™n'\n";
        prompt += "4. PH·∫¢I gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' ·ªü m·ªói d√≤ng trong k·∫øt qu·∫£ trau chu·ªët\n";
        prompt += "5. KH√îNG ƒë∆∞·ª£c th√™m ph·∫ßn gi·ªõi thi·ªáu ho·∫∑c k·∫øt lu·∫≠n n√†o v√†o k·∫øt qu·∫£";
        
        return prompt;
    }
    
    // H√†m chu·∫©n b·ªã vƒÉn b·∫£n cho vi·ªác trau chu·ªët l·∫ßn n·ªØa v·ªõi th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
    function prepareTranslationForRefinement(currentTranslation) {
        // Ph√¢n t√°ch vƒÉn b·∫£n th√†nh c√°c d√≤ng
        const lines = currentTranslation.split('\n');
        
        // L·∫•y th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán t·ª´ b·∫£ng vƒÉn b·∫£n g·ªëc
        const tableRows = document.querySelectorAll('#text-table-body tr');
        
        // X·ª≠ l√Ω t·ª´ng d√≤ng
        const processedLines = lines.map((line, index) => {
            // N·∫øu d√≤ng r·ªóng, gi·ªØ nguy√™n
            if (!line.trim()) return line;
            
            // N·∫øu c√≤n d√≤ng t∆∞∆°ng ·ª©ng trong b·∫£ng, l·∫•y th√¥ng tin t·ª´ ƒë√≥
            if (index < tableRows.length) {
                const row = tableRows[index];
                const characterSelect = row.querySelector('.character-select');
                const expressionSelect = row.querySelector('.expression-select');
                
                const character = characterSelect.value !== 'none' ? characterSelect.value : '';
                const expression = expressionSelect.value !== 'none' ? expressionSelect.value : '';
                
                // T·∫°o d√≤ng m·ªõi v·ªõi ƒë·ªãnh d·∫°ng chu·∫©n
                let formattedLine = '';
                
                // Th√™m th√¥ng tin nh√¢n v·∫≠t n·∫øu c√≥
                if (character) {
                    formattedLine += `Nh√¢n v·∫≠t: ${character}, `;
                }
                
                // Th√™m th√¥ng tin bi·ªÉu hi·ªán n·∫øu c√≥
                if (expression) {
                    formattedLine += `Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: ${expression}, `;
                }
                
                // Th√™m c√¢u c·∫ßn trau chu·ªët
                formattedLine += `c√¢u c·∫ßn trau chu·ªët: ${line}`;
                
                return formattedLine;
            }
            
            // N·∫øu kh√¥ng c√≥ th√¥ng tin t∆∞∆°ng ·ª©ng, ch·ªâ th√™m ph·∫ßn c√¢u c·∫ßn trau chu·ªët
            return `c√¢u c·∫ßn trau chu·ªët: ${line}`;
        });
        
        return processedLines.join('\n');
    }

    // H√†m reset t·∫•t c·∫£ c√†i ƒë·∫∑t
    function resetSettings() {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ c√†i ƒë·∫∑t? Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
            return;
        }
        
        // Reset nh√¢n v·∫≠t
        characterContainer.innerHTML = '';
        addCharacter(); // Th√™m m·ªôt nh√¢n v·∫≠t tr·ªëng
        
        // Reset m·ªëi quan h·ªá
        relationshipContainer.innerHTML = '';
        
        // Reset x∆∞ng h√¥
        pronounContainer.innerHTML = '';
        
        // Reset bi·ªÉu hi·ªán - nh∆∞ng gi·ªØ l·∫°i c√°c bi·ªÉu hi·ªán m·∫∑c ƒë·ªãnh
        const keepExpressions = ['Gi·ªØ nguy√™n', 'Vui v·∫ª', 'Bu·ªìn b√£', 'T·ª©c gi·∫≠n', 'Suy nghƒ©', 
            'H√©t l·ªõn', 'Kh√≥c l√≥c', 'C∆∞·ªùi nh·∫π', 'Nghi√™m t√∫c'];
            
        expressionsContainer.innerHTML = '';
        keepExpressions.forEach(expr => {
            const newExpression = expressionTemplate.content.cloneNode(true);
            expressionsContainer.appendChild(newExpression);
            
            const valueInput = expressionsContainer.querySelector('.expression-entry:last-child .expression-value');
            valueInput.value = expr;
            
            const removeBtn = expressionsContainer.querySelector('.expression-entry:last-child .remove-btn');
            removeBtn.addEventListener('click', function() {
                this.closest('.expression-entry').remove();
                updateExpressionsData();
                markAsChanged();
            });
            
            valueInput.addEventListener('input', function() {
                updateExpressionsData();
                markAsChanged();
            });
        });
        
        // Reset c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        contextInput.value = '';
        genreInput.value = '';
        styleInput.value = '';
        requirementsInput.value = 'd·ªãch ph·∫£i ƒë√∫ng x∆∞ng h√¥, trau chu·ªët th·∫≠t k·ªπ, vƒÉn phong ph·∫£i hay, tr√°nh l·ªói l·∫∑p t·ª´';
        sourceTextInput.value = '';
        
        // Reset b·∫£ng vƒÉn b·∫£n v√† textLines
        textTableBody.innerHTML = '';
        textLines = [];
        
        // Reset k·∫øt qu·∫£ d·ªãch
        translationResult.innerHTML = '';
        
        // C·∫≠p nh·∫≠t danh s√°ch nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
        updateCharactersList();
        updateExpressionsData();
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
        updateButtonState();
        
        // X√≥a d·ªØ li·ªáu t·ª´ localStorage
        localStorage.removeItem('dich-ai-settings');
        
        // ƒê√°nh d·∫•u l√† ƒë√£ thay ƒë·ªïi
        hasUnsavedChanges = true;
        
        // Th√¥ng b√°o ƒë√£ reset th√†nh c√¥ng
        showToast('ƒê√£ reset t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh.', 'success');
    }

    // H√†m l√†m cho √¥ vƒÉn b·∫£n c√≥ th·ªÉ ch·ªânh s·ª≠a
    function makeTextEditable(cell) {
        // T·∫°o m·ªôt textarea ƒë·ªÉ thay th·∫ø √¥ hi·ªán t·∫°i
        const textarea = document.createElement('textarea');
        textarea.value = cell.textContent;
        textarea.className = 'inline-edit-textarea';
        textarea.rows = Math.max(2, cell.textContent.split('\n').length);
        
        // Thay th·∫ø n·ªôi dung √¥ b·∫±ng textarea
        cell.innerHTML = '';
        cell.appendChild(textarea);
        
        // Focus v√†o textarea
        textarea.focus();
        
        // L∆∞u thay ƒë·ªïi khi b·∫•m Enter ho·∫∑c r·ªùi kh·ªèi textarea
        textarea.addEventListener('blur', function() {
            saveTextEdit(cell, textarea);
        });
        
        textarea.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.blur();
            }
        });
    }
    
    // L∆∞u thay ƒë·ªïi sau khi ch·ªânh s·ª≠a vƒÉn b·∫£n
    function saveTextEdit(cell, textarea) {
        const newText = textarea.value.trim();
        const row = cell.parentNode;
        
        // L∆∞u l·∫°i c√°c ph·∫ßn t·ª≠ h√†nh ƒë·ªông (n·∫øu c√≥)
        const actionSpan = cell.querySelector('.table-row-actions');
        
        // C·∫≠p nh·∫≠t n·ªôi dung √¥ v√† thu·ªôc t√≠nh data-original-text
        cell.textContent = newText;
        cell.setAttribute('data-original-text', newText);
        
        // Kh√¥i ph·ª•c c√°c n√∫t h√†nh ƒë·ªông n·∫øu ƒë√£ c√≥ tr∆∞·ªõc ƒë√≥
        if (actionSpan) {
            cell.appendChild(actionSpan);
        } else {
            // N·∫øu ch∆∞a c√≥ c√°c n√∫t h√†nh ƒë·ªông, t·∫°o m·ªõi
            const rowIndex = row.rowIndex - 1; // Tr·ª´ 1 v√¨ h√†ng ƒë·∫ßu ti√™n l√† header
            
            // Th√™m l·∫°i c√°c n√∫t h√†nh ƒë·ªông
            const newActionSpan = document.createElement('span');
            newActionSpan.className = 'table-row-actions';
            
            // N√∫t x√≥a d√≤ng
            const deleteBtn = document.createElement('button');
            deleteBtn.type = 'button';
            deleteBtn.className = 'action-btn delete-row-btn';
            deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
            deleteBtn.title = 'X√≥a d√≤ng n√†y';
            deleteBtn.addEventListener('click', function() {
                // S·ª≠ d·ª•ng v·ªã tr√≠ th·ª±c t·∫ø c·ªßa d√≤ng trong b·∫£ng
                const currentRowIndex = Array.from(textTableBody.querySelectorAll('tr')).indexOf(row);
                deleteTextRow(row, currentRowIndex);
            });
            
            newActionSpan.appendChild(deleteBtn);
            cell.appendChild(newActionSpan);
            
            // C·∫≠p nh·∫≠t l·∫°i c√°c n√∫t di chuy·ªÉn
            updateMoveButtons();
        }
        
        // C·∫≠p nh·∫≠t m·∫£ng textLines
        const rowIndex = row.rowIndex - 1; // Tr·ª´ 1 v√¨ h√†ng ƒë·∫ßu ti√™n l√† header
        if (rowIndex >= 0 && rowIndex < textLines.length) {
            textLines[rowIndex] = newText;
            
            // C·∫≠p nh·∫≠t textarea ch·ª©a to√†n b·ªô n·ªôi dung
            sourceTextInput.value = textLines.join('\n');
            
            // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
            markAsChanged();
        }
    }
    
    // Th√™m n√∫t ƒë·ªÉ th√™m d√≤ng m·ªõi
    function addNewRowButton() {
        const controlsDiv = document.createElement('div');
        controlsDiv.className = 'table-controls table-controls-bottom';
        
        const addRowBtn = document.createElement('button');
        addRowBtn.type = 'button';
        addRowBtn.className = 'btn btn-add';
        addRowBtn.innerHTML = '<i class="fas fa-plus"></i> Th√™m d√≤ng m·ªõi';
        addRowBtn.addEventListener('click', addNewTextRow);
        
        controlsDiv.appendChild(addRowBtn);
        
        // Th√™m n√∫t sau b·∫£ng thay v√¨ tr∆∞·ªõc b·∫£ng
        const tableContainer = document.querySelector('.table-container');
        tableContainer.parentNode.insertBefore(controlsDiv, tableContainer.nextSibling);
    }
}); 