document.addEventListener('DOMContentLoaded', function() {
    // API constants
    const GOOGLE_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent';
    
    // Bi·∫øn l∆∞u API key Google
    let originalRefinedTranslation = '';
    
    // DOM elements
    const googleApiKeyInput = document.getElementById('google-api-key');
    const characterContainer = document.getElementById('characters-container');
    const relationshipContainer = document.getElementById('relationships-container');
    const pronounContainer = document.getElementById('pronouns-container');
    const expressionsContainer = document.getElementById('expressions-container');
    const contextInput = document.getElementById('context');
    const genreInput = document.getElementById('genre');
    const styleInput = document.getElementById('style');
    const requirementsInput = document.getElementById('requirements');
    const sourceTextInput = document.getElementById('source-text');
    const textFileInput = document.getElementById('text-file-input');
    const textTableBody = document.getElementById('text-table-body');
    const translateBtn = document.getElementById('translate-btn');
    const translationResult = document.getElementById('translation-result');
    const loadingIndicator = document.getElementById('loading-indicator');
    const refineAgainBtn = document.getElementById('refine-again-btn');
    
    // Bi·∫øn tr·∫°ng th√°i
    let isLoading = false;
    
    // H√†m hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫πp
    function showToast(message, type = 'success') {
        let background = '#28a745';
        if (type === 'error') background = '#dc3545';
        if (type === 'warning') background = '#ffc107';
        if (type === 'info') background = '#17a2b8';
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i tr√™n thi·∫øt b·ªã di ƒë·ªông kh√¥ng
        const isMobile = window.innerWidth < 769;
        
        // Position v√† duration t√πy theo thi·∫øt b·ªã
        const position = isMobile ? 'center' : 'right';
        const duration = isMobile ? 3000 : 2000; // Hi·ªÉn th·ªã l√¢u h∆°n tr√™n ƒëi·ªán tho·∫°i
        
        Toastify({
            text: message,
            duration: duration,
            close: true,
            gravity: "bottom",
            position: position,
            backgroundColor: background,
            stopOnFocus: true
        }).showToast();
    }
    
    // Th√™m c√°c n√∫t sao ch√©p cho k·∫øt qu·∫£ d·ªãch
    const outputSection = document.querySelector('.output-section');
    const resultActions = document.createElement('div');
    resultActions.className = 'result-actions';
    
    // Button to copy as text
    const copyTextBtn = document.createElement('button');
    copyTextBtn.textContent = 'Sao ch√©p k·∫øt qu·∫£';
    copyTextBtn.className = 'btn btn-secondary btn-small';
    copyTextBtn.addEventListener('click', function() {
        navigator.clipboard.writeText(translationResult.textContent).then(() => {
            showToast('ƒê√£ sao ch√©p k·∫øt qu·∫£!', 'success');
        }).catch(err => {
            console.error('L·ªói khi sao ch√©p:', err);
            showToast('Kh√¥ng th·ªÉ sao ch√©p: ' + err.message, 'error');
        });
    });
    
    resultActions.appendChild(copyTextBtn);
    outputSection.appendChild(resultActions);
    
    // Templates
    const characterTemplate = document.getElementById('character-template');
    const relationshipTemplate = document.getElementById('relationship-template');
    const pronounTemplate = document.getElementById('pronoun-template');
    const expressionTemplate = document.getElementById('expression-template');
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa c√°c n√∫t
    updateButtonState();
    
    // Th√™m n√∫t th√™m d√≤ng m·ªõi
    addNewRowButton();
    


    // Th√™m ch·ª©c nƒÉng hi·ªÉn th·ªã/·∫©n API key c·ªßa Google
    document.getElementById('toggle-google-api-key').addEventListener('click', function() {
        if (googleApiKeyInput.type === 'password') {
            googleApiKeyInput.type = 'text';
            this.textContent = 'üîí';
        } else {
            googleApiKeyInput.type = 'password';
            this.textContent = 'üëÅÔ∏è';
        }
    });
    
    // Add event listeners for buttons
    document.getElementById('add-character').addEventListener('click', addCharacter);
    document.getElementById('add-relationship').addEventListener('click', addRelationship);
    document.getElementById('add-pronoun').addEventListener('click', addPronoun);
    document.getElementById('add-expression').addEventListener('click', addExpression);
    translateBtn.addEventListener('click', translateText);
    refineAgainBtn.addEventListener('click', refineAgain);
    textFileInput.addEventListener('change', handleFileUpload);
    
    // Th√™m n√∫t l∆∞u v√† t·∫£i c√†i ƒë·∫∑t
    document.getElementById('save-settings').addEventListener('click', saveSettings);
    document.getElementById('load-settings').addEventListener('click', loadSettings);
    document.getElementById('export-json').addEventListener('click', exportToJson);
    document.getElementById('import-json-btn').addEventListener('click', function() {
        document.getElementById('import-json').click();
    });
    document.getElementById('import-json').addEventListener('change', importFromJson);
    document.getElementById('reset-settings').addEventListener('click', resetSettings);
    

    
    // Th√™m event listeners cho tr∆∞·ªùng nh·∫≠p
    genreInput.addEventListener('input', function() {
        markAsChanged();
    });
    styleInput.addEventListener('input', function() {
        markAsChanged();
    });
    requirementsInput.addEventListener('input', function() {
        markAsChanged();
    });
    contextInput.addEventListener('input', function() {
        markAsChanged();
    });
    sourceTextInput.addEventListener('input', function() {
        markAsChanged();
    });
    
    // Characters data array
    let characters = [];
    // Expressions data array
    let expressions = [];
    // L∆∞u c√°c c·∫∑p X∆ØNG h√¥ ƒë√£ t·ªìn t·∫°i ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    let existingPronounPairs = new Set();
    // Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i
    let hasUnsavedChanges = false;
    // Lines of text for translation
    let textLines = [];
    
    // Kh√¥ng c√≤n t·ª± ƒë·ªông l∆∞u ƒë·ªãnh k·ª≥
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i khi c√≥ thay ƒë·ªïi
    function markAsChanged() {
        hasUnsavedChanges = true;
    }
    
    // Th√™m s·ª± ki·ªán beforeunload ƒë·ªÉ c·∫£nh b√°o ng∆∞·ªùi d√πng khi r·ªùi trang m√† ch∆∞a l∆∞u
    window.addEventListener('beforeunload', function(e) {
        if (hasUnsavedChanges) {
            // Hi·ªÉn th·ªã th√¥ng b√°o
            const confirmationMessage = 'B·∫°n c√≥ thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c l∆∞u. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r·ªùi kh·ªèi trang?';
            e.returnValue = confirmationMessage;
            return confirmationMessage;
        }
    });
    
    // Ki·ªÉm tra xem c√°c ph·∫ßn t·ª≠ DOM ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
    if (!characterContainer || !relationshipContainer || !pronounContainer || 
        !contextInput || !genreInput || !styleInput || !requirementsInput || 
        !sourceTextInput || !googleApiKeyInput) {
        console.error("Kh√¥ng th·ªÉ t√¨m th·∫•y m·ªôt ho·∫∑c nhi·ªÅu ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt!");
        alert("L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng t·∫£i l·∫°i trang.");
    } else {
        console.log("C√°c ph·∫ßn t·ª≠ DOM ƒë√£ ƒë∆∞·ª£c t√¨m th·∫•y:", {
            characterContainer: !!characterContainer,
            relationshipContainer: !!relationshipContainer,
            pronounContainer: !!pronounContainer,
            contextInput: !!contextInput,
            genreInput: !!genreInput,
            styleInput: !!styleInput,
            requirementsInput: !!requirementsInput,
            sourceTextInput: !!sourceTextInput,
            googleApiKeyInput: !!googleApiKeyInput
        });
        
        // T·∫£i d·ªØ li·ªáu t·ª´ localStorage n·∫øu c√≥
        const savedSettings = localStorage.getItem('dich-ai-settings');
        if (savedSettings) {
            try {
                const jsonData = JSON.parse(savedSettings);
                loadDataFromJson(jsonData);
                console.log("ƒê√£ t·∫£i c√†i ƒë·∫∑t t·ª´ localStorage");
            } catch (error) {
                console.error("L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ localStorage:", error);
            }
        }
    }
    
    // If there's no character yet, add an initial one
    if (characterContainer.children.length === 0) {
        addCharacter();
    }
    
    // Functions
    function addCharacter() {
        const newCharacter = characterTemplate.content.cloneNode(true);
        characterContainer.appendChild(newCharacter);
        
        // Add event listener to the remove button
        const removeBtn = characterContainer.querySelector('.character-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            this.closest('.character-entry').remove();
            updateCharactersList();
            markAsChanged();
        });
        
        // Add event listener to input for updating characters list
        const nameInput = characterContainer.querySelector('.character-entry:last-child .character-name');
        nameInput.addEventListener('input', function() {
            updateCharactersList();
            markAsChanged();
        });
        
        updateCharactersList();
        markAsChanged();
    }
    
    function addRelationship() {
        const newRelationship = relationshipTemplate.content.cloneNode(true);
        relationshipContainer.appendChild(newRelationship);
        
        // Add event listener to the remove button
        const removeBtn = relationshipContainer.querySelector('.relationship-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            this.closest('.relationship-entry').remove();
            markAsChanged();
        });
        
        // Add event listener to input for auto saving
        const descInput = relationshipContainer.querySelector('.relationship-entry:last-child .relationship-description');
        descInput.addEventListener('input', function() {
            markAsChanged();
        });
        
        markAsChanged();
    }
    
    function addPronoun() {
        const newPronoun = pronounTemplate.content.cloneNode(true);
        pronounContainer.appendChild(newPronoun);
        
        // Populate selects with character names
        const fromSelect = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-from');
        const toSelect = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-to');
        const valueInput = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-value');
        const selfValueInput = pronounContainer.querySelector('.pronoun-entry:last-child .self-pronoun-value');
        
        populateCharacterSelect(fromSelect);
        populateCharacterSelect(toSelect);
        
        // Add event listeners for selects to prevent duplicates
        fromSelect.addEventListener('change', function() {
            updateAvailableToCharacters(this.closest('.pronoun-entry'));
            markAsChanged();
        });
        
        toSelect.addEventListener('change', function() {
            // Check if this is a valid combination
            const fromValue = this.closest('.pronoun-entry').querySelector('.pronoun-from').value;
            const toValue = this.value;
            
            if (fromValue === toValue) {
                alert('Kh√¥ng th·ªÉ thi·∫øt l·∫≠p X∆ØNG h√¥ v·ªõi ch√≠nh m√¨nh!');
                this.selectedIndex = 0;
                return;
            }
            
            const pairKey = `${fromValue}-${toValue}`;
            if (existingPronounPairs.has(pairKey) && !this.dataset.originalPair) {
                alert('X∆ØNG h√¥ gi·ªØa hai nh√¢n v·∫≠t n√†y ƒë√£ t·ªìn t·∫°i!');
                this.selectedIndex = 0;
                return;
            }
            
            markAsChanged();
        });
        
        // Add event listeners for input fields to auto save
        valueInput.addEventListener('input', function() {
            markAsChanged();
        });
        selfValueInput.addEventListener('input', function() {
            markAsChanged();
        });
        
        // Add event listener to the remove button
        const removeBtn = pronounContainer.querySelector('.pronoun-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            const entry = this.closest('.pronoun-entry');
            const fromValue = entry.querySelector('.pronoun-from').value;
            const toValue = entry.querySelector('.pronoun-to').value;
            
            // Remove from existing pairs
            existingPronounPairs.delete(`${fromValue}-${toValue}`);
            
            entry.remove();
            updatePronounPairs();
            markAsChanged();
        });
        
        // Trigger initial validation
        updateAvailableToCharacters(pronounContainer.querySelector('.pronoun-entry:last-child'));
        
        // Save after adding
        markAsChanged();
    }
    
    function updateAvailableToCharacters(entryElement) {
        const fromSelect = entryElement.querySelector('.pronoun-from');
        const toSelect = entryElement.querySelector('.pronoun-to');
        const selectedFrom = fromSelect.value;
        
        // Store current selection
        const currentTo = toSelect.value;
        
        // Clear existing options
        toSelect.innerHTML = '';
        
        // Add options excluding the selected "from" character
        characters.forEach(character => {
            // Skip if it's the same character
            if (character === selectedFrom) return;
            
            // Skip if this pair already exists elsewhere
            const pairKey = `${selectedFrom}-${character}`;
            if (existingPronounPairs.has(pairKey) && 
                (!toSelect.dataset.originalPair || 
                 toSelect.dataset.originalPair !== pairKey)) {
                return;
            }
            
            const option = document.createElement('option');
            option.value = character;
            option.textContent = character;
            toSelect.appendChild(option);
        });
        
        // Add empty option at the beginning
        const emptyOption = document.createElement('option');
        emptyOption.value = '';
        emptyOption.textContent = '-- Ch·ªçn nh√¢n v·∫≠t --';
        toSelect.insertBefore(emptyOption, toSelect.firstChild);
        
        // Restore selection if still available
        if (currentTo && Array.from(toSelect.options).some(opt => opt.value === currentTo)) {
            toSelect.value = currentTo;
        } else {
            toSelect.selectedIndex = 0;
        }
    }
    
    function updateCharactersList() {
        characters = [];
        document.querySelectorAll('.character-name').forEach(input => {
            if (input.value.trim() !== '') {
                characters.push(input.value.trim());
            }
        });
        
        console.log("Character list updated:", characters);
        
        // Update all pronoun selects
        document.querySelectorAll('.pronoun-from').forEach(select => {
            const currentValue = select.value;
            const entryElement = select.closest('.pronoun-entry');
            
            populateCharacterSelect(select);
            select.value = currentValue;
            
            // Update "to" selects based on new character list
            updateAvailableToCharacters(entryElement);
        });
        
        // Update character selects in the table
        updateTableCharacterSelects();
        
        updatePronounPairs();
        markAsChanged();
    }
    
    function updatePronounPairs() {
        // Clear and rebuild existing pairs
        existingPronounPairs.clear();
        
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const fromValue = entry.querySelector('.pronoun-from').value;
            const toValue = entry.querySelector('.pronoun-to').value;
            
            if (fromValue && toValue) {
                const pairKey = `${fromValue}-${toValue}`;
                existingPronounPairs.add(pairKey);
                
                // Store original pair for this entry
                entry.querySelector('.pronoun-to').dataset.originalPair = pairKey;
            }
        });
    }
    
    function populateCharacterSelect(select) {
        const currentValue = select.value;
        select.innerHTML = '';
        
        characters.forEach(character => {
            const option = document.createElement('option');
            option.value = character;
            option.textContent = character;
            select.appendChild(option);
        });
        
        // Add empty option at the beginning
        const emptyOption = document.createElement('option');
        emptyOption.value = '';
        emptyOption.textContent = '-- Ch·ªçn nh√¢n v·∫≠t --';
        select.insertBefore(emptyOption, select.firstChild);
        
        // Restore previous selection if possible
        if (currentValue && Array.from(select.options).some(opt => opt.value === currentValue)) {
            select.value = currentValue;
        } else {
            select.selectedIndex = 0;
        }
    }
    
    async function translateText() {
        const originalText = getOriginalText();
        if (!originalText.trim()) {
            displayErrorMessage('Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ d·ªãch.');
            return;
        }
        const model = "google/gemini-2.5-pro";
        const apiKey = googleApiKeyInput && googleApiKeyInput.value ? googleApiKeyInput.value : '';
        if (!apiKey) {
            displayErrorMessage('Vui l√≤ng nh·∫≠p API key c·ªßa Google AI Studio.');
            return;
        }
        const prompt = buildTranslationPrompt();
        
        // Hi·ªÉn th·ªã ti·∫øn tr√¨nh
        const progressElement = document.createElement('div');
        progressElement.className = 'translation-progress';
        progressElement.innerHTML = `
            <div class="progress-step step-active">B∆∞·ªõc 1: D·ªãch ban ƒë·∫ßu</div>
            <div class="progress-step">B∆∞·ªõc 2: Trau chu·ªët b·∫£n d·ªãch</div>
        `;
        translationResult.innerHTML = '';
        translationResult.appendChild(progressElement);

        isLoading = true;
        updateButtonState();

        // B·∫Øt ƒë·∫ßu ƒëo th·ªùi gian x·ª≠ l√Ω
        const startTime = new Date();

        // B∆∞·ªõc 1: D·ªãch ban ƒë·∫ßu
        callGoogleAPI(apiKey, prompt, createTranslationSystemPrompt())
            .then(response => {
                if (progressElement.parentNode === translationResult) {
                    progressElement.children[0].classList.remove('step-active');
                    progressElement.children[0].classList.add('step-completed');
                    progressElement.children[1].classList.add('step-active');
                }
                
                // S·ª≠ d·ª•ng h√†m stripMarkdownOnly ƒë·ªÉ gi·ªØ th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
                const initialTranslation = stripMarkdownOnly(response);
                
                // Thay th·∫ø "c√¢u c·∫ßn d·ªãch" th√†nh "c√¢u c·∫ßn trau chu·ªët" trong b·∫£n trau chu·ªët 
                const formattedInitialTranslation = initialTranslation.replace(/c√¢u c·∫ßn d·ªãch:/gi, "c√¢u c·∫ßn trau chu·ªët:");
                
                // B∆∞·ªõc 2: Trau chu·ªët b·∫£n d·ªãch
                const refinementPrompt = buildRefinementPrompt(formattedInitialTranslation, extractPromptInfo());
                
                return callGoogleAPI(apiKey, refinementPrompt, createTranslationSystemPrompt());
            })
            .then(refinedTranslation => {
                // T√≠nh th·ªùi gian x·ª≠ l√Ω
                const endTime = new Date();
                const processingTime = (endTime - startTime) / 1000; // ƒê·ªïi sang gi√¢y
                
                // L∆∞u l·∫°i k·∫øt qu·∫£ ch∆∞a x·ª≠ l√Ω ƒë·ªÉ xu·∫•t v·ªõi t√™n nh√¢n v·∫≠t
                originalRefinedTranslation = refinedTranslation;
                
                // Lo·∫°i b·ªè m·ªçi ƒë·ªãnh d·∫°ng Markdown v√† th√¥ng tin nh√¢n v·∫≠t, bi·ªÉu hi·ªán ·ªü k·∫øt qu·∫£ cu·ªëi c√πng
                const finalTranslation = stripMarkdown(refinedTranslation);
                
                translationResult.innerHTML = '';
                translationResult.appendChild(document.createTextNode(finalTranslation));
                
                // C·∫≠p nh·∫≠t c√°c √¥ b·∫£n d·ªãch t·ª´ k·∫øt qu·∫£ d·ªãch
                updateTranslationCellsFromResult(originalRefinedTranslation);
                
                // Hi·ªÉn th·ªã n√∫t trau chu·ªët l·∫ßn n·ªØa khi c√≥ k·∫øt qu·∫£ d·ªãch
                document.getElementById('refine-again-controls').style.display = 'flex';
                // Hi·ªÉn th·ªã n√∫t xu·∫•t k·∫øt qu·∫£ k√®m t√™n nh√¢n v·∫≠t
                document.getElementById('export-with-character-controls').style.display = 'flex';
                
                isLoading = false;
                updateButtonState();
                
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                showToast('ƒê√£ d·ªãch vƒÉn b·∫£n th√†nh c√¥ng!', 'success');
                
                // G·ª≠i th√¥ng b√°o k·∫øt qu·∫£ ƒë·∫øn Discord
                if (window.analytics) {
                    window.analytics.ensureIpThenSend({
                        embeds: [{
                            title: '‚úÖ Ho√†n th√†nh d·ªãch vƒÉn b·∫£n',
                            fields: [
                                {
                                    name: 'Session ID',
                                    value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                                },
                                {
                                    name: 'IP',
                                    value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                                },
                                {
                                    name: 'Tr·∫°ng th√°i',
                                    value: 'Ho√†n th√†nh'
                                },
                                {
                                    name: 'Model AI',
                                    value: model
                                },
                                {
                                    name: 'Th·ªùi gian x·ª≠ l√Ω',
                                    value: `${processingTime.toFixed(2)} gi√¢y`
                                },
                                {
                                    name: 'ƒê·ªô d√†i vƒÉn b·∫£n g·ªëc',
                                    value: `${originalText.length} k√Ω t·ª±`
                                },
                                {
                                    name: 'ƒê·ªô d√†i k·∫øt qu·∫£',
                                    value: `${finalTranslation.length} k√Ω t·ª±`
                                },
                                {
                                    name: 'Xem tr∆∞·ªõc k·∫øt qu·∫£',
                                    value: finalTranslation.substring(0, 100) + (finalTranslation.length > 100 ? '...' : '')
                                },
                                {
                                    name: 'Th·ªùi gian ho√†n th√†nh',
                                    value: endTime.toLocaleString('vi-VN')
                                }
                            ],
                            color: 0xF1C40F
                        }]
                    });
                }
            })
            .catch(error => {
                displayErrorMessage('L·ªói d·ªãch vƒÉn b·∫£n: ' + error.message);
                isLoading = false;
                updateButtonState();
                
                // G·ª≠i th√¥ng b√°o l·ªói ƒë·∫øn Discord
                if (window.analytics) {
                    window.analytics.ensureIpThenSend({
                        embeds: [{
                            title: '‚ùå L·ªói d·ªãch vƒÉn b·∫£n',
                            fields: [
                                {
                                    name: 'Session ID',
                                    value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                                },
                                {
                                    name: 'IP',
                                    value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                                },
                                {
                                    name: 'Tr·∫°ng th√°i',
                                    value: 'Th·∫•t b·∫°i'
                                },
                                {
                                    name: 'Model AI',
                                    value: model
                                },
                                {
                                    name: 'L·ªói',
                                    value: error.message
                                },
                                {
                                    name: 'Th·ªùi gian',
                                    value: new Date().toLocaleString('vi-VN')
                                }
                            ],
                            color: 0xE74C3C
                        }]
                    });
                }
            });
    }
    
    // H√†m tr√≠ch xu·∫•t th√¥ng tin t·ª´ prompt ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i trong b∆∞·ªõc trau chu·ªët
    function extractPromptInfo() {
        // Thu th·∫≠p th√¥ng tin v·ªÅ X∆ØNG h√¥
        const pronounInfo = [];
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const from = entry.querySelector('.pronoun-from').value;
            const to = entry.querySelector('.pronoun-to').value;
            const value = entry.querySelector('.pronoun-value').value;
            const selfValue = entry.querySelector('.self-pronoun-value').value;
            
            if (from && to && value) {
                pronounInfo.push({
                    from: from,
                    to: to,
                    value: value,
                    selfValue: selfValue
                });
            }
        });
        
        // Thu th·∫≠p th√¥ng tin v·ªÅ c√°c d√≤ng "gi·ªØ nguy√™n"
        const keepOriginalLines = [];
        document.querySelectorAll('#text-table-body tr').forEach((row, index) => {
            const expressionSelect = row.querySelector('.expression-select');
            const textCell = row.querySelector('td:nth-child(5)'); // C·ªôt vƒÉn b·∫£n v·∫´n l√† c·ªôt th·ª© 5
            
            const expression = expressionSelect.value;
            const text = textCell.getAttribute('data-original-text');
            
            if (expression === 'Gi·ªØ nguy√™n') {
                keepOriginalLines.push({
                    index: index + 1,
                    text: text
                });
            }
        });
        
        // Thu th·∫≠p th√¥ng tin v·ªÅ m·ªëi quan h·ªá nh√¢n v·∫≠t
        const relationships = [];
        document.querySelectorAll('.relationship-description').forEach(input => {
            if (input.value.trim() !== '') {
                relationships.push(input.value.trim());
            }
        });
        
        return {
            pronouns: pronounInfo,
            keepOriginalLines: keepOriginalLines,
            relationships: relationships,
            genre: genreInput.value.trim(),
            style: styleInput.value.trim()
        };
    }
    
    // H√†m t·∫°o prompt cho vi·ªác trau chu·ªët b·∫£n d·ªãch
    function buildRefinementPrompt(firstTranslation, promptInfo) {
        let prompt = "D∆∞·ªõi ƒë√¢y l√† b·∫£n d·ªãch c·ªßa m·ªôt vƒÉn b·∫£n. H√£y trau chu·ªët l·∫°i b·∫£n d·ªãch n√†y ƒë·ªÉ c√≥ vƒÉn phong ·ªïn h∆°n, hay h∆°n, m∆∞·ª£t nh∆∞ ƒë·ªëi tho·∫°i ngo√†i ƒë·ªùi, nh∆∞ng kh√¥ng ƒë∆∞·ª£c th√™m b·ªõt, ph·∫£i ƒë√∫ng √Ω nghƒ©a c√¢u vƒÉn v√† PH·∫¢I GI·ªÆ NGUY√äN X∆ØNG H√î theo y√™u c·∫ßu. L∆ØU √ù: VI·ªÜC GI·ªÆ NGUY√äN X∆ØNG H√î L√Ä QUAN TR·ªåNG NH·∫§T, KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI D∆Ø·ªöI B·∫§T K·ª≤ H√åNH TH·ª®C N√ÄO.\n\n";
        
        prompt += "X∆ØNG H√î GI·ªÆA C√ÅC NH√ÇN V·∫¨T (PH·∫¢I TU√ÇN THEO NGHI√äM NG·∫∂T - ƒê√ÇY L√Ä Y√äU C·∫¶U QUAN TR·ªåNG NH·∫§T):\n";
        promptInfo.pronouns.forEach(item => {
            prompt += `- ${item.from}: g·ªçi ${item.to} l√† "${item.value}"`;
            if (item.selfValue) {
                prompt += `, X∆ØNG b·∫£n th√¢n l√† "${item.selfValue}"`;
            }
            prompt += '\n';
        });
        
        if (promptInfo.relationships.length > 0) {
            prompt += "\nM·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC NH√ÇN V·∫¨T:\n";
            promptInfo.relationships.forEach(rel => {
                prompt += `- ${rel}\n`;
            });
        }
        
        prompt += "\nY√äU C·∫¶U B·∫ÆT BU·ªòC PH·∫¢I TU√ÇN TH·ª¶:\n";
        prompt += "- Trau chu·ªët vƒÉn phong ƒë·ªÉ ·ªïn h∆°n\n";
        prompt += "- PH·∫¢I GI·ªÆ NGUY√äN T·∫§T C·∫¢ X∆ØNG H√î gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n - ƒê√ÇY L√Ä Y√äU C·∫¶U QUAN TR·ªåNG NH·∫§T\n";
        prompt += "- Gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "- Kh√¥ng s·ª≠ d·ª•ng Markdown, tr·∫£ v·ªÅ vƒÉn b·∫£n thu·∫ßn t√∫y\n";
        prompt += "- Kh√¥ng th√™m b·∫•t k·ª≥ th√¥ng tin m·ªõi n√†o\n";
        prompt += "- V√î C√ôNG QUAN TR·ªåNG: PH·∫¢I GI·ªÆ NGUY√äN ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' (bao g·ªìm c·∫£ ph·∫ßn 'ƒëang n√≥i v·ªõi: W' n·∫øu c√≥) ·ªü m·ªói d√≤ng trong QU√Å TR√åNH trau chu·ªët, nh∆∞ng KH√îNG ƒë∆∞a th√¥ng tin n√†y v√†o k·∫øt qu·∫£ cu·ªëi c√πng\n";
        
        // Th√™m vƒÉn phong n·∫øu c√≥
        if (promptInfo.style) {
            prompt += `- √Åp d·ª•ng vƒÉn phong: ${promptInfo.style}\n`;
        }
        
        // Th√™m th·ªÉ lo·∫°i n·∫øu c√≥
        if (promptInfo.genre) {
            prompt += `- Ph√π h·ª£p v·ªõi th·ªÉ lo·∫°i: ${promptInfo.genre}\n`;
        }
        
        // Th√™m th√¥ng tin v·ªÅ c√°c d√≤ng c·∫ßn gi·ªØ nguy√™n
        if (promptInfo.keepOriginalLines.length > 0) {
            prompt += "\nC√ÅC D√íNG VƒÇN B·∫¢N C·∫¶N GI·ªÆ NGUY√äN (KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI):\n";
            promptInfo.keepOriginalLines.forEach(line => {
                prompt += `D√≤ng ${line.index}: ${line.text}\n`;
            });
            prompt += "Nh·ªØng d√≤ng tr√™n PH·∫¢I ƒë∆∞·ª£c gi·ªØ nguy√™n trong b·∫£n d·ªãch cu·ªëi c√πng, KH√îNG ƒê∆Ø·ª¢C D·ªäCH c√°c d√≤ng n√†y.\n";
        }
        
        prompt += "\nB·∫¢N D·ªäCH C·∫¶N TRAU CHU·ªêT:\n\n";
        prompt += firstTranslation;
        
        prompt += "\n\nC√ÅCH TR·∫¢ L·ªúI Y√äU C·∫¶U: Sau khi trau chu·ªët, h√£y ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ trau chu·ªët THEO ƒê√öNG ƒê·ªäNH D·∫†NG CHU·∫®N SAU:\n";
        prompt += "1. M·ªói d√≤ng ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' (bao g·ªìm c·∫£ ph·∫ßn 'ƒëang n√≥i v·ªõi: W' n·∫øu c√≥)\n";
        prompt += "2. TUY·ªÜT ƒê·ªêI KH√îNG th√™m m√¥ t·∫£, gi·∫£i th√≠ch ho·∫∑c b·∫•t k·ª≥ ph·∫ßn gi·ªõi thi·ªáu/k·∫øt lu·∫≠n n√†o\n";
        prompt += "3. Kh√¥ng th√™m b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng Markdown n√†o\n";
        prompt += "4. Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng vƒÉn b·∫£n thu·∫ßn (plain text)\n\n";
        
        prompt += "NH·∫ÆC L·∫†I C√ÅC QUY T·∫ÆC TRAU CHU·ªêT (ƒê·ªåC K·ª∏ V√Ä TU√ÇN TH·ª¶):\n";
        prompt += "1. PH·∫¢I gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "2. PH·∫¢I s·ª≠ d·ª•ng CH√çNH X√ÅC X∆ØNG h√¥ gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n - ƒê√ÇY L√Ä QUAN TR·ªåNG NH·∫§T\n";
        prompt += "3. PH·∫¢I gi·ªØ nguy√™n nh·ªØng d√≤ng ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh l√† 'gi·ªØ nguy√™n'\n";
        prompt += "4. PH·∫¢I gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' (bao g·ªìm c·∫£ ph·∫ßn 'ƒëang n√≥i v·ªõi: W' n·∫øu c√≥) ·ªü m·ªói d√≤ng trong k·∫øt qu·∫£ trau chu·ªët\n";
        prompt += "5. KH√îNG ƒë∆∞·ª£c th√™m ph·∫ßn gi·ªõi thi·ªáu ho·∫∑c k·∫øt lu·∫≠n n√†o v√†o k·∫øt qu·∫£";
        
        return prompt;
    }
    
    // H√†m ch·ªâ b·ªè ƒë·ªãnh d·∫°ng Markdown, gi·ªØ nguy√™n th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
    function stripMarkdownOnly(text) {
        if (!text) return '';
        
        // Ch·ªâ b·ªè c√°c d·∫•u hi·ªáu ƒë·ªãnh d·∫°ng ph·ªï bi·∫øn c·ªßa Markdown
        text = text
            // B·ªè c√°c ti√™u ƒë·ªÅ
            .replace(/^#+\s+/gm, '')
            // B·ªè ƒë·ªãnh d·∫°ng in ƒë·∫≠m
            .replace(/\*\*(.*?)\*\*/g, '$1')
            .replace(/__(.*?)__/g, '$1')
            // B·ªè ƒë·ªãnh d·∫°ng in nghi√™ng
            .replace(/\*(.*?)\*/g, '$1')
            .replace(/_(.*?)_/g, '$1')
            // B·ªè ƒë·ªãnh d·∫°ng blockquote
            .replace(/^>\s+/gm, '')
            // B·ªè ƒë·ªãnh d·∫°ng danh s√°ch
            .replace(/^[\*\-+]\s+/gm, '')
            .replace(/^\d+\.\s+/gm, '')
            // B·ªè backticks cho code
            .replace(/`([^`]+)`/g, '$1')
            .replace(/```[\s\S]*?```/g, '')
            // B·ªè ƒë∆∞·ªùng k·∫ª ngang
            .replace(/^[\-=_]{3,}\s*$/gm, '')
            // B·ªè li√™n k·∫øt
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1')
            // B·ªè h√¨nh ·∫£nh
            .replace(/!\[([^\]]+)\]\(([^)]+)\)/g, '');
            
        return text;
    }
    
    // H√†m b·ªè ƒë·ªãnh d·∫°ng Markdown v√† th√¥ng tin nh√¢n v·∫≠t/bi·ªÉu hi·ªán trong vƒÉn b·∫£n
    function stripMarkdown(text) {
        if (!text) return '';
        
        // Lo·∫°i b·ªè c√°c ph·∫ßn th√¥ng tin v·ªÅ nh√¢n v·∫≠t, bi·ªÉu hi·ªán v√† c√¢u c·∫ßn trau chu·ªët
        text = text
            // Lo·∫°i b·ªè c·∫£ d√≤ng n·∫øu n√≥ b·∫Øt ƒë·∫ßu v·ªõi "Nh√¢n v·∫≠t:" v√† k·∫øt th√∫c v·ªõi "c√¢u c·∫ßn trau chu·ªët:"
            .replace(/Nh√¢n v·∫≠t:.*?Bi·ªÉu hi·ªán\/d·∫°ng tho·∫°i:.*?c√¢u c·∫ßn trau chu·ªët:[\s]*/gi, '')
            // Th√™m pattern ƒë·ªÉ x·ª≠ l√Ω ƒë·ªãnh d·∫°ng c√≥ "ƒëang n√≥i v·ªõi ai"
            .replace(/Nh√¢n v·∫≠t:.*?ƒëang n√≥i v·ªõi:.*?Bi·ªÉu hi·ªán\/d·∫°ng tho·∫°i:.*?c√¢u c·∫ßn trau chu·ªët:[\s]*/gi, '')
            // Lo·∫°i b·ªè t·ª´ng ph·∫ßn ri√™ng l·∫ª ƒë·ªÉ ƒë·∫£m b·∫£o x·ª≠ l√Ω tri·ªát ƒë·ªÉ
            .replace(/Nh√¢n v·∫≠t:[\s\S]*?(,\s+|,)/gi, '')
            .replace(/ƒëang n√≥i v·ªõi:[\s\S]*?(,\s+|,)/gi, '') 
            .replace(/Bi·ªÉu hi·ªán\/d·∫°ng tho·∫°i:[\s\S]*?(,\s+|,)/gi, '')
            .replace(/[cC]√¢u c·∫ßn (d·ªãch|trau chu·ªët):[\s]*/gi, '');
        
        // B·ªè c√°c d·∫•u hi·ªáu ƒë·ªãnh d·∫°ng ph·ªï bi·∫øn c·ªßa Markdown
        text = text
            // B·ªè c√°c ti√™u ƒë·ªÅ
            .replace(/^#+\s+/gm, '')
            // B·ªè ƒë·ªãnh d·∫°ng in ƒë·∫≠m
            .replace(/\*\*(.*?)\*\*/g, '$1')
            .replace(/__(.*?)__/g, '$1')
            // B·ªè ƒë·ªãnh d·∫°ng in nghi√™ng
            .replace(/\*(.*?)\*/g, '$1')
            .replace(/_(.*?)_/g, '$1')
            // B·ªè ƒë·ªãnh d·∫°ng blockquote
            .replace(/^>\s+/gm, '')
            // B·ªè ƒë·ªãnh d·∫°ng danh s√°ch
            .replace(/^[\*\-+]\s+/gm, '')
            .replace(/^\d+\.\s+/gm, '')
            // B·ªè backticks cho code
            .replace(/`([^`]+)`/g, '$1')
            .replace(/```[\s\S]*?```/g, '')
            // B·ªè ƒë∆∞·ªùng k·∫ª ngang
            .replace(/^[\-=_]{3,}\s*$/gm, '')
            // B·ªè li√™n k·∫øt
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1')
            // B·ªè h√¨nh ·∫£nh
            .replace(/!\[([^\]]+)\]\(([^)]+)\)/g, '');
            
        // Lo·∫°i b·ªè d√≤ng tr·ªëng d∆∞ th·ª´a
        text = text
            .replace(/\n{3,}/g, '\n\n') // Thay th·∫ø 3+ d√≤ng tr·ªëng th√†nh 2 d√≤ng
            .trim();
            
        return text;
    }
    
    function buildTranslationPrompt() {
        let prompt = "B·∫°n l√† m·ªôt d·ªãch gi·∫£ chuy√™n nghi·ªáp, ƒë√£ c√≥ h∆°n 20 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c d·ªãch truy·ªán, v√† c√≤n l√† 1 ti·ªÉu thuy·∫øt gia, nh√† nghi√™n c·ª©u vƒÉn h·ªçc, nh√† ng√¥n ng·ªØ h·ªçc c√≥ kinh nghi·ªám h∆°n 20 nƒÉm trong ngh·ªÅ, gi·ªù h√£y d·ªãch ch∆∞∆°ng truy·ªán sau t·ª´ ng√¥n ng·ªØ g·ªëc sang ti·∫øng Vi·ªát. L∆ØU √ù QUAN TR·ªåNG: B·∫Øt bu·ªôc PH·∫¢I gi·ªØ nguy√™n t·∫•t c·∫£ X∆ØNG h√¥, b·∫Øt bu·ªôc PH·∫¢I tu√¢n th·ªß c√°c y√™u c·∫ßu v√† vƒÉn phong v√† c√°c l∆∞u √Ω quan tr·ªçng.\n\n";
        
        // Add character pronouns
        prompt += "X∆ØNG H√î GI·ªÆA C√ÅC NH√ÇN V·∫¨T (ph·∫£i tu√¢n theo nghi√™m ng·∫∑t):\n";
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const from = entry.querySelector('.pronoun-from').value;
            const to = entry.querySelector('.pronoun-to').value;
            const value = entry.querySelector('.pronoun-value').value;
            const selfValue = entry.querySelector('.self-pronoun-value').value;
            
            if (from && to && value) {
                prompt += `- ${from}: g·ªçi ${to} l√† "${value}"`;
                
                if (selfValue) {
                    prompt += `, X∆ØNG b·∫£n th√¢n l√† "${selfValue}"`;
                }
                
                prompt += '\n';
            }
        });
        
        // Add th·ªÉ lo·∫°i if provided
        if (genreInput.value.trim()) {
            prompt += `\nTh·ªÉ lo·∫°i: ${genreInput.value.trim()}\n`;
        }
        
        // Add vƒÉn phong if provided
        if (styleInput.value.trim()) {
            prompt += `\nVƒÉn phong: ${styleInput.value.trim()}\n`;
        }
        
        // Add relationships
        prompt += "\nM·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC NH√ÇN V·∫¨T:\n";
        document.querySelectorAll('.relationship-description').forEach(input => {
            if (input.value.trim() !== '') {
                prompt += `- ${input.value.trim()}\n`;
            }
        });
        
        // Add context
        if (contextInput.value.trim() !== '') {
            prompt += "\nB·ªêI C·∫¢NH:\n" + contextInput.value.trim() + "\n";
        }
        
        // Add translation instructions
        prompt += "\nY√äU C·∫¶U B·∫ÆT BU·ªòC PH·∫¢I TU√ÇN TH·ª¶:\n";
        prompt += "- " + requirementsInput.value.trim() + "\n";
        prompt += "- PH·∫¢I D·ªäCH m·ªôt c√°ch t·ª± nhi√™n, m·∫°ch l·∫°c, ch√≠nh x√°c, ph√π h·ª£p v·ªõi vƒÉn phong ƒë·ªëi tho·∫°i v√† t∆∞·ªùng thu·∫≠t trong truy·ªán tranh hi·ªán ƒë·∫°i, TR√ÅNH L·ªñI L·∫∂P T·ª™ HO√ÄN TO√ÄN, bao g·ªìm:\n";
        prompt += "* Ki·ªÉm tra k·ªπ t·ª´ng c√¢u ƒë·ªÉ tr√°nh s·ª≠ d·ª•ng t·ª´ ho·∫∑c c·ª•m t·ª´ gi·ªëng nhau l·∫∑p l·∫°i kh√¥ng c·∫ßn thi·∫øt.\n";
        prompt += "* S·ª≠ d·ª•ng t·ª´ ƒë·ªìng nghƒ©a h·ª£p l√Ω ƒë·ªÉ tr√°nh tr√πng l·∫∑p trong nh·ªØng d√≤ng g·∫ßn nhau.\n";
        prompt += "* D√πng ƒëa d·∫°ng c·∫•u tr√∫c c√¢u ƒë·ªÉ tr√°nh l·∫∑p v·ªÅ m·∫∑t ng·ªØ ph√°p.\n";
        prompt += "* Kh√¥ng ƒë∆∞·ª£c L·∫∑p t·ª´ gi·ªØa hai c√¢u g·∫ßn nhau.\n";
        prompt += "* Kh√¥ng ƒë∆∞·ª£c L·∫∑p t·ª´ trong c√πng m·ªôt c√¢u.\n";
        prompt += "- D·ªãch ch√≠nh x√°c, gi·ªØ nguy√™n t·∫•t c·∫£ X∆ØNG h√¥ c·ªßa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n\n";
        prompt += "- Gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n nh∆∞ vƒÉn b·∫£n g·ªëc\n";
        prompt += "- Kh√¥ng s·ª≠ d·ª•ng Markdown, tr·∫£ v·ªÅ vƒÉn b·∫£n thu·∫ßn t√∫y\n";
        prompt += "- Ph·∫£i ƒë√∫ng ch√≠nh t·∫£, kh√¥ng ƒë∆∞·ª£c nh·∫ßm sang ng√¥n ng·ªØ kh√°c\n";
        prompt += "- N·∫øu m·ªôt d√≤ng c√≥ Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i l√† \"gi·ªØ nguy√™n\", KH√îNG D·ªäCH d√≤ng ƒë√≥, gi·ªØ nguy√™n vƒÉn b·∫£n g·ªëc\n";
        prompt += "- Sau khi d·ªãch xong, h√£y t·ª± ƒë·ªçc l·∫°i t·ª´ ƒë·∫øn cu·ªëi b·∫£n d·ªãch 1 l·∫ßn n·ªØa r·ªìi t·ª± d·ªãch l·∫°i sao cho chu·∫©n v√† m∆∞·ª£t m√† nh·∫•t, sau ƒë√≥ m·ªõi tr·∫£ l·∫°i k·∫øt qu·∫£, ƒê√ÇY L√Ä ƒêI·ªÄU B·∫ÆT BU·ªòC PH·∫¢I L√ÄM.\n";

        prompt += "- V√î C√ôNG QUAN TR·ªåNG: PH·∫¢I GI·ªÆ NGUY√äN c√°c ph·∫ßn 'Nh√¢n v·∫≠t:' v√† 'Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i:' trong k·∫øt qu·∫£ d·ªãch CH√çNH X√ÅC nh∆∞ ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o: 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn d·ªãch: Z' (bao g·ªìm c·∫£ ph·∫ßn 'ƒëang n√≥i v·ªõi: W' n·∫øu c√≥)\n";
        
        prompt += "\nX·ª¨ L√ù L·ªñI L·∫∂P T·ª™ HO√ÄN TO√ÄN NH∆Ø SAU:\n\n";
        prompt += `1. N·∫øu hai c√¢u g·∫ßn nhau b·ªã l·∫∑p t·ª´ (v√≠ d·ª• "√¥ng ta"):\nThay th·∫ø t·ª´ b·ªã l·∫∑p b·∫±ng ƒë·∫°i t·ª´ ph√π h·ª£p ho·∫∑c mi√™u t·∫£ gi√°n ti·∫øp\nV√≠ d·ª•:\nSai (l·∫∑p t·ª´):\n√îng ta ƒëang l·∫£m nh·∫£m ƒëi·ªÅu g√¨ v·∫≠y?\n√îng ta ƒëi√™n r·ªìi...\n\nƒê√∫ng (lo·∫°i b·ªè l·∫∑p t·ª´):\n\n√îng ta ƒëang l·∫£m nh·∫£m ƒëi·ªÅu g√¨ v·∫≠y?\nƒê√∫ng l√† ƒëi√™n r·ªìi...\n`;
        prompt += `\n2. N·∫øu m·ªôt c√¢u l·∫∑p m·ªôt t·ª´ qu√° nhi·ªÅu l·∫ßn (v√≠ d·ª• "t√¥i"):\nBi·∫øn ƒë·ªïi c·∫•u tr√∫c c√¢u ho·∫∑c thay th·∫ø t·ª´ b·∫±ng c√°ch r√∫t g·ªçn h·ª£p l√Ω\nV√≠ d·ª•:\nSai (l·∫∑p t·ª´ qu√° nhi·ªÅu):\nT√¥i kh√¥ng mu·ªën gia ƒë√¨nh ph√°t hi·ªán ra vi·ªác t√¥i ƒëang t√¨m ki·∫øm Haru... √Ω t√¥i l√†... Nagi.\n\nƒê√∫ng (lo·∫°i b·ªè l·∫∑p t·ª´):\n\nT√¥i kh√¥ng mu·ªën gia ƒë√¨nh bi·∫øt chuy·ªán m√¨nh ƒëang t√¨m ki·∫øm Haru... √Ω l√†... Nagi.\n`;

        // Add text lines with character and expression information
        prompt += "\nVƒÇN B·∫¢N C·∫¶N D·ªäCH:\n\n";
        
        // Get all rows from the table
        const rows = document.querySelectorAll('#text-table-body tr');
        
        if (rows.length > 0) {
            rows.forEach((row, index) => {
                const characterSelect = row.querySelector('.character-select');
                const talkingToSelect = row.querySelector('.talking-to-select');
                const expressionSelect = row.querySelector('.expression-select');
                const textCell = row.querySelector('td:nth-child(5)'); // C·ªôt vƒÉn b·∫£n v·∫´n l√† c·ªôt th·ª© 5
                
                const character = characterSelect.value !== 'none' ? characterSelect.value : '';
                const talkingTo = talkingToSelect.value !== 'none' ? talkingToSelect.value : '';
                const expression = expressionSelect.value !== 'none' ? expressionSelect.value : '';
                const text = textCell.getAttribute('data-original-text');
                
                // ƒê·ªãnh d·∫°ng c√¢u theo y√™u c·∫ßu
                let line = '';
                
                // Th√™m th√¥ng tin nh√¢n v·∫≠t n·∫øu c√≥
                if (character) {
                    line += `Nh√¢n v·∫≠t: ${character}, `;
                    
                    // Th√™m th√¥ng tin "ƒëang n√≥i v·ªõi ai" n·∫øu c√≥ v√† kh√¥ng ph·∫£i ch√≠nh nh√¢n v·∫≠t ƒë√≥
                    if (talkingTo && character !== talkingTo) {
                        line += `ƒëang n√≥i v·ªõi: ${talkingTo}, `;
                    }
                }
                
                // Th√™m th√¥ng tin bi·ªÉu hi·ªán n·∫øu c√≥
                if (expression) {
                    line += `Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: ${expression}, `;
                }
                
                // Th√™m c√¢u c·∫ßn d·ªãch
                line += `c√¢u c·∫ßn d·ªãch: ${text}`;
                
                prompt += line + '\n';
            });
        } else {
            // Fallback to source text if no table rows
            prompt += sourceTextInput.value.trim();
        }
        
        // Final reminder about pronouns and formatting
        prompt += "\n\nNH·∫ÆC L·∫†I C√ÅC Y√äU C·∫¶U QUAN TR·ªåNG (PH·∫¢I TU√ÇN TH·ª¶):\n";
        prompt += "1. PH·∫¢I gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "2. B·∫ÆT BU·ªòC PH·∫¢I s·ª≠ d·ª•ng ch√≠nh x√°c X∆ØNG h√¥ gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n. Tuy·ªát ƒë·ªëi kh√¥ng thay ƒë·ªïi.\n";
        prompt += "3. B·∫ÆT BU·ªòC PH·∫¢I gi·ªØ nguy√™n nh·ªØng d√≤ng c√≥ Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i l√† \"gi·ªØ nguy√™n\"\n";
        prompt += "4. PH·∫¢I GI·ªÆ NGUY√äN ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn d·ªãch: Z' ·ªü m·ªói d√≤ng trong k·∫øt qu·∫£ d·ªãch (bao g·ªìm c·∫£ ph·∫ßn 'ƒëang n√≥i v·ªõi: W' n·∫øu c√≥)\n";
        prompt += "5. D·ªãch th·∫≠t ch√≠nh x√°c, m∆∞·ª£t m√†, ƒë√∫ng vƒÉn phong ·ªü ph·∫ßn Y√™u c·∫ßu, ƒë√∫ng c·∫£m x√∫c, tr√°nh l·ªói l·∫∑p t·ª´\n";
        prompt += "6. CH√ö √ù th√¥ng tin 'ƒëang n√≥i v·ªõi ai' ƒë·ªÉ ƒë·ªãnh h∆∞·ªõng ng·ªØ c·∫£nh v√† ph√π h·ª£p v·ªõi giao ti·∫øp trong c√¢u tho·∫°i\n";
        
        return prompt;
    }
    
    // C√°c h√†m li√™n quan ƒë·∫øn l∆∞u v√† t·∫£i c√†i ƒë·∫∑t
    function saveSettings() {
        try {
            const data = collectAllData();
            localStorage.setItem('translationAppSettings', JSON.stringify(data));
            showToast('ƒê√£ l∆∞u c√†i ƒë·∫∑t th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error("L·ªói khi l∆∞u c√†i ƒë·∫∑t:", error);
            showToast('L·ªói khi l∆∞u c√†i ƒë·∫∑t!', 'error');
        }
    }
    
    function loadSettings() {
        try {
            const savedData = localStorage.getItem('translationAppSettings');
            if (!savedData) {
                showToast('Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t ƒë√£ l∆∞u!', 'warning');
                return;
            }
            
            const data = JSON.parse(savedData);
            loadDataFromJson(data);
            showToast('ƒê√£ t·∫£i c√†i ƒë·∫∑t th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error("L·ªói khi t·∫£i c√†i ƒë·∫∑t:", error);
            showToast('L·ªói khi t·∫£i c√†i ƒë·∫∑t!', 'error');
        }
    }
    
    function exportToJson() {
        try {
            // Thu th·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu
            const settingsData = collectAllData();
            
            // Chuy·ªÉn ƒë·ªïi th√†nh chu·ªói JSON
            const jsonString = JSON.stringify(settingsData, null, 2);
            
            // T·∫°o Blob t·ª´ chu·ªói JSON
            const blob = new Blob([jsonString], { type: 'application/json' });
            
            // T·∫°o URL cho Blob
            const url = URL.createObjectURL(blob);
            
            // T·∫°o ph·∫ßn t·ª≠ a ƒë·ªÉ t·∫£i xu·ªëng
            const a = document.createElement('a');
            a.href = url;
            a.download = 'dich-ai-settings.json';
            document.body.appendChild(a);
            a.click();
            
            // D·ªçn d·∫πp
            setTimeout(function() {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 0);
            
            console.log("ƒê√£ t·∫£i file c√†i ƒë·∫∑t th√†nh c√¥ng");
        } catch (error) {
            console.error("L·ªói khi t·∫£i file c√†i ƒë·∫∑t:", error);
            showToast("C√≥ l·ªói khi t·∫£i file c√†i ƒë·∫∑t: " + error.message, 'error');
        }
    }
    
    // H√†m xu·∫•t k·∫øt qu·∫£ d·ªãch k√®m t√™n nh√¢n v·∫≠t
    function exportWithCharacterNames() {
        try {
            // Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ d·ªãch ban ƒë·∫ßu kh√¥ng
            if (!originalRefinedTranslation) {
                showToast('Kh√¥ng c√≥ k·∫øt qu·∫£ d·ªãch ƒë·ªÉ xu·∫•t', 'warning');
                return;
            }
            
            // L·∫•y danh s√°ch nh√¢n v·∫≠t ƒë√£ c·∫•u h√¨nh
            const configuredCharacters = [];
            document.querySelectorAll('.character-entry .character-name').forEach(input => {
                if (input.value.trim() !== '') {
                    configuredCharacters.push(input.value.trim());
                }
            });
            
            // M·∫£ng l∆∞u k·∫øt qu·∫£ ƒë√£ ƒë·ªãnh d·∫°ng
            let formattedLines = [];
            
            // T√°ch c√°c d√≤ng t·ª´ k·∫øt qu·∫£ g·ªëc
            const lines = originalRefinedTranslation.split('\n');
            
            // L·∫•y t√™n nh√¢n v·∫≠t cu·ªëi c√πng ƒë∆∞·ª£c s·ª≠ d·ª•ng (cho c√°c d√≤ng kh√¥ng c√≥ nh√¢n v·∫≠t)
            let lastCharacter = configuredCharacters.length > 0 ? configuredCharacters[0] : '';
            
            // X·ª≠ l√Ω t·ª´ng d√≤ng
            lines.forEach((line, index) => {
                line = line.trim();
                if (!line) return;
                
                // Regex ƒë·ªÉ tr√≠ch xu·∫•t t√™n nh√¢n v·∫≠t n·∫øu c√≥ ƒë·ªãnh d·∫°ng chu·∫©n
                const characterRegex = /^Nh√¢n v·∫≠t:\s*([^,:.]+?)(?:,|$)/i;
                const characterMatch = line.match(characterRegex);
                
                // Bi·∫øn ƒë·ªÉ l∆∞u t√™n nh√¢n v·∫≠t v√† c√¢u vƒÉn
                let character = '';
                let sentence = '';
                
                // N·∫øu t√¨m th·∫•y t√™n nh√¢n v·∫≠t r√µ r√†ng
                if (characterMatch && characterMatch[1] && characterMatch[1].trim() !== 'Nh√¢n v·∫≠t') {
                    character = characterMatch[1].trim();
                    // C·∫≠p nh·∫≠t nh√¢n v·∫≠t cu·ªëi c√πng
                    lastCharacter = character;
                    
                    // T√¨m c√¢u vƒÉn t·ª´ line sau khi lo·∫°i b·ªè c√°c th√†nh ph·∫ßn kh√¥ng c·∫ßn thi·∫øt
                    sentence = extractSentenceFromLine(line);
                    
                    // Th√™m v√†o k·∫øt qu·∫£
                    formattedLines.push(character + ': ' + sentence);
                }
                // N·∫øu d√≤ng b·∫Øt ƒë·∫ßu v·ªõi "Nh√¢n v·∫≠t:" nh∆∞ng kh√¥ng c√≥ t√™n nh√¢n v·∫≠t r√µ r√†ng
                else if (line.startsWith('Nh√¢n v·∫≠t:')) {
                    // Tr√≠ch xu·∫•t c√¢u vƒÉn
                    sentence = extractSentenceFromLine(line);
                    
                    // T√¨m nh√¢n v·∫≠t t·ª´ c√°c d√≤ng tr∆∞·ªõc ƒë√≥
                    if (lastCharacter) {
                        formattedLines.push(lastCharacter + ': ' + sentence);
                    } else {
                        // N·∫øu kh√¥ng c√≥ nh√¢n v·∫≠t, ch·ªâ gi·ªØ c√¢u vƒÉn
                        formattedLines.push(sentence);
                    }
                }
                // N·∫øu d√≤ng b·∫Øt ƒë·∫ßu v·ªõi "Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i:" ho·∫∑c "Tr·∫°ng th√°i:"
                else if (line.startsWith('Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i:') || line.startsWith('Tr·∫°ng th√°i:')) {
                    // Tr√≠ch xu·∫•t c√¢u vƒÉn sau c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt
                    sentence = extractSentenceFromLine(line);
                    
                    // Th√™m v√†o k·∫øt qu·∫£ kh√¥ng k√®m nh√¢n v·∫≠t
                    formattedLines.push(sentence);
                }
                // C√°c d√≤ng kh√°c
                else {
                    formattedLines.push(line);
                }
            });
            
            // Lo·∫°i b·ªè c√°c d√≤ng tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá
            formattedLines = formattedLines.filter(line => line && line.trim());
            
            // N·ªëi c√°c d√≤ng th√†nh m·ªôt chu·ªói
            const formattedContent = formattedLines.join('\n');
            
            // T·∫°o Blob t·ª´ chu·ªói
            const blob = new Blob([formattedContent], { type: 'text/plain;charset=utf-8' });
            
            // T·∫°o URL cho Blob
            const url = URL.createObjectURL(blob);
            
            // T·∫°o ph·∫ßn t·ª≠ a ƒë·ªÉ t·∫£i xu·ªëng
            const a = document.createElement('a');
            a.href = url;
            a.download = 'ket-qua-dich-voi-nhan-vat.txt';
            document.body.appendChild(a);
            a.click();
            
            // D·ªçn d·∫πp
            setTimeout(function() {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 0);
            
            showToast('ƒê√£ xu·∫•t k·∫øt qu·∫£ d·ªãch k√®m t√™n nh√¢n v·∫≠t th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error('L·ªói khi xu·∫•t k·∫øt qu·∫£ d·ªãch:', error);
            showToast('C√≥ l·ªói khi xu·∫•t k·∫øt qu·∫£ d·ªãch: ' + error.message, 'error');
        }
    }
    
    // H√†m h·ªó tr·ª£ ƒë·ªÉ tr√≠ch xu·∫•t c√¢u vƒÉn t·ª´ m·ªôt d√≤ng
    function extractSentenceFromLine(line) {
        // Lo·∫°i b·ªè ph·∫ßn "Nh√¢n v·∫≠t:" n·∫øu c√≥
        if (line.startsWith('Nh√¢n v·∫≠t:')) {
            line = line.substring('Nh√¢n v·∫≠t:'.length).trim();
        }
        
        // Danh s√°ch c√°c m·∫´u c·∫ßn lo·∫°i b·ªè
        const patternsToRemove = [
            /^[^,:.]+?(?:,|$)/i,  // T√™n nh√¢n v·∫≠t ƒë·∫ßu d√≤ng k√®m d·∫•u ph·∫©y
            /ƒëang n√≥i v·ªõi:[^,:.]+?(?:,|$)/i,  // "ƒëang n√≥i v·ªõi: X,"
            /Bi·ªÉu hi·ªán\/d·∫°ng tho·∫°i:[^,:.]+?(?:,|$)/i,  // "Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: X,"
            /Tr·∫°ng th√°i:[^,:.]+?(?:,|$)/i,  // "Tr·∫°ng th√°i: X,"
            /c√¢u c·∫ßn trau chu·ªët:\s*/i,  // "c√¢u c·∫ßn trau chu·ªët:"
            /c√¢u c·∫ßn d·ªãch:\s*/i  // "c√¢u c·∫ßn d·ªãch:"
        ];
        
        // √Åp d·ª•ng c√°c m·∫´u ƒë·ªÉ lo·∫°i b·ªè
        for (const pattern of patternsToRemove) {
            line = line.replace(pattern, '');
        }
        
        return line.trim();
    }
    
    // Ch·ª©c nƒÉng nh·∫≠p d·ªØ li·ªáu t·ª´ file c√†i ƒë·∫∑t
    function importFromJson(event) {
        try {
            const file = event.target.files[0];
            if (!file) {
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const jsonData = JSON.parse(e.target.result);
                    loadDataFromJson(jsonData);
                    console.log("ƒê√£ nh·∫≠p c√†i ƒë·∫∑t t·ª´ file th√†nh c√¥ng");
                    showToast("ƒê√£ nh·∫≠p c√†i ƒë·∫∑t t·ª´ file th√†nh c√¥ng!", 'success');
                } catch (parseError) {
                    console.error("L·ªói khi ph√¢n t√≠ch file c√†i ƒë·∫∑t:", parseError);
                    showToast("File c√†i ƒë·∫∑t kh√¥ng h·ª£p l·ªá: " + parseError.message, 'error');
                }
            };
            
            reader.readAsText(file);
            
            // Reset input ƒë·ªÉ c√≥ th·ªÉ ch·ªçn l·∫°i c√πng m·ªôt file
            event.target.value = "";
        } catch (error) {
            console.error("L·ªói khi ƒë·ªçc file c√†i ƒë·∫∑t:", error);
            showToast("C√≥ l·ªói khi ƒë·ªçc file c√†i ƒë·∫∑t: " + error.message, 'error');
        }
    }
    
    // Thu th·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÉ l∆∞u
    function collectAllData() {
        // Thu th·∫≠p d·ªØ li·ªáu nh√¢n v·∫≠t
        const characters = [];
        document.querySelectorAll('.character-entry .character-name').forEach(input => {
            if (input.value.trim() !== '') {
                characters.push(input.value.trim());
            }
        });
        
        // Thu th·∫≠p d·ªØ li·ªáu m·ªëi quan h·ªá
        const relationships = [];
        document.querySelectorAll('.relationship-entry .relationship-description').forEach(input => {
            if (input.value.trim() !== '') {
                relationships.push(input.value.trim());
            }
        });
        
        // Thu th·∫≠p d·ªØ li·ªáu X∆ØNG h√¥
        const pronouns = [];
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const from = entry.querySelector('.pronoun-from').value;
            const to = entry.querySelector('.pronoun-to').value;
            const value = entry.querySelector('.pronoun-value').value;
            const selfValue = entry.querySelector('.self-pronoun-value').value;
            
            if (from && to && value && from !== 'none' && to !== 'none') {
                pronouns.push({
                    from: from,
                    to: to,
                    value: value,
                    selfValue: selfValue
                });
            }
        });
        
        // Thu th·∫≠p d·ªØ li·ªáu bi·ªÉu hi·ªán
        const expressions = [];
        document.querySelectorAll('.expression-entry .expression-value').forEach(input => {
            if (input.value.trim() !== '') {
                expressions.push(input.value.trim());
            }
        });
        
        // Thu th·∫≠p d·ªØ li·ªáu t·ª´ b·∫£ng vƒÉn b·∫£n
        const textTableData = [];
        document.querySelectorAll('#text-table-body tr').forEach(row => {
            const characterSelect = row.querySelector('.character-select');
            const talkingToSelect = row.querySelector('.talking-to-select');
            const expressionSelect = row.querySelector('.expression-select');
            const textCell = row.querySelector('td:nth-child(5)');
            const translationCell = row.querySelector('.translation-cell');
            
            if (textCell) {
                textTableData.push({
                    character: characterSelect ? characterSelect.value : 'none',
                    talkingTo: talkingToSelect ? talkingToSelect.value : 'none',
                    expression: expressionSelect ? expressionSelect.value : 'none',
                    text: textCell.getAttribute('data-original-text') || textCell.textContent,
                    translation: translationCell ? (translationCell.getAttribute('data-translation') || '') : ''
                });
            }
        });
        
        // Thu th·∫≠p c√°c c√†i ƒë·∫∑t kh√°c
        const context = contextInput.value.trim();
        const genre = genreInput.value.trim();
        const style = styleInput.value.trim();
        const requirements = requirementsInput.value.trim();
        const sourceText = sourceTextInput.value.trim();
        const googleApiKey = document.getElementById('google-api-key').value;
        
        // T·∫°o ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu
        const data = {
            // T√™n tr∆∞·ªùng m·ªõi (phi√™n b·∫£n 1.3)
            characters: characters,
            relationships: relationships,
            pronouns: pronouns,
            expressions: expressions,
            textTableData: textTableData,
            context: context,
            genre: genre,
            style: style,
            requirements: requirements,
            sourceText: sourceText,
            googleApiKey: googleApiKey,
            version: '1.4' // C·∫≠p nh·∫≠t phi√™n b·∫£n ƒë·ªÉ h·ªó tr·ª£ c·ªôt b·∫£n d·ªãch
        };
        
        return data;
    }
    
    // T·∫£i d·ªØ li·ªáu t·ª´ JSON v√†o ·ª©ng d·ª•ng
    function loadDataFromJson(jsonData) {
        try {
            // X√≥a s·∫°ch d·ªØ li·ªáu hi·ªán t·∫°i
            characterContainer.innerHTML = '';
            relationshipContainer.innerHTML = '';
            pronounContainer.innerHTML = '';
            expressionsContainer.innerHTML = '';
            textTableBody.innerHTML = '';
            textLines = [];
            
            // T·∫£i d·ªØ li·ªáu nh√¢n v·∫≠t
            if (jsonData.characters && Array.isArray(jsonData.characters)) {
                jsonData.characters.forEach(character => {
                    addCharacter();
                    const lastEntry = characterContainer.querySelector('.character-entry:last-child .character-name');
                    if (lastEntry) {
                        lastEntry.value = character;
                    }
                });
            }
            
            // T·∫£i d·ªØ li·ªáu m·ªëi quan h·ªá
            if (jsonData.relationships && Array.isArray(jsonData.relationships)) {
                jsonData.relationships.forEach(relationship => {
                    addRelationship();
                    const lastEntry = relationshipContainer.querySelector('.relationship-entry:last-child .relationship-description');
                    if (lastEntry) {
                        lastEntry.value = relationship;
                    }
                });
            }
            
            // C·∫≠p nh·∫≠t danh s√°ch nh√¢n v·∫≠t tr∆∞·ªõc khi t·∫£i X∆ØNG h√¥
            updateCharactersList();
            
            // T·∫£i d·ªØ li·ªáu X∆ØNG h√¥
            if (jsonData.pronouns && Array.isArray(jsonData.pronouns)) {
                jsonData.pronouns.forEach(pronoun => {
                    if (pronoun.from && pronoun.to && pronoun.value) {
                        addPronounWithData(pronoun.from, pronoun.to, pronoun.value, pronoun.selfValue || '');
                    }
                });
            }
            
            // T·∫£i d·ªØ li·ªáu bi·ªÉu hi·ªán
            if (jsonData.expressions && Array.isArray(jsonData.expressions)) {
                jsonData.expressions.forEach(expression => {
                    addExpression();
                    const lastEntry = expressionsContainer.querySelector('.expression-entry:last-child .expression-value');
                    if (lastEntry) {
                        lastEntry.value = expression;
                    }
                });
            }
            
            // C·∫≠p nh·∫≠t danh s√°ch bi·ªÉu hi·ªán
            updateExpressionsData();
            
            // T·∫£i d·ªØ li·ªáu t·ª´ b·∫£ng vƒÉn b·∫£n
            // Ki·ªÉm tra phi√™n b·∫£n m·ªõi tr∆∞·ªõc (textTableData), n·∫øu kh√¥ng c√≥ th√¨ d√πng phi√™n b·∫£n c≈© (textTable)
            let tableDataSource = jsonData.textTableData || jsonData.textTable;
            
            if (tableDataSource && Array.isArray(tableDataSource)) {
                tableDataSource.forEach(rowData => {
                    // T·∫°o d√≤ng m·ªõi
                    textLines.push(rowData.text);
                });
                
                // T·∫°o b·∫£ng
                createTextTable(textLines);
                
                // C·∫≠p nh·∫≠t d·ªØ li·ªáu cho t·ª´ng d√≤ng
                const rows = document.querySelectorAll('#text-table-body tr');
                tableDataSource.forEach((rowData, index) => {
                    if (index < rows.length) {
                        const row = rows[index];
                        const characterSelect = row.querySelector('.character-select');
                        const talkingToSelect = row.querySelector('.talking-to-select');
                        const expressionSelect = row.querySelector('.expression-select');
                        const translationCell = row.querySelector('.translation-cell');
                        
                        if (characterSelect && rowData.character) {
                            characterSelect.value = rowData.character;
                            
                            // Trigger change event ƒë·ªÉ c·∫≠p nh·∫≠t talkingTo select
                            const event = new Event('change');
                            characterSelect.dispatchEvent(event);
                        }
                        
                        // Ch·ªâ c·∫≠p nh·∫≠t talkingTo n·∫øu d·ªØ li·ªáu c√≥ (phi√™n b·∫£n 1.3)
                        if (talkingToSelect && rowData.talkingTo) {
                            // C·∫ßn ƒë·∫£m b·∫£o r·∫±ng gi√° tr·ªã talkingTo kh√¥ng ph·∫£i l√† gi√° tr·ªã c·ªßa character
                            const characterValue = characterSelect ? characterSelect.value : 'none';
                            if (rowData.talkingTo !== characterValue) {
                                talkingToSelect.value = rowData.talkingTo;
                            }
                        }
                        
                        if (expressionSelect && rowData.expression) {
                            expressionSelect.value = rowData.expression;
                        }
                        
                        // T·∫£i d·ªØ li·ªáu b·∫£n d·ªãch n·∫øu c√≥
                        if (translationCell && rowData.translation) {
                            translationCell.setAttribute('data-translation', rowData.translation);
                            
                            // Hi·ªÉn th·ªã b·∫£n d·ªãch (truncate n·∫øu qu√° d√†i)
                            const displayText = rowData.translation.length > 100 ? 
                                rowData.translation.substring(0, 100) + '...' : rowData.translation;
                            
                            // Gi·ªØ l·∫°i n√∫t d·ªãch l·∫°i
                            const buttonContainer = translationCell.querySelector('.translate-row-container');
                            translationCell.textContent = displayText;
                            if (buttonContainer) {
                                translationCell.appendChild(buttonContainer);
                            }
                        }
                    }
                });
            }
            
            // T·∫£i c√°c c√†i ƒë·∫∑t kh√°c
            if (jsonData.context !== undefined) contextInput.value = jsonData.context;
            if (jsonData.genre !== undefined) genreInput.value = jsonData.genre;
            if (jsonData.style !== undefined) styleInput.value = jsonData.style;
            if (jsonData.requirements !== undefined) requirementsInput.value = jsonData.requirements;
            if (jsonData.sourceText !== undefined) sourceTextInput.value = jsonData.sourceText;
            
            // T·∫£i API key Google
            const googleKey = jsonData.googleApiKey;
            if (googleKey !== undefined) document.getElementById('google-api-key').value = googleKey;
            
            // ƒê√°nh d·∫•u l√† ƒë√£ thay ƒë·ªïi
            hasUnsavedChanges = true;
            
            // C·∫≠p nh·∫≠t k·∫øt qu·∫£ d·ªãch t·ªïng h·ª£p n·∫øu c√≥ b·∫£n d·ªãch trong c√°c √¥
            updateFinalTranslationResult();
        } catch (error) {
            console.error("L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ JSON:", error);
            showToast('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + error.message, 'error');
        }
    }
    
    function addPronounWithData(from, to, value, selfValue) {
        const newPronoun = pronounTemplate.content.cloneNode(true);
        pronounContainer.appendChild(newPronoun);
        
        const fromSelect = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-from');
        const toSelect = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-to');
        const valueInput = pronounContainer.querySelector('.pronoun-entry:last-child .pronoun-value');
        const selfValueInput = pronounContainer.querySelector('.pronoun-entry:last-child .self-pronoun-value');
        
        populateCharacterSelect(fromSelect);
        populateCharacterSelect(toSelect);
        
        // ƒê·∫∑t gi√° tr·ªã
        fromSelect.value = from;
        toSelect.value = to;
        valueInput.value = value;
        selfValueInput.value = selfValue;
        
        // L∆∞u c·∫∑p g·ªëc
        const pairKey = `${from}-${to}`;
        toSelect.dataset.originalPair = pairKey;
        existingPronounPairs.add(pairKey);
        
        // Add event listeners
        fromSelect.addEventListener('change', function() {
            // X√≥a c·∫∑p g·ªëc kh·ªèi danh s√°ch hi·ªán c√≥
            const originalPair = toSelect.dataset.originalPair;
            if (originalPair) {
                existingPronounPairs.delete(originalPair);
                delete toSelect.dataset.originalPair;
            }
            
            updateAvailableToCharacters(this.closest('.pronoun-entry'));
            markAsChanged();
        });
        
        toSelect.addEventListener('change', function() {
            // X√≥a c·∫∑p g·ªëc kh·ªèi danh s√°ch hi·ªán c√≥
            const originalPair = this.dataset.originalPair;
            if (originalPair) {
                existingPronounPairs.delete(originalPair);
                delete this.dataset.originalPair;
            }
            
            // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
            const fromValue = this.closest('.pronoun-entry').querySelector('.pronoun-from').value;
            const toValue = this.value;
            
            if (fromValue === toValue) {
                alert('Kh√¥ng th·ªÉ thi·∫øt l·∫≠p X∆ØNG h√¥ v·ªõi ch√≠nh m√¨nh!');
                this.selectedIndex = 0;
                return;
            }
            
            const pairKey = `${fromValue}-${toValue}`;
            if (existingPronounPairs.has(pairKey)) {
                alert('X∆ØNG h√¥ gi·ªØa hai nh√¢n v·∫≠t n√†y ƒë√£ t·ªìn t·∫°i!');
                this.selectedIndex = 0;
                return;
            }
            
            // Th√™m c·∫∑p m·ªõi
            if (fromValue && toValue) {
                existingPronounPairs.add(pairKey);
                this.dataset.originalPair = pairKey;
            }
            
            markAsChanged();
        });
        
        // Value input listeners
        valueInput.addEventListener('change', markAsChanged);
        selfValueInput.addEventListener('change', markAsChanged);
        
        // Remove button
        const removeBtn = pronounContainer.querySelector('.pronoun-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            const entry = this.closest('.pronoun-entry');
            const fromValue = entry.querySelector('.pronoun-from').value;
            const toValue = entry.querySelector('.pronoun-to').value;
            
            // Remove from existing pairs
            existingPronounPairs.delete(`${fromValue}-${toValue}`);
            
            entry.remove();
            updatePronounPairs();
            markAsChanged();
        });
    }
    
    function addExpression() {
        const newExpression = expressionTemplate.content.cloneNode(true);
        expressionsContainer.appendChild(newExpression);
        
        // Add event listener to the remove button
        const removeBtn = expressionsContainer.querySelector('.expression-entry:last-child .remove-btn');
        removeBtn.addEventListener('click', function() {
            this.closest('.expression-entry').remove();
            updateExpressionsData();
            markAsChanged();
        });
        
        // Add event listener to input for updating expressions list
        const valueInput = expressionsContainer.querySelector('.expression-entry:last-child .expression-value');
        valueInput.addEventListener('input', function() {
            updateExpressionsData();
            markAsChanged();
        });
        
        updateExpressionsData();
        markAsChanged();
    }
    
    function updateExpressionsData() {
        expressions = [];
        document.querySelectorAll('.expression-value').forEach(input => {
            if (input.value.trim() !== '') {
                expressions.push(input.value.trim());
            }
        });
        
        console.log("Expressions list updated:", expressions);
        
        // Update all expression selects in the table
        updateTableExpressionSelects();
    }
    
    function updateTableExpressionSelects() {
        document.querySelectorAll('.text-table select.expression-select').forEach(select => {
            const currentValue = select.value;
            
            // Clear select
            select.innerHTML = '';
            
            // Add default "None" option
            const noneOption = document.createElement('option');
            noneOption.value = 'none';
            noneOption.textContent = 'Kh√¥ng c√≥';
            select.appendChild(noneOption);
            
            // Add options for each expression
            expressions.forEach(expression => {
                const option = document.createElement('option');
                option.value = expression;
                option.textContent = expression;
                select.appendChild(option);
            });
            
            // Restore selection if possible
            if (currentValue && Array.from(select.options).some(opt => opt.value === currentValue)) {
                select.value = currentValue;
            } else {
                select.selectedIndex = 0;
            }
        });
    }
    
    function handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            const content = e.target.result;
            textLines = content.split(/\r?\n/);
            
            // Filter out empty lines
            textLines = textLines.filter(line => line.trim() !== '');
            
            // Update hidden text area with the full content
            sourceTextInput.value = content;
            
            // Create table rows for each line
            createTextTable(textLines);
            
            console.log(`Loaded ${textLines.length} lines of text`);
            markAsChanged();
        };
        
        reader.readAsText(file);
    }
    
    // H√†m t·∫°o d√≤ng m·ªõi cho b·∫£ng vƒÉn b·∫£n, th√™m c√°c n√∫t di chuy·ªÉn l√™n/xu·ªëng
    function createTextTable(lines) {
        // Clear existing rows
        textTableBody.innerHTML = '';
        
        // Create a row for each line
        lines.forEach((line, index) => {
            const row = document.createElement('tr');
            
            // Line number cell
            const numberCell = document.createElement('td');
            numberCell.textContent = index + 1;
            numberCell.className = 'line-number';
            row.appendChild(numberCell);
            
            // Character select cell
            const characterCell = document.createElement('td');
            const characterSelect = document.createElement('select');
            characterSelect.className = 'character-select';
            
            // Add default "None" option
            const noneOption = document.createElement('option');
            noneOption.value = 'none';
            noneOption.textContent = 'Kh√¥ng c√≥';
            characterSelect.appendChild(noneOption);
            
            // Add option for each character
            characters.forEach(character => {
                const option = document.createElement('option');
                option.value = character;
                option.textContent = character;
                characterSelect.appendChild(option);
            });
            
            characterSelect.addEventListener('change', function() {
                markAsChanged();
            });
            
            // T·∫°o container cho select v√† n√∫t copy
            const characterContainer = document.createElement('div');
            characterContainer.className = 'select-with-copy';
            characterContainer.appendChild(characterSelect);
            
            // Th√™m n√∫t copy cho character n·∫øu kh√¥ng ph·∫£i d√≤ng ƒë·∫ßu ti√™n
            if (index > 0) {
                const copyCharacterBtn = document.createElement('button');
                copyCharacterBtn.type = 'button';
                copyCharacterBtn.className = 'mini-copy-btn';
                copyCharacterBtn.innerHTML = '<i class="fas fa-copy"></i>';
                copyCharacterBtn.title = 'Copy nh√¢n v·∫≠t t·ª´ d√≤ng tr√™n';
                copyCharacterBtn.addEventListener('click', function() {
                    copyIndividualField(row, 'character');
                });
                characterContainer.appendChild(copyCharacterBtn);
            }
            
            characterCell.appendChild(characterContainer);
            row.appendChild(characterCell);
            
            // Talking to who select cell
            const talkingToCell = document.createElement('td');
            const talkingToSelect = document.createElement('select');
            talkingToSelect.className = 'talking-to-select';
            
            // Add default "None" option
            const noneTalkingOption = document.createElement('option');
            noneTalkingOption.value = 'none';
            noneTalkingOption.textContent = 'Kh√¥ng c√≥';
            talkingToSelect.appendChild(noneTalkingOption);
            
            // Add option for each character
            characters.forEach(character => {
                const option = document.createElement('option');
                option.value = character;
                option.textContent = character;
                talkingToSelect.appendChild(option);
            });
            
            talkingToSelect.addEventListener('change', function() {
                markAsChanged();
            });
            
            // Add change event to character select to update the talkingTo select
            characterSelect.addEventListener('change', function() {
                // If character is selected, make sure it can't talk to itself
                if (this.value !== 'none') {
                    // Refresh options
                    while (talkingToSelect.options.length > 1) {
                        talkingToSelect.remove(1);
                    }
                    // Add all characters except the selected one
                    characters.forEach(character => {
                        if (character !== this.value) {
                            const option = document.createElement('option');
                            option.value = character;
                            option.textContent = character;
                            talkingToSelect.appendChild(option);
                        }
                    });
                } else {
                    // If no character selected, reset talking-to select
                    talkingToSelect.value = 'none';
                }
            });
            
            // T·∫°o container cho talking-to select v√† n√∫t copy
            const talkingToContainer = document.createElement('div');
            talkingToContainer.className = 'select-with-copy';
            talkingToContainer.appendChild(talkingToSelect);
            
            // Th√™m n√∫t copy cho talking-to n·∫øu kh√¥ng ph·∫£i d√≤ng ƒë·∫ßu ti√™n
            if (index > 0) {
                const copyTalkingToBtn = document.createElement('button');
                copyTalkingToBtn.type = 'button';
                copyTalkingToBtn.className = 'mini-copy-btn';
                copyTalkingToBtn.innerHTML = '<i class="fas fa-copy"></i>';
                copyTalkingToBtn.title = 'Copy ƒëang n√≥i v·ªõi ai t·ª´ d√≤ng tr√™n';
                copyTalkingToBtn.addEventListener('click', function() {
                    copyIndividualField(row, 'talkingTo');
                });
                talkingToContainer.appendChild(copyTalkingToBtn);
            }
            
            talkingToCell.appendChild(talkingToContainer);
            row.appendChild(talkingToCell);
            
            // Expression select cell
            const expressionCell = document.createElement('td');
            const expressionSelect = document.createElement('select');
            expressionSelect.className = 'expression-select';
            
            // Add default "None" option
            const noneExpressionOption = document.createElement('option');
            noneExpressionOption.value = 'none';
            noneExpressionOption.textContent = 'Kh√¥ng c√≥';
            expressionSelect.appendChild(noneExpressionOption);
            
            // Add option for each expression
            expressions.forEach(expression => {
                const option = document.createElement('option');
                option.value = expression;
                option.textContent = expression;
                expressionSelect.appendChild(option);
            });
            
            expressionSelect.addEventListener('change', function() {
                markAsChanged();
            });
            
            // T·∫°o container cho expression select v√† n√∫t copy
            const expressionContainer = document.createElement('div');
            expressionContainer.className = 'select-with-copy';
            expressionContainer.appendChild(expressionSelect);
            
            // Th√™m n√∫t copy cho expression n·∫øu kh√¥ng ph·∫£i d√≤ng ƒë·∫ßu ti√™n
            if (index > 0) {
                const copyExpressionBtn = document.createElement('button');
                copyExpressionBtn.type = 'button';
                copyExpressionBtn.className = 'mini-copy-btn';
                copyExpressionBtn.innerHTML = '<i class="fas fa-copy"></i>';
                copyExpressionBtn.title = 'Copy bi·ªÉu hi·ªán t·ª´ d√≤ng tr√™n';
                copyExpressionBtn.addEventListener('click', function() {
                    copyIndividualField(row, 'expression');
                });
                expressionContainer.appendChild(copyExpressionBtn);
            }
            
            expressionCell.appendChild(expressionContainer);
            row.appendChild(expressionCell);
            
            // Text cell
            const textCell = document.createElement('td');
            textCell.textContent = line;
            textCell.setAttribute('data-original-text', line);
            textCell.className = 'editable-text';
            textCell.title = 'Nh·∫•p ƒë√∫p ƒë·ªÉ ch·ªânh s·ª≠a vƒÉn b·∫£n';
            
            // Th√™m s·ª± ki·ªán double-click ƒë·ªÉ ch·ªânh s·ª≠a
            textCell.addEventListener('dblclick', function() {
                makeTextEditable(this);
            });
            row.appendChild(textCell);
            
            // Translation cell - C·ªôt b·∫£n d·ªãch m·ªõi
            const translationCell = document.createElement('td');
            translationCell.className = 'translation-cell editable-text';
            translationCell.textContent = '';
            translationCell.setAttribute('data-translation', '');
            translationCell.title = 'Nh·∫•p ƒë√∫p ƒë·ªÉ ch·ªânh s·ª≠a b·∫£n d·ªãch';
            translationCell.style.minWidth = '200px';
            translationCell.style.maxWidth = '300px';
            translationCell.style.wordWrap = 'break-word';
            
            // Th√™m s·ª± ki·ªán double-click ƒë·ªÉ ch·ªânh s·ª≠a b·∫£n d·ªãch
            translationCell.addEventListener('dblclick', function() {
                makeTranslationEditable(this);
            });
            
            // Th√™m s·ª± ki·ªán ƒë·ªÉ t·ª± ƒë·ªông update k·∫øt qu·∫£ d·ªãch khi c√≥ thay ƒë·ªïi
            translationCell.addEventListener('input', function() {
                updateFinalTranslationResult();
                markAsChanged();
            });
            
            // T·∫°o container cho n√∫t d·ªãch l·∫°i
            const translateButtonContainer = document.createElement('div');
            translateButtonContainer.className = 'translate-row-container';
            translateButtonContainer.style.marginTop = '5px';
            
            // Th√™m n√∫t d·ªãch l·∫°i cho t·ª´ng h√†ng
            const retranslateBtn = document.createElement('button');
            retranslateBtn.type = 'button';
            retranslateBtn.className = 'btn btn-small retranslate-row-btn';
            retranslateBtn.innerHTML = '<i class="fas fa-language"></i> D·ªãch l·∫°i';
            retranslateBtn.title = 'D·ªãch l·∫°i h√†ng n√†y';
            retranslateBtn.style.fontSize = '12px';
            retranslateBtn.style.padding = '3px 8px';
            retranslateBtn.addEventListener('click', function() {
                retranslateRow(row, index);
            });
            translateButtonContainer.appendChild(retranslateBtn);
            
            translationCell.appendChild(translateButtonContainer);
            row.appendChild(translationCell);
            
            // Th√™m n√∫t h√†nh ƒë·ªông di chuy·ªÉn v√† x√≥a
            const actionSpan = document.createElement('span');
            actionSpan.className = 'table-row-actions';
            
            // N√∫t copy t·ª´ d√≤ng tr√™n
            if (index > 0) {
                const copyFromAboveBtn = document.createElement('button');
                copyFromAboveBtn.type = 'button';
                copyFromAboveBtn.className = 'action-btn copy-from-above-btn';
                copyFromAboveBtn.innerHTML = '<i class="fas fa-copy"></i>';
                copyFromAboveBtn.title = 'Copy th√¥ng tin nh√¢n v·∫≠t t·ª´ d√≤ng tr√™n';
                copyFromAboveBtn.addEventListener('click', function() {
                    copyCharacterInfoFromAbove(row);
                });
                actionSpan.appendChild(copyFromAboveBtn);
            }

            // N√∫t copy v√† ƒë·∫£o v·ªã tr√≠ ƒë·ªëi tho·∫°i
            if (index > 0) {
                const swapDialogueBtn = document.createElement('button');
                swapDialogueBtn.type = 'button';
                swapDialogueBtn.className = 'action-btn swap-dialogue-btn';
                swapDialogueBtn.innerHTML = '<i class="fas fa-exchange-alt"></i>';
                swapDialogueBtn.title = 'Copy v√† ƒë·∫£o v·ªã tr√≠ ƒë·ªëi tho·∫°i (A n√≥i v·ªõi B ‚Üí B n√≥i v·ªõi A)';
                swapDialogueBtn.addEventListener('click', function() {
                    copyAndSwapDialogue(row);
                });
                actionSpan.appendChild(swapDialogueBtn);
            }

            // N√∫t di chuy·ªÉn l√™n
            if (index > 0) {
                const moveUpBtn = document.createElement('button');
                moveUpBtn.type = 'button';
                moveUpBtn.className = 'action-btn move-up-btn';
                moveUpBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
                moveUpBtn.title = 'Di chuy·ªÉn l√™n';
                moveUpBtn.addEventListener('click', function() {
                    moveRow(row, 'up');
                });
                actionSpan.appendChild(moveUpBtn);
            }
            
            // N√∫t di chuy·ªÉn xu·ªëng
            if (index < lines.length - 1) {
                const moveDownBtn = document.createElement('button');
                moveDownBtn.type = 'button';
                moveDownBtn.className = 'action-btn move-down-btn';
                moveDownBtn.innerHTML = '<i class="fas fa-arrow-down"></i>';
                moveDownBtn.title = 'Di chuy·ªÉn xu·ªëng';
                moveDownBtn.addEventListener('click', function() {
                    moveRow(row, 'down');
                });
                actionSpan.appendChild(moveDownBtn);
            }
            
            // N√∫t s·ª≠a d√≤ng
            const editBtn = document.createElement('button');
            editBtn.type = 'button';
            editBtn.className = 'action-btn edit-row-btn';
            editBtn.innerHTML = '<i class="fas fa-edit"></i>';
            editBtn.title = 'Ch·ªânh s·ª≠a d√≤ng n√†y';
            editBtn.addEventListener('click', function() {
                makeTextEditable(textCell);
            });
            actionSpan.appendChild(editBtn);
            
            // N√∫t x√≥a d√≤ng
            const deleteBtn = document.createElement('button');
            deleteBtn.type = 'button';
            deleteBtn.className = 'action-btn delete-row-btn';
            deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
            deleteBtn.title = 'X√≥a d√≤ng n√†y';
            deleteBtn.addEventListener('click', function() {
                deleteTextRow(row, index);
            });
            actionSpan.appendChild(deleteBtn);
            
            textCell.appendChild(actionSpan);
            
            // Add row to table body
            textTableBody.appendChild(row);
        });
    }
    
    // H√†m di chuy·ªÉn d√≤ng l√™n/xu·ªëng
    function moveRow(row, direction) {
        const rows = Array.from(textTableBody.querySelectorAll('tr'));
        const currentIndex = rows.indexOf(row);
        
        if (direction === 'up' && currentIndex > 0) {
            // Di chuy·ªÉn l√™n
            const targetIndex = currentIndex - 1;
            
            // Ho√°n ƒë·ªïi v·ªã tr√≠ trong DOM
            textTableBody.insertBefore(row, rows[targetIndex]);
            
            // Ho√°n ƒë·ªïi d·ªØ li·ªáu trong m·∫£ng textLines
            [textLines[targetIndex], textLines[currentIndex]] = [textLines[currentIndex], textLines[targetIndex]];
            
            // C·∫≠p nh·∫≠t l·∫°i s·ªë th·ª© t·ª±
            updateRowNumbers();
            
            // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
            markAsChanged();
        } else if (direction === 'down' && currentIndex < rows.length - 1) {
            // Di chuy·ªÉn xu·ªëng
            const targetIndex = currentIndex + 1;
            
            // Ho√°n ƒë·ªïi v·ªã tr√≠ trong DOM
            if (rows[targetIndex].nextElementSibling) {
                textTableBody.insertBefore(row, rows[targetIndex].nextElementSibling);
            } else {
                textTableBody.appendChild(row);
            }
            
            // Ho√°n ƒë·ªïi d·ªØ li·ªáu trong m·∫£ng textLines
            [textLines[currentIndex], textLines[targetIndex]] = [textLines[targetIndex], textLines[currentIndex]];
            
            // C·∫≠p nh·∫≠t l·∫°i s·ªë th·ª© t·ª±
            updateRowNumbers();
            
            // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
            markAsChanged();
        }
        
        // C·∫≠p nh·∫≠t n√∫t di chuy·ªÉn (l√™n/xu·ªëng) cho t·∫•t c·∫£ c√°c d√≤ng
        updateMoveButtons();
    }
    
    // C·∫≠p nh·∫≠t s·ªë th·ª© t·ª± cho t·∫•t c·∫£ c√°c d√≤ng
    function updateRowNumbers() {
        const rows = textTableBody.querySelectorAll('tr');
        rows.forEach((row, idx) => {
            row.querySelector('.line-number').textContent = idx + 1;
            
            // C·∫≠p nh·∫≠t l·∫°i s·ª± ki·ªán x√≥a v·ªõi index m·ªõi
            const deleteBtn = row.querySelector('.delete-row-btn');
            if (deleteBtn) {
                deleteBtn.onclick = null;
                deleteBtn.addEventListener('click', function() {
                    deleteTextRow(row, idx);
                });
            }
        });
        
        // C·∫≠p nh·∫≠t textarea ch·ª©a to√†n b·ªô n·ªôi dung
        sourceTextInput.value = textLines.join('\n');
    }
    
    // C·∫≠p nh·∫≠t n√∫t di chuy·ªÉn cho t·∫•t c·∫£ c√°c d√≤ng
    function updateMoveButtons() {
        const rows = Array.from(textTableBody.querySelectorAll('tr'));
        
        rows.forEach((row, idx) => {
            const actionsContainer = row.querySelector('.table-row-actions');
            if (!actionsContainer) return;
            
            // X√≥a n√∫t di chuy·ªÉn, copy v√† swap c≈©
            const oldCopyBtn = actionsContainer.querySelector('.copy-from-above-btn');
            const oldSwapBtn = actionsContainer.querySelector('.swap-dialogue-btn');
            const oldMoveUpBtn = actionsContainer.querySelector('.move-up-btn');
            const oldMoveDownBtn = actionsContainer.querySelector('.move-down-btn');
            if (oldCopyBtn) actionsContainer.removeChild(oldCopyBtn);
            if (oldSwapBtn) actionsContainer.removeChild(oldSwapBtn);
            if (oldMoveUpBtn) actionsContainer.removeChild(oldMoveUpBtn);
            if (oldMoveDownBtn) actionsContainer.removeChild(oldMoveDownBtn);
            
            // Th√™m n√∫t copy t·ª´ d√≤ng tr√™n n·∫øu kh√¥ng ph·∫£i d√≤ng ƒë·∫ßu ti√™n
            if (idx > 0) {
                const copyFromAboveBtn = document.createElement('button');
                copyFromAboveBtn.type = 'button';
                copyFromAboveBtn.className = 'action-btn copy-from-above-btn';
                copyFromAboveBtn.innerHTML = '<i class="fas fa-copy"></i>';
                copyFromAboveBtn.title = 'Copy th√¥ng tin nh√¢n v·∫≠t t·ª´ d√≤ng tr√™n';
                copyFromAboveBtn.addEventListener('click', function() {
                    copyCharacterInfoFromAbove(row);
                });
                actionsContainer.insertBefore(copyFromAboveBtn, actionsContainer.firstChild);
            }

            // Th√™m n√∫t copy v√† ƒë·∫£o v·ªã tr√≠ ƒë·ªëi tho·∫°i n·∫øu kh√¥ng ph·∫£i d√≤ng ƒë·∫ßu ti√™n
            if (idx > 0) {
                const swapDialogueBtn = document.createElement('button');
                swapDialogueBtn.type = 'button';
                swapDialogueBtn.className = 'action-btn swap-dialogue-btn';
                swapDialogueBtn.innerHTML = '<i class="fas fa-exchange-alt"></i>';
                swapDialogueBtn.title = 'Copy v√† ƒë·∫£o v·ªã tr√≠ ƒë·ªëi tho·∫°i (A n√≥i v·ªõi B ‚Üí B n√≥i v·ªõi A)';
                swapDialogueBtn.addEventListener('click', function() {
                    copyAndSwapDialogue(row);
                });
                
                // Th√™m sau n√∫t copy
                const copyBtn = actionsContainer.querySelector('.copy-from-above-btn');
                if (copyBtn && copyBtn.nextElementSibling) {
                    actionsContainer.insertBefore(swapDialogueBtn, copyBtn.nextElementSibling);
                } else {
                    actionsContainer.appendChild(swapDialogueBtn);
                }
            }

            // Th√™m n√∫t di chuy·ªÉn l√™n n·∫øu kh√¥ng ph·∫£i d√≤ng ƒë·∫ßu ti√™n
            if (idx > 0) {
                const moveUpBtn = document.createElement('button');
                moveUpBtn.type = 'button';
                moveUpBtn.className = 'action-btn move-up-btn';
                moveUpBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
                moveUpBtn.title = 'Di chuy·ªÉn l√™n';
                moveUpBtn.addEventListener('click', function() {
                    moveRow(row, 'up');
                });
                
                // Th√™m sau n√∫t copy nh∆∞ng tr∆∞·ªõc n√∫t x√≥a
                const copyBtn = actionsContainer.querySelector('.copy-from-above-btn');
                if (copyBtn && copyBtn.nextElementSibling) {
                    actionsContainer.insertBefore(moveUpBtn, copyBtn.nextElementSibling);
                } else {
                    actionsContainer.insertBefore(moveUpBtn, actionsContainer.firstChild);
                }
            }
            
            // Th√™m n√∫t di chuy·ªÉn xu·ªëng n·∫øu kh√¥ng ph·∫£i d√≤ng cu·ªëi c√πng
            if (idx < rows.length - 1) {
                const moveDownBtn = document.createElement('button');
                moveDownBtn.type = 'button';
                moveDownBtn.className = 'action-btn move-down-btn';
                moveDownBtn.innerHTML = '<i class="fas fa-arrow-down"></i>';
                moveDownBtn.title = 'Di chuy·ªÉn xu·ªëng';
                moveDownBtn.addEventListener('click', function() {
                    moveRow(row, 'down');
                });
                
                // Th√™m tr∆∞·ªõc n√∫t x√≥a
                const deleteBtn = actionsContainer.querySelector('.delete-row-btn');
                if (deleteBtn) {
                    actionsContainer.insertBefore(moveDownBtn, deleteBtn);
                } else {
                    actionsContainer.appendChild(moveDownBtn);
                }
            }
        });
    }

    // H√†m copy th√¥ng tin nh√¢n v·∫≠t t·ª´ d√≤ng tr√™n xu·ªëng d√≤ng hi·ªán t·∫°i
    function copyCharacterInfoFromAbove(currentRow) {
        const rows = Array.from(textTableBody.querySelectorAll('tr'));
        const currentIndex = rows.indexOf(currentRow);
        
        if (currentIndex <= 0) {
            alert('Kh√¥ng th·ªÉ copy t·ª´ d√≤ng tr√™n v√¨ ƒë√¢y l√† d√≤ng ƒë·∫ßu ti√™n!');
            return;
        }
        
        const aboveRow = rows[currentIndex - 1];
        
        // L·∫•y th√¥ng tin t·ª´ d√≤ng tr√™n
        const aboveCharacterSelect = aboveRow.querySelector('.character-select');
        const aboveTalkingToSelect = aboveRow.querySelector('.talking-to-select');
        const aboveExpressionSelect = aboveRow.querySelector('.expression-select');
        
        // √Åp d·ª•ng cho d√≤ng hi·ªán t·∫°i
        const currentCharacterSelect = currentRow.querySelector('.character-select');
        const currentTalkingToSelect = currentRow.querySelector('.talking-to-select');
        const currentExpressionSelect = currentRow.querySelector('.expression-select');
        
        if (aboveCharacterSelect && currentCharacterSelect) {
            currentCharacterSelect.value = aboveCharacterSelect.value;
            
            // Trigger change event ƒë·ªÉ c·∫≠p nh·∫≠t talking-to options
            const changeEvent = new Event('change', { bubbles: true });
            currentCharacterSelect.dispatchEvent(changeEvent);
        }
        
        if (aboveTalkingToSelect && currentTalkingToSelect) {
            // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ talking-to select ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ character change event
            setTimeout(() => {
                currentTalkingToSelect.value = aboveTalkingToSelect.value;
            }, 50);
        }
        
        if (aboveExpressionSelect && currentExpressionSelect) {
            currentExpressionSelect.value = aboveExpressionSelect.value;
        }
        
        // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
        markAsChanged();
    }

    // H√†m copy t·ª´ng tr∆∞·ªùng ri√™ng l·∫ª t·ª´ d√≤ng tr√™n
    function copyIndividualField(currentRow, fieldType) {
        const rows = Array.from(textTableBody.querySelectorAll('tr'));
        const currentIndex = rows.indexOf(currentRow);
        
        if (currentIndex <= 0) {
            alert('Kh√¥ng th·ªÉ copy t·ª´ d√≤ng tr√™n v√¨ ƒë√¢y l√† d√≤ng ƒë·∫ßu ti√™n!');
            return;
        }
        
        const aboveRow = rows[currentIndex - 1];
        
        switch (fieldType) {
            case 'character':
                const aboveCharacterSelect = aboveRow.querySelector('.character-select');
                const currentCharacterSelect = currentRow.querySelector('.character-select');
                
                if (aboveCharacterSelect && currentCharacterSelect) {
                    currentCharacterSelect.value = aboveCharacterSelect.value;
                    // Trigger change event ƒë·ªÉ c·∫≠p nh·∫≠t talking-to options
                    const changeEvent = new Event('change', { bubbles: true });
                    currentCharacterSelect.dispatchEvent(changeEvent);
                }
                break;
                
            case 'talkingTo':
                const aboveTalkingToSelect = aboveRow.querySelector('.talking-to-select');
                const currentTalkingToSelect = currentRow.querySelector('.talking-to-select');
                
                if (aboveTalkingToSelect && currentTalkingToSelect) {
                    currentTalkingToSelect.value = aboveTalkingToSelect.value;
                }
                break;
                
            case 'expression':
                const aboveExpressionSelect = aboveRow.querySelector('.expression-select');
                const currentExpressionSelect = currentRow.querySelector('.expression-select');
                
                if (aboveExpressionSelect && currentExpressionSelect) {
                    currentExpressionSelect.value = aboveExpressionSelect.value;
                }
                break;
        }
        
        // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
        markAsChanged();
    }

    // H√†m copy v√† ƒë·∫£o v·ªã tr√≠ ƒë·ªëi tho·∫°i t·ª´ d√≤ng tr√™n
    function copyAndSwapDialogue(currentRow) {
        const rows = Array.from(textTableBody.querySelectorAll('tr'));
        const currentIndex = rows.indexOf(currentRow);
        
        if (currentIndex <= 0) {
            alert('Kh√¥ng th·ªÉ copy t·ª´ d√≤ng tr√™n v√¨ ƒë√¢y l√† d√≤ng ƒë·∫ßu ti√™n!');
            return;
        }
        
        const aboveRow = rows[currentIndex - 1];
        
        // L·∫•y th√¥ng tin t·ª´ d√≤ng tr√™n
        const aboveCharacterSelect = aboveRow.querySelector('.character-select');
        const aboveTalkingToSelect = aboveRow.querySelector('.talking-to-select');
        const aboveExpressionSelect = aboveRow.querySelector('.expression-select');
        
        // L·∫•y element c·ªßa d√≤ng hi·ªán t·∫°i
        const currentCharacterSelect = currentRow.querySelector('.character-select');
        const currentTalkingToSelect = currentRow.querySelector('.talking-to-select');
        const currentExpressionSelect = currentRow.querySelector('.expression-select');
        
        if (aboveCharacterSelect && aboveTalkingToSelect && currentCharacterSelect && currentTalkingToSelect) {
            const aboveCharacter = aboveCharacterSelect.value;
            const aboveTalkingTo = aboveTalkingToSelect.value;
            
            // ƒê·∫£o v·ªã tr√≠: nh√¢n v·∫≠t d√≤ng tr√™n th√†nh "ƒëang n√≥i v·ªõi ai" d√≤ng hi·ªán t·∫°i
            // v√† "ƒëang n√≥i v·ªõi ai" d√≤ng tr√™n th√†nh nh√¢n v·∫≠t d√≤ng hi·ªán t·∫°i
            if (aboveCharacter !== 'none' && aboveTalkingTo !== 'none') {
                // Set nh√¢n v·∫≠t hi·ªán t·∫°i = ƒëang n√≥i v·ªõi ai d√≤ng tr√™n
                currentCharacterSelect.value = aboveTalkingTo;
                
                // Trigger change event ƒë·ªÉ c·∫≠p nh·∫≠t talking-to options
                const changeEvent = new Event('change', { bubbles: true });
                currentCharacterSelect.dispatchEvent(changeEvent);
                
                // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ talking-to select ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                setTimeout(() => {
                    // Set ƒëang n√≥i v·ªõi ai hi·ªán t·∫°i = nh√¢n v·∫≠t d√≤ng tr√™n
                    currentTalkingToSelect.value = aboveCharacter;
                }, 50);
            } else if (aboveCharacter !== 'none' && aboveTalkingTo === 'none') {
                // N·∫øu d√≤ng tr√™n ch·ªâ c√≥ nh√¢n v·∫≠t, kh√¥ng c√≥ ƒë·ªëi t∆∞·ª£ng n√≥i chuy·ªán
                // Th√¨ d√≤ng hi·ªán t·∫°i s·∫Ω n√≥i v·ªõi nh√¢n v·∫≠t ƒë√≥
                currentCharacterSelect.value = 'none';
                
                const changeEvent = new Event('change', { bubbles: true });
                currentCharacterSelect.dispatchEvent(changeEvent);
                
                setTimeout(() => {
                    currentTalkingToSelect.value = aboveCharacter;
                }, 50);
            } else {
                // N·∫øu kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ ƒë·∫£o, ch·ªâ copy b√¨nh th∆∞·ªùng
                currentCharacterSelect.value = aboveCharacterSelect.value;
                
                const changeEvent = new Event('change', { bubbles: true });
                currentCharacterSelect.dispatchEvent(changeEvent);
                
                setTimeout(() => {
                    currentTalkingToSelect.value = aboveTalkingToSelect.value;
                }, 50);
            }
        }
        
        // Copy bi·ªÉu hi·ªán n·∫øu c√≥
        if (aboveExpressionSelect && currentExpressionSelect) {
            currentExpressionSelect.value = aboveExpressionSelect.value;
        }
        
        // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
        markAsChanged();
    }

    // H√†m x√≥a m·ªôt d√≤ng vƒÉn b·∫£n
    function deleteTextRow(row, index) {
        // Ki·ªÉm tra xem n√∫t x√≥a c√≥ ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω kh√¥ng
        if (row.getAttribute('data-deleting') === 'true') {
            return;
        }
        
        // ƒê√°nh d·∫•u ƒëang trong qu√° tr√¨nh x√≥a
        row.setAttribute('data-deleting', 'true');
        
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d√≤ng n√†y kh√¥ng?')) {
            // X√°c ƒë·ªãnh index th·ª±c c·ªßa d√≤ng (v√¨ ph·∫ßn t·ª≠ row c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi v·ªã tr√≠)
            const currentIndex = Array.from(textTableBody.querySelectorAll('tr')).indexOf(row);
            
            // X√≥a d√≤ng kh·ªèi m·∫£ng textLines v·ªõi index ƒë√£ x√°c ƒë·ªãnh l·∫°i
            textLines.splice(currentIndex, 1);
            
            // X√≥a d√≤ng kh·ªèi b·∫£ng
            row.parentNode.removeChild(row);
            
            // C·∫≠p nh·∫≠t l·∫°i s·ªë th·ª© t·ª± c√°c d√≤ng
            const rows = textTableBody.querySelectorAll('tr');
            rows.forEach((row, idx) => {
                row.cells[0].textContent = idx + 1;
                
                // C·∫≠p nh·∫≠t l·∫°i s·ª± ki·ªán x√≥a v·ªõi index m·ªõi
                const deleteBtn = row.querySelector('.delete-row-btn');
                if (deleteBtn) {
                    deleteBtn.onclick = null;
                    deleteBtn.addEventListener('click', function() {
                        deleteTextRow(row, idx);
                    });
                }
            });
            
            // C·∫≠p nh·∫≠t textarea ch·ª©a to√†n b·ªô n·ªôi dung
            sourceTextInput.value = textLines.join('\n');
            
            // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
            markAsChanged();
            
            // Th√¥ng b√°o ƒë√£ x√≥a
            showToast('ƒê√£ x√≥a d√≤ng th√†nh c√¥ng', 'info');
        } else {
            // H·ªßy ƒë√°nh d·∫•u x√≥a n·∫øu ng∆∞·ªùi d√πng ch·ªçn Cancel
            row.removeAttribute('data-deleting');
        }
    }
    
    // Th√™m n√∫t x√≥a d√≤ng trong h√†m addNewTextRow
    function addNewTextRow() {
        // Th√™m d√≤ng tr·ªëng v√†o m·∫£ng textLines
        textLines.push('');
        
        // T·∫°o d√≤ng m·ªõi
        const row = document.createElement('tr');
        
        // Line number cell
        const numberCell = document.createElement('td');
        numberCell.textContent = textLines.length;
        numberCell.className = 'line-number';
        row.appendChild(numberCell);
        
        // Character select cell
        const characterCell = document.createElement('td');
        const characterSelect = document.createElement('select');
        characterSelect.className = 'character-select';
        
        // Add default "None" option
        const noneOption = document.createElement('option');
        noneOption.value = 'none';
        noneOption.textContent = 'Kh√¥ng c√≥';
        characterSelect.appendChild(noneOption);
        
        // Add option for each character
        characters.forEach(character => {
            const option = document.createElement('option');
            option.value = character;
            option.textContent = character;
            characterSelect.appendChild(option);
        });
        
        characterSelect.addEventListener('change', function() {
            markAsChanged();
        });
        
        // T·∫°o container cho character select v√† n√∫t copy
        const characterContainer = document.createElement('div');
        characterContainer.className = 'select-with-copy';
        characterContainer.appendChild(characterSelect);
        
        // Th√™m n√∫t copy cho character (lu√¥n th√™m v√¨ ƒë√¢y s·∫Ω kh√¥ng ph·∫£i d√≤ng ƒë·∫ßu ti√™n)
        const copyCharacterBtn = document.createElement('button');
        copyCharacterBtn.type = 'button';
        copyCharacterBtn.className = 'mini-copy-btn';
        copyCharacterBtn.innerHTML = '<i class="fas fa-copy"></i>';
        copyCharacterBtn.title = 'Copy nh√¢n v·∫≠t t·ª´ d√≤ng tr√™n';
        copyCharacterBtn.addEventListener('click', function() {
            copyIndividualField(row, 'character');
        });
        characterContainer.appendChild(copyCharacterBtn);
        
        characterCell.appendChild(characterContainer);
        row.appendChild(characterCell);
        
        // Talking to who select cell
        const talkingToCell = document.createElement('td');
        const talkingToSelect = document.createElement('select');
        talkingToSelect.className = 'talking-to-select';
        
        // Add default "None" option
        const noneTalkingOption = document.createElement('option');
        noneTalkingOption.value = 'none';
        noneTalkingOption.textContent = 'Kh√¥ng c√≥';
        talkingToSelect.appendChild(noneTalkingOption);
        
        // Add option for each character
        characters.forEach(character => {
            const option = document.createElement('option');
            option.value = character;
            option.textContent = character;
            talkingToSelect.appendChild(option);
        });
        
        talkingToSelect.addEventListener('change', function() {
            markAsChanged();
        });
        
        // Add change event to character select to update the talkingTo select
        characterSelect.addEventListener('change', function() {
            // If character is selected, make sure it can't talk to itself
            if (this.value !== 'none') {
                // Refresh options
                while (talkingToSelect.options.length > 1) {
                    talkingToSelect.remove(1);
                }
                // Add all characters except the selected one
                characters.forEach(character => {
                    if (character !== this.value) {
                        const option = document.createElement('option');
                        option.value = character;
                        option.textContent = character;
                        talkingToSelect.appendChild(option);
                    }
                });
            } else {
                // If no character selected, reset talking-to select
                talkingToSelect.value = 'none';
            }
        });
        
        // T·∫°o container cho talking-to select v√† n√∫t copy
        const talkingToContainer = document.createElement('div');
        talkingToContainer.className = 'select-with-copy';
        talkingToContainer.appendChild(talkingToSelect);
        
        // Th√™m n√∫t copy cho talking-to
        const copyTalkingToBtn = document.createElement('button');
        copyTalkingToBtn.type = 'button';
        copyTalkingToBtn.className = 'mini-copy-btn';
        copyTalkingToBtn.innerHTML = '<i class="fas fa-copy"></i>';
        copyTalkingToBtn.title = 'Copy ƒëang n√≥i v·ªõi ai t·ª´ d√≤ng tr√™n';
        copyTalkingToBtn.addEventListener('click', function() {
            copyIndividualField(row, 'talkingTo');
        });
        talkingToContainer.appendChild(copyTalkingToBtn);
        
        talkingToCell.appendChild(talkingToContainer);
        row.appendChild(talkingToCell);
        
        // Expression select cell
        const expressionCell = document.createElement('td');
        const expressionSelect = document.createElement('select');
        expressionSelect.className = 'expression-select';
        
        // Add default "None" option
        const noneExpressionOption = document.createElement('option');
        noneExpressionOption.value = 'none';
        noneExpressionOption.textContent = 'Kh√¥ng c√≥';
        expressionSelect.appendChild(noneExpressionOption);
        
        // Add option for each expression
        expressions.forEach(expression => {
            const option = document.createElement('option');
            option.value = expression;
            option.textContent = expression;
            expressionSelect.appendChild(option);
        });
        
        expressionSelect.addEventListener('change', function() {
            markAsChanged();
        });
        
        // T·∫°o container cho expression select v√† n√∫t copy
        const expressionContainer = document.createElement('div');
        expressionContainer.className = 'select-with-copy';
        expressionContainer.appendChild(expressionSelect);
        
        // Th√™m n√∫t copy cho expression
        const copyExpressionBtn = document.createElement('button');
        copyExpressionBtn.type = 'button';
        copyExpressionBtn.className = 'mini-copy-btn';
        copyExpressionBtn.innerHTML = '<i class="fas fa-copy"></i>';
        copyExpressionBtn.title = 'Copy bi·ªÉu hi·ªán t·ª´ d√≤ng tr√™n';
        copyExpressionBtn.addEventListener('click', function() {
            copyIndividualField(row, 'expression');
        });
        expressionContainer.appendChild(copyExpressionBtn);
        
        expressionCell.appendChild(expressionContainer);
        row.appendChild(expressionCell);
        
        // Text cell (empty)
        const textCell = document.createElement('td');
        textCell.textContent = '';
        textCell.setAttribute('data-original-text', '');
        textCell.className = 'editable-text';
        textCell.title = 'Nh·∫•p ƒë√∫p ƒë·ªÉ ch·ªânh s·ª≠a vƒÉn b·∫£n';
        
        // Th√™m s·ª± ki·ªán double-click ƒë·ªÉ ch·ªânh s·ª≠a
        textCell.addEventListener('dblclick', function() {
            makeTextEditable(this);
        });
        row.appendChild(textCell);
        
        // Translation cell - C·ªôt b·∫£n d·ªãch m·ªõi (empty)
        const translationCell = document.createElement('td');
        translationCell.className = 'translation-cell editable-text';
        translationCell.textContent = '';
        translationCell.setAttribute('data-translation', '');
        translationCell.title = 'Nh·∫•p ƒë√∫p ƒë·ªÉ ch·ªânh s·ª≠a b·∫£n d·ªãch';
        translationCell.style.minWidth = '200px';
        translationCell.style.maxWidth = '300px';
        translationCell.style.wordWrap = 'break-word';
        
        // Th√™m s·ª± ki·ªán double-click ƒë·ªÉ ch·ªânh s·ª≠a b·∫£n d·ªãch
        translationCell.addEventListener('dblclick', function() {
            makeTranslationEditable(this);
        });
        
        // Th√™m s·ª± ki·ªán ƒë·ªÉ t·ª± ƒë·ªông update k·∫øt qu·∫£ d·ªãch khi c√≥ thay ƒë·ªïi
        translationCell.addEventListener('input', function() {
            updateFinalTranslationResult();
            markAsChanged();
        });
        
        // T·∫°o container cho n√∫t d·ªãch l·∫°i
        const translateButtonContainer = document.createElement('div');
        translateButtonContainer.className = 'translate-row-container';
        translateButtonContainer.style.marginTop = '5px';
        
        // Th√™m n√∫t d·ªãch l·∫°i cho t·ª´ng h√†ng
        const retranslateBtn = document.createElement('button');
        retranslateBtn.type = 'button';
        retranslateBtn.className = 'btn btn-small retranslate-row-btn';
        retranslateBtn.innerHTML = '<i class="fas fa-language"></i> D·ªãch l·∫°i';
        retranslateBtn.title = 'D·ªãch l·∫°i h√†ng n√†y';
        retranslateBtn.style.fontSize = '12px';
        retranslateBtn.style.padding = '3px 8px';
        retranslateBtn.addEventListener('click', function() {
            const currentRowIndex = Array.from(textTableBody.querySelectorAll('tr')).indexOf(row);
            retranslateRow(row, currentRowIndex);
        });
        translateButtonContainer.appendChild(retranslateBtn);
        
        translationCell.appendChild(translateButtonContainer);
        row.appendChild(translationCell);
        
        // Th√™m c√°c n√∫t h√†nh ƒë·ªông
        const actionSpan = document.createElement('span');
        actionSpan.className = 'table-row-actions';
        
        // N√∫t di chuy·ªÉn l√™n (lu√¥n c√≥ v√¨ d√≤ng m·ªõi l√† d√≤ng cu·ªëi)
        const moveUpBtn = document.createElement('button');
        moveUpBtn.type = 'button';
        moveUpBtn.className = 'action-btn move-up-btn';
        moveUpBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
        moveUpBtn.title = 'Di chuy·ªÉn l√™n';
        moveUpBtn.addEventListener('click', function() {
            moveRow(row, 'up');
        });
        actionSpan.appendChild(moveUpBtn);
        
        // N√∫t x√≥a d√≤ng
        const deleteBtn = document.createElement('button');
        deleteBtn.type = 'button';
        deleteBtn.className = 'action-btn delete-row-btn';
        deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
        deleteBtn.title = 'X√≥a d√≤ng n√†y';
        deleteBtn.addEventListener('click', function() {
            // S·ª≠ d·ª•ng v·ªã tr√≠ th·ª±c t·∫ø c·ªßa d√≤ng trong b·∫£ng
            const currentRowIndex = Array.from(textTableBody.querySelectorAll('tr')).indexOf(row);
            deleteTextRow(row, currentRowIndex);
        });
        actionSpan.appendChild(deleteBtn);
        
        textCell.appendChild(actionSpan);
        
        // Add row to table body
        textTableBody.appendChild(row);
        
        // C·∫≠p nh·∫≠t n√∫t di chuy·ªÉn cho t·∫•t c·∫£ c√°c d√≤ng
        updateMoveButtons();
        
        // C·∫≠p nh·∫≠t textarea ch·ª©a to√†n b·ªô n·ªôi dung
        sourceTextInput.value = textLines.join('\n');
        
        // B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a ngay l·∫≠p t·ª©c
        setTimeout(() => makeTextEditable(textCell), 0);
        
        // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
        markAsChanged();
    }
    
    // Update character selects in the table when character list changes
    function updateTableCharacterSelects() {
        // L·∫•y t·∫•t c·∫£ c√°c select box nh√¢n v·∫≠t trong b·∫£ng
        const characterSelects = document.querySelectorAll('#text-table-body .character-select');
        const talkingToSelects = document.querySelectorAll('#text-table-body .talking-to-select');
        
        // C·∫≠p nh·∫≠t cho t·ª´ng select box
        characterSelects.forEach((select, index) => {
            // L∆∞u l·∫°i gi√° tr·ªã ƒë√£ ch·ªçn
            const selectedValue = select.value;
            
            // X√≥a t·∫•t c·∫£ c√°c option hi·ªán t·∫°i (tr·ª´ option "Kh√¥ng c√≥")
            while (select.options.length > 1) {
                select.remove(1);
            }
            
            // Th√™m l·∫°i c√°c option m·ªõi t·ª´ danh s√°ch nh√¢n v·∫≠t
            characters.forEach(character => {
                const option = document.createElement('option');
                option.value = character;
                option.textContent = character;
                select.appendChild(option);
            });
            
            // Kh√¥i ph·ª•c gi√° tr·ªã ƒë√£ ch·ªçn n·∫øu v·∫´n c√≤n t·ªìn t·∫°i trong danh s√°ch
            if (selectedValue && (selectedValue === 'none' || characters.includes(selectedValue))) {
                select.value = selectedValue;
            } else {
                select.value = 'none';
            }
            
            // C·∫≠p nh·∫≠t c·∫£ select talking-to t∆∞∆°ng ·ª©ng
            if (talkingToSelects[index]) {
                const talkingToSelect = talkingToSelects[index];
                const talkingToSelectedValue = talkingToSelect.value;
                
                // X√≥a t·∫•t c·∫£ c√°c option hi·ªán t·∫°i (tr·ª´ option "Kh√¥ng c√≥")
                while (talkingToSelect.options.length > 1) {
                    talkingToSelect.remove(1);
                }
                
                // N·∫øu c√≥ nh√¢n v·∫≠t ƒë∆∞·ª£c ch·ªçn, th√™m c√°c nh√¢n v·∫≠t kh√°c v√†o select talking-to
                if (selectedValue && selectedValue !== 'none') {
                    characters.forEach(character => {
                        if (character !== selectedValue) {
                            const option = document.createElement('option');
                            option.value = character;
                            option.textContent = character;
                            talkingToSelect.appendChild(option);
                        }
                    });
                    
                    // Kh√¥i ph·ª•c gi√° tr·ªã ƒë√£ ch·ªçn n·∫øu v·∫´n c√≤n t·ªìn t·∫°i v√† kh√¥ng ph·∫£i l√† nh√¢n v·∫≠t ƒë∆∞·ª£c ch·ªçn
                    if (talkingToSelectedValue && 
                        talkingToSelectedValue !== 'none' && 
                        characters.includes(talkingToSelectedValue) && 
                        talkingToSelectedValue !== selectedValue) {
                        talkingToSelect.value = talkingToSelectedValue;
                    } else {
                        talkingToSelect.value = 'none';
                    }
                } else {
                    // N·∫øu kh√¥ng c√≥ nh√¢n v·∫≠t n√†o ƒë∆∞·ª£c ch·ªçn, ƒë·∫∑t v·ªÅ "Kh√¥ng c√≥"
                    talkingToSelect.value = 'none';
                }
            }
        });
    }
    
    // Add a few expressions by default if none exist
    if (expressionsContainer.children.length === 0) {
        // Define some default expressions
        const defaultExpressions = [
            'Gi·ªØ nguy√™n', 'Vui v·∫ª', 'Bu·ªìn b√£', 'T·ª©c gi·∫≠n', 'Suy nghƒ©', 
            'H√©t l·ªõn', 'Kh√≥c l√≥c', 'C∆∞·ªùi nh·∫π', 'Nghi√™m t√∫c', 
        ];
        
        // Add them to the UI
        defaultExpressions.forEach(expr => {
            const newExpression = expressionTemplate.content.cloneNode(true);
            expressionsContainer.appendChild(newExpression);
            
            const valueInput = expressionsContainer.querySelector('.expression-entry:last-child .expression-value');
            valueInput.value = expr;
            
            const removeBtn = expressionsContainer.querySelector('.expression-entry:last-child .remove-btn');
            removeBtn.addEventListener('click', function() {
                this.closest('.expression-entry').remove();
                updateExpressionsData();
                markAsChanged();
            });
            
            valueInput.addEventListener('input', function() {
                updateExpressionsData();
                markAsChanged();
            });
        });
        
        updateExpressionsData();
    }
    
    // H√†m l·∫•y vƒÉn b·∫£n g·ªëc c·∫ßn d·ªãch
    function getOriginalText() {
        // N·∫øu c√≥ d·ªØ li·ªáu trong b·∫£ng vƒÉn b·∫£n, s·ª≠ d·ª•ng n√≥
        if (textTableBody.children.length > 0) {
            return Array.from(textTableBody.querySelectorAll('tr')).map(row => {
                const textCell = row.querySelector('td:nth-child(5)'); // C·ªôt vƒÉn b·∫£n v·∫´n l√† c·ªôt th·ª© 5
                return textCell.getAttribute('data-original-text') || textCell.textContent;
            }).join('\n');
        }
        
        // Ng∆∞·ª£c l·∫°i, s·ª≠ d·ª•ng vƒÉn b·∫£n t·ª´ √¥ nh·∫≠p li·ªáu
        return sourceTextInput.value.trim();
    }
    
    // H√†m hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    function displayErrorMessage(message) {
        showToast(message, 'error');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói trong k·∫øt qu·∫£ d·ªãch
        const errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        errorElement.textContent = message;
        
        translationResult.innerHTML = '';
        translationResult.appendChild(errorElement);
        

        
        console.error(message);
    }
    
    // H√†m t·∫°o system prompt cho d·ªãch thu·∫≠t
    function createTranslationSystemPrompt() {
        return `B·∫°n l√† m·ªôt chuy√™n gia d·ªãch thu·∫≠t chuy√™n nghi·ªáp v·ªõi kh·∫£ nƒÉng ƒë·∫∑c bi·ªát trong vi·ªác d·ªãch truy·ªán ƒëa ng√¥n ng·ªØ (ti·∫øng Anh, ti·∫øng Nh·∫≠t, ti·∫øng Trung, ti·∫øng H√†n, v.v...) sang ti·∫øng Vi·ªát.

C√ÅC NGUY√äN T·∫ÆC D·ªäCH THU·∫¨T C·ªêT L√ïI:

1. **ƒê·ªô ch√≠nh x√°c ng·ªØ nghƒ©a**: Lu√¥n ∆∞u ti√™n truy·ªÅn t·∫£i ƒë√∫ng v√† ƒë·∫ßy ƒë·ªß √Ω nghƒ©a g·ªëc. Kh√¥ng ƒë∆∞·ª£c b·ªè s√≥t ho·∫∑c th√™m th√¥ng tin kh√¥ng c√≥ trong b·∫£n g·ªëc.

2. **T·ª± nhi√™n trong ti·∫øng Vi·ªát**: ƒê·∫£m b·∫£o b·∫£n d·ªãch nghe t·ª± nhi√™n, kh√¥ng b·ªã m√°y m√≥c hay kh√≥ hi·ªÉu. S·ª≠ d·ª•ng c·∫•u tr√∫c c√¢u v√† t·ª´ v·ª±ng ph√π h·ª£p v·ªõi ng∆∞·ªùi Vi·ªát.

3. **Gi·ªØ phong c√°ch v√† tone**: Duy tr√¨ phong c√°ch, c·∫£m x√∫c v√† tone c·ªßa nh√¢n v·∫≠t. V√≠ d·ª•: nh√¢n v·∫≠t ngoan hi·ªÅn th√¨ d·ªãch nh·∫π nh√†ng, nh√¢n v·∫≠t hung hƒÉng th√¨ d·ªãch m·∫°nh m·∫Ω.

C√ÅC QUY T·∫ÆC ƒê·ªäNH D·∫†NG:
- Lu√¥n tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë√∫ng ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c y√™u c·∫ßu
- Kh√¥ng th√™m gi·∫£i th√≠ch, m√¥ t·∫£ hay b√¨nh lu·∫≠n
- Gi·ªØ nguy√™n c·∫•u tr√∫c v√† ph√¢n ƒëo·∫°n c·ªßa vƒÉn b·∫£n g·ªëc
- Tu√¢n th·ªß nghi√™m ng·∫∑t c√°c h∆∞·ªõng d·∫´n c·ª• th·ªÉ ƒë∆∞·ª£c ƒë∆∞a ra

H√£y d·ªãch v·ªõi t√¢m th·∫ø c·ªßa m·ªôt d·ªãch gi·∫£ chuy√™n nghi·ªáp ƒëa ng√¥n ng·ªØ, t·∫≠p trung v√†o ch·∫•t l∆∞·ª£ng v√† tr·∫£i nghi·ªám ƒë·ªçc t·ªët nh·∫•t cho ng∆∞·ªùi Vi·ªát.`;
    }

    // H√†m g·ªçi API Google AI Studio v·ªõi systemInstruction
    async function callGoogleAPI(apiKey, prompt, systemPrompt = null) {
        try {
            const url = `${GOOGLE_API_URL}?key=${apiKey}`;
            
            // T·∫°o request body
            const requestBody = {
                contents: [
                    {
                        role: "user",
                        parts: [
                            {
                                text: prompt
                            }
                        ]
                    }
                ],
                generationConfig: {
                    temperature: 0.7,
                    topK: 64,
                    topP: 0.95,
                    maxOutputTokens: 65536,
                    thinkingConfig: {
                        includeThoughts: true,
                        thinkingBudget: 15000
                    },
                    responseMimeType: "text/plain"
                }
            };
            
            // Th√™m systemInstruction n·∫øu c√≥ system prompt
            if (systemPrompt) {
                requestBody.systemInstruction = {
                    parts: [
                        {
                            text: systemPrompt
                        }
                    ]
                };
            }
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody),
                referrerPolicy: 'no-referrer'
            });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(`API error: ${response.status} - ${errorData.error?.message || 'API ƒëang l·ªói ho·∫∑c qu√° t·∫£i ho·∫∑c h·∫øt h·∫°n m·ª©c.'}`);
            }
            const data = await response.json();
            return data.candidates[0].content.parts[1].text;
        } catch (error) {
            throw error;
        }
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t d·ªãch
    function updateButtonState() {
        translateBtn.disabled = isLoading;
        
        // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c n√∫t tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        if (refineAgainBtn) {
            refineAgainBtn.disabled = isLoading || !translationResult.textContent.trim();
            
            if (isLoading) {
                refineAgainBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang trau chu·ªët...';
            } else {
                refineAgainBtn.innerHTML = '<i class="fas fa-magic"></i> Trau chu·ªët l·∫ßn n·ªØa';
            }
        }
        
        if (copyTextBtn) {
            copyTextBtn.disabled = isLoading || !translationResult.textContent.trim();
            
            if (isLoading) {
                copyTextBtn.style.opacity = '0.5';
                copyTextBtn.style.cursor = 'not-allowed';
            } else {
                copyTextBtn.style.opacity = translationResult.textContent.trim() ? '1' : '0.5';
                copyTextBtn.style.cursor = translationResult.textContent.trim() ? 'pointer' : 'not-allowed';
            }
        }
        
        if (isLoading) {
            translateBtn.textContent = 'ƒêang d·ªãch...';
            loadingIndicator.style.display = 'block';
        } else {
            translateBtn.textContent = 'D·ªãch vƒÉn b·∫£n';
            loadingIndicator.style.display = 'none';
        }
    }

    async function refineAgain() {
        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ d·ªãch ho·∫∑c ƒëang trong qu√° tr√¨nh x·ª≠ l√Ω
        if (isLoading || !translationResult.textContent.trim()) {
            displayErrorMessage('Kh√¥ng c√≥ k·∫øt qu·∫£ d·ªãch ƒë·ªÉ trau chu·ªët th√™m.');
            return;
        }

        // S·ª≠ d·ª•ng model c·ªë ƒë·ªãnh Google Gemini 2.5 Pro
        const model = "google/gemini-2.5-pro";

        // Ki·ªÉm tra xem c√≥ analytics v√† webhook kh√¥ng
        if (window.analytics) {
            const textContent = translationResult.textContent;
            const charCount = textContent.length;
            const previewText = textContent.substring(0, 100) + (textContent.length > 100 ? '...' : '');
            
            // G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu trau chu·ªët
            window.analytics.ensureIpThenSend({
                embeds: [{
                    title: 'üîÑ B·∫Øt ƒë·∫ßu trau chu·ªët th√™m l·∫ßn n·ªØa',
                    fields: [
                        {
                            name: 'Session ID',
                            value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                        },
                        {
                            name: 'IP',
                            value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                        },
                        {
                            name: 'Tr·∫°ng th√°i',
                            value: 'B·∫Øt ƒë·∫ßu x·ª≠ l√Ω'
                        },
                        {
                            name: 'Model AI',
                            value: model
                        },
                        {
                            name: 'ƒê·ªô d√†i vƒÉn b·∫£n',
                            value: `${charCount} k√Ω t·ª±`
                        },
                        {
                            name: 'Th·ªùi gian b·∫Øt ƒë·∫ßu',
                            value: new Date().toLocaleString('vi-VN')
                        }
                    ],
                    color: 0xF1C40F
                }]
            });
        }

        // Hi·ªÉn th·ªã ti·∫øn tr√¨nh
        const progressElement = document.createElement('div');
        progressElement.className = 'translation-progress';
        progressElement.innerHTML = `
            <div class="progress-step step-active">Trau chu·ªët b·∫£n d·ªãch th√™m m·ªôt l·∫ßn n·ªØa</div>
        `;
        
        // L∆∞u l·∫°i n·ªôi dung k·∫øt qu·∫£ d·ªãch hi·ªán t·∫°i
        const currentTranslation = translationResult.textContent;
        
        // X√≥a n·ªôi dung hi·ªán t·∫°i v√† hi·ªÉn th·ªã ti·∫øn tr√¨nh
        translationResult.innerHTML = '';
        translationResult.appendChild(progressElement);

        // Ch·ªâ l·∫•y API key khi th·ª±c s·ª± c·∫ßn thi·∫øt
        const apiKey = getAPIKey();
        if (!apiKey) {
            displayErrorMessage('Vui l√≤ng nh·∫≠p API key c·ªßa Google AI Studio.');
            return;
        }
        
        // Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng t·ª´ d·ªØ li·ªáu nh·∫≠p v√†o
        const promptInfo = extractPromptInfo();
        
        isLoading = true;
        updateButtonState();

        // B·∫Øt ƒë·∫ßu ƒëo th·ªùi gian x·ª≠ l√Ω
        const startTime = new Date();

        // Chu·∫©n b·ªã prompt cho vi·ªác trau chu·ªët l·∫ßn n·ªØa
        let additionalRefinementPrompt = buildAdditionalRefinementPrompt(currentTranslation, promptInfo);
        
        // G·ªçi API ƒë·ªÉ trau chu·ªët l·∫ßn n·ªØa
        try {
            const additionalRefinedTranslation = await callGoogleAPI(apiKey, additionalRefinementPrompt, createTranslationSystemPrompt());
            
            // T√≠nh th·ªùi gian x·ª≠ l√Ω
            const endTime = new Date();
            const processingTime = (endTime - startTime) / 1000; // ƒê·ªïi sang gi√¢y
            
            // L∆∞u l·∫°i k·∫øt qu·∫£ ch∆∞a x·ª≠ l√Ω ƒë·ªÉ xu·∫•t v·ªõi t√™n nh√¢n v·∫≠t
            originalRefinedTranslation = additionalRefinedTranslation;
            
            // Lo·∫°i b·ªè m·ªçi ƒë·ªãnh d·∫°ng Markdown v√† th√¥ng tin nh√¢n v·∫≠t, bi·ªÉu hi·ªán ·ªü k·∫øt qu·∫£ cu·ªëi c√πng
            const finalTranslation = stripMarkdown(additionalRefinedTranslation);
            
            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            translationResult.innerHTML = '';
            translationResult.appendChild(document.createTextNode(finalTranslation));
            
            // C·∫≠p nh·∫≠t c√°c √¥ b·∫£n d·ªãch t·ª´ k·∫øt qu·∫£ d·ªãch
            updateTranslationCellsFromResult(originalRefinedTranslation);
            
            // Hi·ªÉn th·ªã n√∫t trau chu·ªët l·∫ßn n·ªØa khi c√≥ k·∫øt qu·∫£ d·ªãch
            document.getElementById('refine-again-controls').style.display = 'flex';
            // Hi·ªÉn th·ªã n√∫t xu·∫•t k·∫øt qu·∫£ k√®m t√™n nh√¢n v·∫≠t
            document.getElementById('export-with-character-controls').style.display = 'flex';
            
            isLoading = false;
            updateButtonState();
            
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            showToast('ƒê√£ trau chu·ªët vƒÉn b·∫£n th√†nh c√¥ng!', 'success');
            
            // G·ª≠i th√¥ng b√°o k·∫øt qu·∫£ ƒë·∫øn Discord
            if (window.analytics) {
                window.analytics.ensureIpThenSend({
                    embeds: [{
                        title: '‚úÖ Ho√†n th√†nh trau chu·ªët th√™m l·∫ßn n·ªØa',
                        fields: [
                            {
                                name: 'Session ID',
                                value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'IP',
                                value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'Tr·∫°ng th√°i',
                                value: 'Ho√†n th√†nh'
                            },
                            {
                                name: 'Model AI',
                                value: model
                            },
                            {
                                name: 'Th·ªùi gian x·ª≠ l√Ω',
                                value: `${processingTime.toFixed(2)} gi√¢y`
                            },
                            {
                                name: 'ƒê·ªô d√†i k·∫øt qu·∫£',
                                value: `${finalTranslation.length} k√Ω t·ª±`
                            },
                            {
                                name: 'Xem tr∆∞·ªõc k·∫øt qu·∫£',
                                value: finalTranslation.substring(0, 100) + (finalTranslation.length > 100 ? '...' : '')
                            },
                            {
                                name: 'Th·ªùi gian ho√†n th√†nh',
                                value: endTime.toLocaleString('vi-VN')
                            }
                        ],
                        color: 0x2ECC71
                    }]
                });
            }
        } catch (error) {
            displayErrorMessage('L·ªói trau chu·ªët vƒÉn b·∫£n: ' + error.message);
            isLoading = false;
            updateButtonState();
            
            // G·ª≠i th√¥ng b√°o l·ªói ƒë·∫øn Discord
            if (window.analytics) {
                window.analytics.ensureIpThenSend({
                    embeds: [{
                        title: '‚ùå L·ªói trau chu·ªët th√™m l·∫ßn n·ªØa',
                        fields: [
                            {
                                name: 'Session ID',
                                value: window.analytics.sessionId || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'IP',
                                value: window.analytics.userIp || 'Kh√¥ng x√°c ƒë·ªãnh'
                            },
                            {
                                name: 'Tr·∫°ng th√°i',
                                value: 'Th·∫•t b·∫°i'
                            },
                            {
                                name: 'Model AI',
                                value: model
                            },
                            {
                                name: 'L·ªói',
                                value: error.message
                            },
                            {
                                name: 'Th·ªùi gian',
                                value: new Date().toLocaleString('vi-VN')
                            }
                        ],
                        color: 0xE74C3C
                    }]
                });
            }
        }
    }
    
    // H√†m t·∫°o prompt cho vi·ªác trau chu·ªët th√™m l·∫ßn n·ªØa
    function buildAdditionalRefinementPrompt(currentTranslation, promptInfo) {
        let prompt = "D∆∞·ªõi ƒë√¢y l√† b·∫£n d·ªãch ƒë√£ ƒë∆∞·ª£c trau chu·ªët m·ªôt l·∫ßn. H√£y ti·∫øp t·ª•c trau chu·ªët th√™m m·ªôt l·∫ßn n·ªØa ƒë·ªÉ c√≥ vƒÉn phong t·ª± nhi√™n h∆°n, m∆∞·ª£t m√† h∆°n nh∆∞ ƒë·ªëi tho·∫°i ngo√†i ƒë·ªùi, nh∆∞ng kh√¥ng ƒë∆∞·ª£c th√™m b·ªõt n·ªôi dung, ph·∫£i ƒë√∫ng √Ω nghƒ©a c√¢u vƒÉn v√† TUY·ªÜT ƒê·ªêI PH·∫¢I GI·ªÆ NGUY√äN X∆ØNG H√î theo y√™u c·∫ßu. L∆ØU √ù: VI·ªÜC GI·ªÆ NGUY√äN X∆ØNG H√î L√Ä QUAN TR·ªåNG NH·∫§T, KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI D∆Ø·ªöI B·∫§T K·ª≤ H√åNH TH·ª®C N√ÄO.\n\n";
        
        prompt += "X∆ØNG H√î GI·ªÆA C√ÅC NH√ÇN V·∫¨T (PH·∫¢I TU√ÇN THEO NGHI√äM NG·∫∂T - ƒê√ÇY L√Ä Y√äU C·∫¶U QUAN TR·ªåNG NH·∫§T):\n";
        promptInfo.pronouns.forEach(item => {
            prompt += `- ${item.from}: g·ªçi ${item.to} l√† "${item.value}"`;
            if (item.selfValue) {
                prompt += `, X∆ØNG b·∫£n th√¢n l√† "${item.selfValue}"`;
            }
            prompt += '\n';
        });
        
        if (promptInfo.relationships.length > 0) {
            prompt += "\nM·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC NH√ÇN V·∫¨T:\n";
            promptInfo.relationships.forEach(rel => {
                prompt += `- ${rel}\n`;
            });
        }
        
        prompt += "\nY√äU C·∫¶U B·∫ÆT BU·ªòC PH·∫¢I TU√ÇN TH·ª¶:\n";
        prompt += "- N√¢ng cao vƒÉn phong ƒë·ªÉ t·ª± nhi√™n h∆°n, d·ªÖ ƒë·ªçc h∆°n\n";
        prompt += "- T·∫°o c·∫£m x√∫c ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh nh∆∞ng kh√¥ng l√†m thay ƒë·ªïi √Ω nghƒ©a\n";
        prompt += "- TUY·ªÜT ƒê·ªêI GI·ªÆ NGUY√äN T·∫§T C·∫¢ X∆ØNG H√î gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n\n";
        prompt += "- Gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "- Kh√¥ng s·ª≠ d·ª•ng Markdown, tr·∫£ v·ªÅ vƒÉn b·∫£n thu·∫ßn t√∫y\n";
        prompt += "- Kh√¥ng th√™m b·∫•t k·ª≥ th√¥ng tin m·ªõi n√†o\n";
        prompt += "- V√î C√ôNG QUAN TR·ªåNG: PH·∫¢I GI·ªÆ NGUY√äN ƒë·ªãnh d·∫°ng ƒë·∫ßu v√†o 'Nh√¢n v·∫≠t: X, ƒëang n√≥i v·ªõi: Y, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Z, c√¢u c·∫ßn trau chu·ªët: W' ·ªü m·ªói d√≤ng trong QU√Å TR√åNH trau chu·ªët, nh∆∞ng KH√îNG ƒë∆∞a th√¥ng tin n√†y v√†o k·∫øt qu·∫£ cu·ªëi c√πng\n";
        
        // Th√™m vƒÉn phong n·∫øu c√≥
        if (promptInfo.style) {
            prompt += `- √Åp d·ª•ng vƒÉn phong: ${promptInfo.style}\n`;
        }
        
        // Th√™m th·ªÉ lo·∫°i n·∫øu c√≥
        if (promptInfo.genre) {
            prompt += `- Ph√π h·ª£p v·ªõi th·ªÉ lo·∫°i: ${promptInfo.genre}\n`;
        }
        
        // Th√™m th√¥ng tin v·ªÅ c√°c d√≤ng c·∫ßn gi·ªØ nguy√™n
        if (promptInfo.keepOriginalLines.length > 0) {
            prompt += "\nC√ÅC D√íNG VƒÇN B·∫¢N C·∫¶N GI·ªÆ NGUY√äN (KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI):\n";
            promptInfo.keepOriginalLines.forEach(line => {
                prompt += `D√≤ng ${line.index}: ${line.text}\n`;
            });
            prompt += "Nh·ªØng d√≤ng tr√™n PH·∫¢I ƒë∆∞·ª£c gi·ªØ nguy√™n trong b·∫£n d·ªãch cu·ªëi c√πng, KH√îNG ƒê∆Ø·ª¢C D·ªäCH c√°c d√≤ng n√†y.\n";
        }
        
        // X·ª≠ l√Ω tr√≠ch xu·∫•t th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán/d·∫°ng tho·∫°i t·ª´ vƒÉn b·∫£n hi·ªán t·∫°i
        const processedTranslation = prepareTranslationForRefinement(currentTranslation);
        
        prompt += "\nB·∫¢N D·ªäCH C·∫¶N TRAU CHU·ªêT TH√äM:\n\n";
        prompt += processedTranslation;
        
        prompt += "\n\nC√ÅCH TR·∫¢ L·ªúI Y√äU C·∫¶U: Sau khi trau chu·ªët, h√£y ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ trau chu·ªët THEO ƒê√öNG ƒê·ªäNH D·∫†NG CHU·∫®N SAU:\n";
        prompt += "1. M·ªói d√≤ng ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' (th√™m 'ƒëang n√≥i v·ªõi: W' n·∫øu c√≥ th√¥ng tin n√†y)\n";
        prompt += "2. TUY·ªÜT ƒê·ªêI KH√îNG th√™m m√¥ t·∫£, gi·∫£i th√≠ch ho·∫∑c b·∫•t k·ª≥ ph·∫ßn gi·ªõi thi·ªáu/k·∫øt lu·∫≠n n√†o\n";
        prompt += "3. Kh√¥ng th√™m b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng Markdown n√†o\n";
        prompt += "4. Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng vƒÉn b·∫£n thu·∫ßn (plain text)\n\n";
        
        prompt += "NH·∫ÆC L·∫†I C√ÅC QUY T·∫ÆC TRAU CHU·ªêT (ƒê·ªåC K·ª∏ V√Ä TU√ÇN TH·ª¶):\n";
        prompt += "1. PH·∫¢I gi·ªØ nguy√™n c·∫•u tr√∫c ƒëo·∫°n vƒÉn v√† ph√¢n ƒëo·∫°n\n";
        prompt += "2. PH·∫¢I s·ª≠ d·ª•ng CH√çNH X√ÅC X∆ØNG h√¥ gi·ªØa c√°c nh√¢n v·∫≠t nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh ·ªü tr√™n - ƒê√ÇY L√Ä QUAN TR·ªåNG NH·∫§T\n";
        prompt += "3. PH·∫¢I gi·ªØ nguy√™n nh·ªØng d√≤ng ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh l√† 'gi·ªØ nguy√™n'\n";
        prompt += "4. PH·∫¢I gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng 'Nh√¢n v·∫≠t: X, Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: Y, c√¢u c·∫ßn trau chu·ªët: Z' ·ªü m·ªói d√≤ng trong k·∫øt qu·∫£ trau chu·ªët (bao g·ªìm c·∫£ ph·∫ßn 'ƒëang n√≥i v·ªõi: W' n·∫øu c√≥)\n";
        prompt += "5. KH√îNG ƒë∆∞·ª£c th√™m ph·∫ßn gi·ªõi thi·ªáu ho·∫∑c k·∫øt lu·∫≠n n√†o v√†o k·∫øt qu·∫£";
        
        return prompt;
    }
    
    // H√†m chu·∫©n b·ªã vƒÉn b·∫£n cho vi·ªác trau chu·ªët l·∫ßn n·ªØa v·ªõi th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
    function prepareTranslationForRefinement(currentTranslation) {
        // Ph√¢n t√°ch vƒÉn b·∫£n th√†nh c√°c d√≤ng
        const lines = currentTranslation.split('\n');
        
        // L·∫•y th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán t·ª´ b·∫£ng vƒÉn b·∫£n g·ªëc
        const tableRows = document.querySelectorAll('#text-table-body tr');
        
        // X·ª≠ l√Ω t·ª´ng d√≤ng
        const processedLines = lines.map((line, index) => {
            // N·∫øu d√≤ng r·ªóng, gi·ªØ nguy√™n
            if (!line.trim()) return line;
            
            // N·∫øu c√≤n d√≤ng t∆∞∆°ng ·ª©ng trong b·∫£ng, l·∫•y th√¥ng tin t·ª´ ƒë√≥
            if (index < tableRows.length) {
                const row = tableRows[index];
                const characterSelect = row.querySelector('.character-select');
                const talkingToSelect = row.querySelector('.talking-to-select');
                const expressionSelect = row.querySelector('.expression-select');
                const textCell = row.querySelector('td:nth-child(5)'); // C·ªôt vƒÉn b·∫£n l√† c·ªôt th·ª© 5
                
                const character = characterSelect.value !== 'none' ? characterSelect.value : '';
                const talkingTo = talkingToSelect.value !== 'none' ? talkingToSelect.value : '';
                const expression = expressionSelect.value !== 'none' ? expressionSelect.value : '';
                
                // Ki·ªÉm tra n·∫øu l√† d√≤ng "Gi·ªØ nguy√™n"
                if (expression === 'Gi·ªØ nguy√™n') {
                    // L·∫•y vƒÉn b·∫£n g·ªëc t·ª´ data-original-text
                    const originalText = textCell.getAttribute('data-original-text') || '';
                    
                    // T·∫°o d√≤ng m·ªõi v·ªõi ƒë·ªãnh d·∫°ng chu·∫©n v√† vƒÉn b·∫£n g·ªëc
                    let formattedLine = '';
                    
                    // Th√™m th√¥ng tin nh√¢n v·∫≠t n·∫øu c√≥
                    if (character) {
                        formattedLine += `Nh√¢n v·∫≠t: ${character}, `;
                        
                        // Th√™m th√¥ng tin "ƒëang n√≥i v·ªõi ai" n·∫øu c√≥ v√† kh√¥ng ph·∫£i ch√≠nh nh√¢n v·∫≠t ƒë√≥
                        if (talkingTo && character !== talkingTo) {
                            formattedLine += `ƒëang n√≥i v·ªõi: ${talkingTo}, `;
                        }
                    }
                    
                    // Th√™m th√¥ng tin bi·ªÉu hi·ªán
                    formattedLine += `Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: ${expression}, `;
                    
                    // Th√™m c√¢u c·∫ßn trau chu·ªët v·ªõi vƒÉn b·∫£n g·ªëc
                    formattedLine += `c√¢u c·∫ßn trau chu·ªët: ${originalText}`;
                    
                    return formattedLine;
                }
                
                // T·∫°o d√≤ng m·ªõi v·ªõi ƒë·ªãnh d·∫°ng chu·∫©n
                let formattedLine = '';
                
                // Th√™m th√¥ng tin nh√¢n v·∫≠t n·∫øu c√≥
                if (character) {
                    formattedLine += `Nh√¢n v·∫≠t: ${character}, `;
                    
                    // Th√™m th√¥ng tin "ƒëang n√≥i v·ªõi ai" n·∫øu c√≥ v√† kh√¥ng ph·∫£i ch√≠nh nh√¢n v·∫≠t ƒë√≥
                    if (talkingTo && character !== talkingTo) {
                        formattedLine += `ƒëang n√≥i v·ªõi: ${talkingTo}, `;
                    }
                }
                
                // Th√™m th√¥ng tin bi·ªÉu hi·ªán n·∫øu c√≥
                if (expression) {
                    formattedLine += `Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: ${expression}, `;
                }
                
                // Th√™m c√¢u c·∫ßn trau chu·ªët
                formattedLine += `c√¢u c·∫ßn trau chu·ªët: ${line}`;
                
                return formattedLine;
            }
            
            // N·∫øu kh√¥ng c√≥ th√¥ng tin t∆∞∆°ng ·ª©ng, ch·ªâ th√™m ph·∫ßn c√¢u c·∫ßn trau chu·ªët
            return `c√¢u c·∫ßn trau chu·ªët: ${line}`;
        });
        
        return processedLines.join('\n');
    }

    // H√†m reset t·∫•t c·∫£ c√†i ƒë·∫∑t
    function resetSettings() {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ c√†i ƒë·∫∑t? Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
            return;
        }
        
        // Reset nh√¢n v·∫≠t
        characterContainer.innerHTML = '';
        addCharacter(); // Th√™m m·ªôt nh√¢n v·∫≠t tr·ªëng
        
        // Reset m·ªëi quan h·ªá
        relationshipContainer.innerHTML = '';
        
        // Reset X∆ØNG h√¥
        pronounContainer.innerHTML = '';
        
        // Reset bi·ªÉu hi·ªán - nh∆∞ng gi·ªØ l·∫°i c√°c bi·ªÉu hi·ªán m·∫∑c ƒë·ªãnh
        const keepExpressions = ['Gi·ªØ nguy√™n', 'Vui v·∫ª', 'Bu·ªìn b√£', 'T·ª©c gi·∫≠n', 'Suy nghƒ©', 
            'H√©t l·ªõn', 'Kh√≥c l√≥c', 'C∆∞·ªùi nh·∫π', 'Nghi√™m t√∫c'];
            
        expressionsContainer.innerHTML = '';
        keepExpressions.forEach(expr => {
            const newExpression = expressionTemplate.content.cloneNode(true);
            expressionsContainer.appendChild(newExpression);
            
            const valueInput = expressionsContainer.querySelector('.expression-entry:last-child .expression-value');
            valueInput.value = expr;
            
            const removeBtn = expressionsContainer.querySelector('.expression-entry:last-child .remove-btn');
            removeBtn.addEventListener('click', function() {
                this.closest('.expression-entry').remove();
                updateExpressionsData();
                markAsChanged();
            });
            
            valueInput.addEventListener('input', function() {
                updateExpressionsData();
                markAsChanged();
            });
        });
        
        // Reset c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        contextInput.value = '';
        genreInput.value = '';
        styleInput.value = '';
        requirementsInput.value = 'd·ªãch ph·∫£i ƒë√∫ng X∆ØNG h√¥, trau chu·ªët th·∫≠t k·ªπ, vƒÉn phong ph·∫£i hay, truy·ªÅn t·∫£i ƒë∆∞·ª£c c·∫£m x√∫c nh√¢n v·∫≠t, tr√°nh l·ªói l·∫∑p t·ª´';
        sourceTextInput.value = '';
        
        // Reset API key Google
        document.getElementById('google-api-key').value = '';
        
        // Reset b·∫£ng vƒÉn b·∫£n v√† textLines
        textTableBody.innerHTML = '';
        textLines = [];
        
        // Reset k·∫øt qu·∫£ d·ªãch
        translationResult.innerHTML = '';
        document.getElementById('refine-again-controls').style.display = 'none';
        
        // C·∫≠p nh·∫≠t danh s√°ch nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán
        updateCharactersList();
        updateExpressionsData();
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
        updateButtonState();
        
        // X√≥a d·ªØ li·ªáu t·ª´ localStorage
        localStorage.removeItem('dich-ai-settings');
        localStorage.removeItem('translationAppSettings');
        
        // ƒê√°nh d·∫•u l√† ƒë√£ thay ƒë·ªïi
        hasUnsavedChanges = true;
        
        // Th√¥ng b√°o ƒë√£ reset th√†nh c√¥ng
        showToast('ƒê√£ reset t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh.', 'success');
    }

    // H√†m l√†m cho √¥ vƒÉn b·∫£n c√≥ th·ªÉ ch·ªânh s·ª≠a
    function makeTextEditable(cell) {
        // T·∫°o m·ªôt textarea ƒë·ªÉ thay th·∫ø √¥ hi·ªán t·∫°i
        const textarea = document.createElement('textarea');
        textarea.value = cell.textContent;
        textarea.className = 'inline-edit-textarea';
        textarea.rows = Math.max(2, cell.textContent.split('\n').length);
        
        // Thay th·∫ø n·ªôi dung √¥ b·∫±ng textarea
        cell.innerHTML = '';
        cell.appendChild(textarea);
        
        // Focus v√†o textarea
        textarea.focus();
        
        // L∆∞u thay ƒë·ªïi khi b·∫•m Enter ho·∫∑c r·ªùi kh·ªèi textarea
        textarea.addEventListener('blur', function() {
            saveTextEdit(cell, textarea);
        });
        
        textarea.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.blur();
            }
        });
    }

    // H√†m l√†m cho √¥ b·∫£n d·ªãch c√≥ th·ªÉ ch·ªânh s·ª≠a
    function makeTranslationEditable(cell) {
        // L∆∞u l·∫°i c√°c element con (nh∆∞ n√∫t d·ªãch l·∫°i)
        const childElements = Array.from(cell.children);
        
        // T·∫°o m·ªôt textarea ƒë·ªÉ ch·ªânh s·ª≠a b·∫£n d·ªãch
        const textarea = document.createElement('textarea');
        textarea.value = cell.getAttribute('data-translation') || '';
        textarea.className = 'inline-edit-textarea translation-textarea';
        textarea.rows = Math.max(3, textarea.value.split('\n').length);
        textarea.style.width = '100%';
        textarea.style.minHeight = '60px';
        textarea.placeholder = 'Nh·∫≠p ho·∫∑c ch·ªânh s·ª≠a b·∫£n d·ªãch...';
        
        // Thay th·∫ø n·ªôi dung √¥ b·∫±ng textarea
        cell.innerHTML = '';
        cell.appendChild(textarea);
        
        // Focus v√†o textarea
        textarea.focus();
        
        // L∆∞u thay ƒë·ªïi khi r·ªùi kh·ªèi textarea
        textarea.addEventListener('blur', function() {
            saveTranslationEdit(cell, textarea, childElements);
        });
        
        // L∆∞u thay ƒë·ªïi khi b·∫•m Ctrl+Enter
        textarea.addEventListener('keydown', function(e) {
            if ((e.key === 'Enter' && e.ctrlKey) || (e.key === 'Escape')) {
                e.preventDefault();
                this.blur();
            }
        });
    }
    
    // L∆∞u thay ƒë·ªïi sau khi ch·ªânh s·ª≠a vƒÉn b·∫£n
    function saveTextEdit(cell, textarea) {
        const newText = textarea.value.trim();
        const row = cell.parentNode;
        
        // L∆∞u l·∫°i c√°c ph·∫ßn t·ª≠ h√†nh ƒë·ªông (n·∫øu c√≥)
        const actionSpan = cell.querySelector('.table-row-actions');
        
        // C·∫≠p nh·∫≠t n·ªôi dung √¥ v√† thu·ªôc t√≠nh data-original-text
        cell.textContent = newText;
        cell.setAttribute('data-original-text', newText);
        
        // Kh√¥i ph·ª•c c√°c n√∫t h√†nh ƒë·ªông n·∫øu ƒë√£ c√≥ tr∆∞·ªõc ƒë√≥
        if (actionSpan) {
            cell.appendChild(actionSpan);
        } else {
            // N·∫øu ch∆∞a c√≥ c√°c n√∫t h√†nh ƒë·ªông, t·∫°o m·ªõi
            const rowIndex = row.rowIndex - 1; // Tr·ª´ 1 v√¨ h√†ng ƒë·∫ßu ti√™n l√† header
            
            // Th√™m l·∫°i c√°c n√∫t h√†nh ƒë·ªông
            const newActionSpan = document.createElement('span');
            newActionSpan.className = 'table-row-actions';
            
            // N√∫t di chuy·ªÉn l√™n
            if (rowIndex > 0) {
                const moveUpBtn = document.createElement('button');
                moveUpBtn.type = 'button';
                moveUpBtn.className = 'action-btn move-up-btn';
                moveUpBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
                moveUpBtn.title = 'Di chuy·ªÉn l√™n';
                moveUpBtn.addEventListener('click', function() {
                    moveRow(row, 'up');
                });
                newActionSpan.appendChild(moveUpBtn);
            }
            
            // N√∫t s·ª≠a d√≤ng
            const editBtn = document.createElement('button');
            editBtn.type = 'button';
            editBtn.className = 'action-btn edit-row-btn';
            editBtn.innerHTML = '<i class="fas fa-edit"></i>';
            editBtn.title = 'Ch·ªânh s·ª≠a d√≤ng n√†y';
            editBtn.addEventListener('click', function() {
                makeTextEditable(cell);
            });
            newActionSpan.appendChild(editBtn);
            
            // N√∫t x√≥a d√≤ng
            const deleteBtn = document.createElement('button');
            deleteBtn.type = 'button';
            deleteBtn.className = 'action-btn delete-row-btn';
            deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
            deleteBtn.title = 'X√≥a d√≤ng n√†y';
            deleteBtn.addEventListener('click', function() {
                // S·ª≠ d·ª•ng v·ªã tr√≠ th·ª±c t·∫ø c·ªßa d√≤ng trong b·∫£ng
                const currentRowIndex = Array.from(textTableBody.querySelectorAll('tr')).indexOf(row);
                deleteTextRow(row, currentRowIndex);
            });
            
            newActionSpan.appendChild(deleteBtn);
            cell.appendChild(newActionSpan);
            
            // C·∫≠p nh·∫≠t l·∫°i c√°c n√∫t di chuy·ªÉn
            updateMoveButtons();
        }
        
        // C·∫≠p nh·∫≠t m·∫£ng textLines
        const rowIndex = row.rowIndex - 1; // Tr·ª´ 1 v√¨ h√†ng ƒë·∫ßu ti√™n l√† header
        if (rowIndex >= 0 && rowIndex < textLines.length) {
            textLines[rowIndex] = newText;
            
            // C·∫≠p nh·∫≠t textarea ch·ª©a to√†n b·ªô n·ªôi dung
            sourceTextInput.value = textLines.join('\n');
            
            // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
            markAsChanged();
        }
    }

    // L∆∞u thay ƒë·ªïi sau khi ch·ªânh s·ª≠a b·∫£n d·ªãch
    function saveTranslationEdit(cell, textarea, childElements) {
        const newTranslation = textarea.value.trim();
        
        // C·∫≠p nh·∫≠t n·ªôi dung √¥ v√† thu·ªôc t√≠nh data-translation
        cell.setAttribute('data-translation', newTranslation);
        
        // Hi·ªÉn th·ªã n·ªôi dung b·∫£n d·ªãch (truncate n·∫øu qu√° d√†i)
        const displayText = newTranslation.length > 100 ? 
            newTranslation.substring(0, 100) + '...' : newTranslation;
        cell.textContent = displayText;
        
        // Kh√¥i ph·ª•c c√°c element con (n√∫t d·ªãch l·∫°i)
        childElements.forEach(element => {
            cell.appendChild(element);
        });
        
        // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
        markAsChanged();
        
        // T·ª± ƒë·ªông update k·∫øt qu·∫£ d·ªãch t·ªïng h·ª£p
        updateFinalTranslationResult();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        showToast('ƒê√£ c·∫≠p nh·∫≠t b·∫£n d·ªãch', 'success');
    }

    // H√†m d·ªãch l·∫°i m·ªôt h√†ng ri√™ng l·∫ª
    async function retranslateRow(row, rowIndex) {
        const apiKey = googleApiKeyInput && googleApiKeyInput.value ? googleApiKeyInput.value : '';
        if (!apiKey) {
            displayErrorMessage('Vui l√≤ng nh·∫≠p API key c·ªßa Google AI Studio.');
            return;
        }

        // L·∫•y c√°c element t·ª´ h√†ng
        const characterSelect = row.querySelector('.character-select');
        const talkingToSelect = row.querySelector('.talking-to-select');
        const expressionSelect = row.querySelector('.expression-select');
        const textCell = row.querySelector('td:nth-child(5)');
        const translationCell = row.querySelector('.translation-cell');
        const retranslateBtn = row.querySelector('.retranslate-row-btn');

        // Ki·ªÉm tra xem c√≥ vƒÉn b·∫£n ƒë·ªÉ d·ªãch kh√¥ng
        const originalText = textCell.getAttribute('data-original-text') || textCell.textContent;
        if (!originalText.trim()) {
            showToast('Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ d·ªãch trong h√†ng n√†y', 'warning');
            return;
        }

        // Disable n√∫t d·ªãch l·∫°i v√† hi·ªÉn th·ªã loading
        retranslateBtn.disabled = true;
        retranslateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang d·ªãch...';

        try {
            // T·∫°o prompt cho h√†ng n√†y
            const character = characterSelect.value !== 'none' ? characterSelect.value : '';
            const talkingTo = talkingToSelect.value !== 'none' ? talkingToSelect.value : '';
            const expression = expressionSelect.value !== 'none' ? expressionSelect.value : '';

            let linePrompt = '';
            if (character) {
                linePrompt += `Nh√¢n v·∫≠t: ${character}, `;
                if (talkingTo && character !== talkingTo) {
                    linePrompt += `ƒëang n√≥i v·ªõi: ${talkingTo}, `;
                }
            }
            if (expression) {
                linePrompt += `Bi·ªÉu hi·ªán/d·∫°ng tho·∫°i: ${expression}, `;
            }
            linePrompt += `c√¢u c·∫ßn d·ªãch: ${originalText}`;

            // T·∫°o prompt ƒë·∫ßy ƒë·ªß v·ªõi th√¥ng tin c√†i ƒë·∫∑t
            const fullPrompt = buildSingleLineTranslationPrompt(linePrompt);

            // G·ªçi API ƒë·ªÉ d·ªãch
            const result = await callGoogleAPI(apiKey, fullPrompt, createTranslationSystemPrompt());
            
            // X·ª≠ l√Ω k·∫øt qu·∫£ (lo·∫°i b·ªè ƒë·ªãnh d·∫°ng Markdown v√† th√¥ng tin nh√¢n v·∫≠t)
            const cleanedResult = stripMarkdown(result);
            
            // C·∫≠p nh·∫≠t √¥ b·∫£n d·ªãch
            translationCell.setAttribute('data-translation', cleanedResult);
            const displayText = cleanedResult.length > 100 ? 
                cleanedResult.substring(0, 100) + '...' : cleanedResult;
            
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã (gi·ªØ nguy√™n n√∫t d·ªãch l·∫°i)
            const buttonContainer = translationCell.querySelector('.translate-row-container');
            translationCell.textContent = displayText;
            if (buttonContainer) {
                translationCell.appendChild(buttonContainer);
            }

            // T·ª± ƒë·ªông update k·∫øt qu·∫£ d·ªãch t·ªïng h·ª£p
            updateFinalTranslationResult();

            showToast(`ƒê√£ d·ªãch l·∫°i h√†ng ${rowIndex + 1} th√†nh c√¥ng!`, 'success');
            markAsChanged();

        } catch (error) {
            console.error('L·ªói khi d·ªãch l·∫°i h√†ng:', error);
            showToast('L·ªói khi d·ªãch l·∫°i: ' + error.message, 'error');
        } finally {
            // Kh√¥i ph·ª•c n√∫t d·ªãch l·∫°i
            retranslateBtn.disabled = false;
            retranslateBtn.innerHTML = '<i class="fas fa-language"></i> D·ªãch l·∫°i';
        }
    }

    // H√†m t·∫°o prompt cho vi·ªác d·ªãch m·ªôt d√≤ng ri√™ng l·∫ª
    function buildSingleLineTranslationPrompt(lineContent) {
        let prompt = "B·∫°n l√† m·ªôt d·ªãch gi·∫£ chuy√™n nghi·ªáp. H√£y d·ªãch d√≤ng vƒÉn b·∫£n sau t·ª´ ng√¥n ng·ªØ g·ªëc sang ti·∫øng Vi·ªát theo c√°c y√™u c·∫ßu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.\n\n";
        
        // Th√™m th√¥ng tin X∆ØNG h√¥ n·∫øu c√≥
        const pronounInfo = [];
        document.querySelectorAll('.pronoun-entry').forEach(entry => {
            const from = entry.querySelector('.pronoun-from').value;
            const to = entry.querySelector('.pronoun-to').value;
            const value = entry.querySelector('.pronoun-value').value;
            const selfValue = entry.querySelector('.self-pronoun-value').value;
            
            if (from && to && value) {
                pronounInfo.push({
                    from: from,
                    to: to,
                    value: value,
                    selfValue: selfValue
                });
            }
        });

        if (pronounInfo.length > 0) {
            prompt += "X∆ØNG H√î GI·ªÆA C√ÅC NH√ÇN V·∫¨T (ph·∫£i tu√¢n theo nghi√™m ng·∫∑t):\n";
            pronounInfo.forEach(item => {
                prompt += `- ${item.from}: g·ªçi ${item.to} l√† "${item.value}"`;
                if (item.selfValue) {
                    prompt += `, X∆ØNG b·∫£n th√¢n l√† "${item.selfValue}"`;
                }
                prompt += '\n';
            });
            prompt += '\n';
        }

        // Th√™m th·ªÉ lo·∫°i v√† vƒÉn phong n·∫øu c√≥
        if (genreInput.value.trim()) {
            prompt += `Th·ªÉ lo·∫°i: ${genreInput.value.trim()}\n`;
        }
        if (styleInput.value.trim()) {
            prompt += `VƒÉn phong: ${styleInput.value.trim()}\n`;
        }

        // Th√™m m·ªëi quan h·ªá n·∫øu c√≥
        const relationships = [];
        document.querySelectorAll('.relationship-description').forEach(input => {
            if (input.value.trim() !== '') {
                relationships.push(input.value.trim());
            }
        });
        if (relationships.length > 0) {
            prompt += "\nM·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC NH√ÇN V·∫¨T:\n";
            relationships.forEach(rel => {
                prompt += `- ${rel}\n`;
            });
        }

        prompt += "\nY√äU C·∫¶U:\n";
        prompt += "- " + requirementsInput.value.trim() + "\n";
        prompt += "- D·ªãch ch√≠nh x√°c, gi·ªØ nguy√™n X∆ØNG h√¥ nh∆∞ ƒë√£ ch·ªâ ƒë·ªãnh\n";
        prompt += "- Kh√¥ng s·ª≠ d·ª•ng Markdown, tr·∫£ v·ªÅ vƒÉn b·∫£n thu·∫ßn t√∫y\n";
        prompt += "- Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ d·ªãch, kh√¥ng th√™m gi·∫£i th√≠ch\n\n";

        prompt += "VƒÇN B·∫¢N C·∫¶N D·ªäCH:\n";
        prompt += lineContent;

        return prompt;
    }

    // H√†m c·∫≠p nh·∫≠t k·∫øt qu·∫£ d·ªãch t·ªïng h·ª£p t·ª´ c√°c √¥ b·∫£n d·ªãch
    function updateFinalTranslationResult() {
        const translationCells = document.querySelectorAll('.translation-cell');
        const finalResults = [];

        translationCells.forEach(cell => {
            const translation = cell.getAttribute('data-translation') || '';
            if (translation.trim()) {
                finalResults.push(translation.trim());
            }
        });

        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ d·ªãch t·ªïng h·ª£p
        if (finalResults.length > 0) {
            const combinedResult = finalResults.join('\n');
            translationResult.textContent = combinedResult;
            
            // Hi·ªÉn th·ªã c√°c n√∫t ƒëi·ªÅu khi·ªÉn k·∫øt qu·∫£
            document.getElementById('refine-again-controls').style.display = 'flex';
            document.getElementById('export-with-character-controls').style.display = 'flex';
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
            updateButtonState();
        }
    }

    // H√†m c·∫≠p nh·∫≠t c√°c √¥ b·∫£n d·ªãch t·ª´ k·∫øt qu·∫£ d·ªãch t·ªïng h·ª£p
    function updateTranslationCellsFromResult(translationResult) {
        if (!translationResult) return;

        // T√°ch k·∫øt qu·∫£ th√†nh c√°c d√≤ng
        const lines = translationResult.split('\n');
        const translationCells = document.querySelectorAll('.translation-cell');
        
        let cellIndex = 0;
        
        lines.forEach(line => {
            line = line.trim();
            if (!line) return; // B·ªè qua d√≤ng tr·ªëng
            
            // Tr√≠ch xu·∫•t vƒÉn b·∫£n d·ªãch t·ª´ d√≤ng (lo·∫°i b·ªè th√¥ng tin nh√¢n v·∫≠t v√† bi·ªÉu hi·ªán)
            let translatedText = extractSentenceFromLine(line);
            
            if (translatedText && cellIndex < translationCells.length) {
                const cell = translationCells[cellIndex];
                
                // C·∫≠p nh·∫≠t d·ªØ li·ªáu √¥ b·∫£n d·ªãch
                cell.setAttribute('data-translation', translatedText);
                
                // C·∫≠p nh·∫≠t hi·ªÉn th·ªã (truncate n·∫øu qu√° d√†i)
                const displayText = translatedText.length > 100 ? 
                    translatedText.substring(0, 100) + '...' : translatedText;
                
                // Gi·ªØ l·∫°i n√∫t d·ªãch l·∫°i
                const buttonContainer = cell.querySelector('.translate-row-container');
                cell.textContent = displayText;
                if (buttonContainer) {
                    cell.appendChild(buttonContainer);
                }
                
                cellIndex++;
            }
        });
        
        // ƒê√°nh d·∫•u ƒë√£ thay ƒë·ªïi
        markAsChanged();
    }
    
    // Th√™m n√∫t ƒë·ªÉ th√™m d√≤ng m·ªõi
    function addNewRowButton() {
        const controlsDiv = document.createElement('div');
        controlsDiv.className = 'table-controls table-controls-bottom';
        
        const addRowBtn = document.createElement('button');
        addRowBtn.type = 'button';
        addRowBtn.className = 'btn btn-add';
        addRowBtn.innerHTML = '<i class="fas fa-plus"></i> Th√™m d√≤ng m·ªõi';
        addRowBtn.addEventListener('click', addNewTextRow);
        
        controlsDiv.appendChild(addRowBtn);
        
        // Th√™m n√∫t sau b·∫£ng thay v√¨ tr∆∞·ªõc b·∫£ng
        const tableContainer = document.querySelector('.table-container');
        tableContainer.parentNode.insertBefore(controlsDiv, tableContainer.nextSibling);
    }



    // L∆∞u API key v√†o Local Storage
    function saveAPIKey() {
        if (googleApiKeyInput && googleApiKeyInput.value) {
            localStorage.setItem('googleApiKey', googleApiKeyInput.value);
        } else if (googleApiKeyInput) {
            localStorage.removeItem('googleApiKey');
        }
    }

    // Kh√¥i ph·ª•c API key t·ª´ Local Storage
    function restoreAPIKey() {
        const googleKey = localStorage.getItem('googleApiKey');
        if (googleKey && googleApiKeyInput) {
            googleApiKeyInput.value = googleKey;
        }
    }

    // L·∫•y API key t·ª´ UI
    function getAPIKey() {
        return googleApiKeyInput && googleApiKeyInput.value ? googleApiKeyInput.value : '';
    }

    // D·ªãch m·ªôt √¥ ri√™ng l·∫ª
    async function translateCell(cell, rowData) {
        // Hi·ªÉn th·ªã loading spinner
        loadingSpinner.style.display = 'block';
        disableInputs();

        try {
            let rowIndex = cell.parentNode.dataset.rowIndex;
            let columnIndex = parseInt(cell.dataset.col);
            
            // Ch·ªâ l·∫•y API key khi th·ª±c s·ª± c·∫ßn thi·∫øt
            const apiKey = getAPIKey();
            if (!apiKey) {
                showError('Vui l√≤ng nh·∫≠p API key c·ªßa Google AI Studio.');
                return;
            }
            
            // T·∫°o prompt d·ª±a tr√™n d·ªØ li·ªáu h√†ng v√† c·ªôt
            const prompt = generatePrompt(rowData, columnIndex);
            
            // G·ªçi API Google Gemini
            const result = await callGoogleAPI(apiKey, prompt, createTranslationSystemPrompt());
            
            // C·∫≠p nh·∫≠t n·ªôi dung √¥
            cell.innerText = result.trim();
            cell.classList.add('translated');
            
            saveToLocalStorage();
            markAsChanged();
        } catch (error) {
            console.error('L·ªói khi d·ªãch:', error);
            showError(`L·ªói khi d·ªãch: ${error.message}`);
        } finally {
            loadingSpinner.style.display = 'none';
            enableInputs();
        }
    }

    // D·ªãch to√†n b·ªô b·∫£ng
    async function translateTable() {
        loadingSpinner.style.display = 'block';
        disableInputs();
        
        // Ch·ªâ l·∫•y API key khi th·ª±c s·ª± c·∫ßn thi·∫øt
        const apiKey = getAPIKey();
        if (!apiKey) {
            showError('Vui l√≤ng nh·∫≠p API key c·ªßa Google AI Studio.');
            loadingSpinner.style.display = 'none';
            enableInputs();
            return;
        }
        
        let hasError = false;

        try {
            // L·∫•y t·∫•t c·∫£ c√°c h√†ng trong b·∫£ng
            const rows = tableBody.querySelectorAll('tr');
            
            // L·∫∑p qua t·ª´ng h√†ng v√† d·ªãch c·ªôt ti·∫øng Vi·ªát
            for (const row of rows) {
                const rowData = getRowData(row);
                const viCell = row.querySelector('[data-col="1"]');
                if (!viCell) continue;
                
                // B·ªè qua n·∫øu ƒë√£ d·ªãch ho·∫∑c c·ªôt ng√¥n ng·ªØ g·ªëc tr·ªëng
                const sourceCell = row.querySelector('[data-col="0"]');
                if (!sourceCell || !sourceCell.innerText.trim()) continue;
                
                try {
                    // T·∫°o prompt d·ª±a tr√™n d·ªØ li·ªáu h√†ng
                    const prompt = generatePrompt(rowData, 1);
                    
                    // G·ªçi API Google Gemini
                    const result = await callGoogleAPI(apiKey, prompt, createTranslationSystemPrompt());
                    
                    // C·∫≠p nh·∫≠t n·ªôi dung √¥
                    viCell.innerText = result.trim();
                    viCell.classList.add('translated');
                } catch (error) {
                    console.error('L·ªói khi d·ªãch h√†ng:', error);
                    hasError = true;
                    break;
                }
            }
            
            if (!hasError) {
                saveToLocalStorage();
                markAsChanged();
            }
        } catch (error) {
            console.error('L·ªói khi d·ªãch to√†n b·ªô b·∫£ng:', error);
            showError(`L·ªói khi d·ªãch to√†n b·ªô b·∫£ng: ${error.message}`);
        } finally {
            loadingSpinner.style.display = 'none';
            enableInputs();
        }
    }

    // TƒÉng c∆∞·ªùng x·ª≠ l√Ω radio button tr√™n Cloudflare Pages
    window.addEventListener('load', function() {
        setTimeout(function() {
            // T√¨m l·∫°i t·∫•t c·∫£ radio button API provider
            const radioButtons = document.querySelectorAll('input[name="api-provider"]');
            if (radioButtons && radioButtons.length) {
                // Th√™m tƒÉng c∆∞·ªùng event listener
                radioButtons.forEach(function(radio) {
                    // X√≥a s·ª± ki·ªán click li√™n quan ƒë·∫øn provider
                    // radio.addEventListener('click', function() {
                    //     currentAPIProvider = this.value;
                    //     console.log("API Provider changed to:", currentAPIProvider);
                    //     updateAPIProviderUI();
                    //     markAsChanged();
                    // });
                    
                    // Th√™m s·ª± ki·ªán cho label
                    const labelId = radio.id;
                    if (labelId) {
                        const label = document.querySelector('label[for="' + labelId + '"]');
                        if (label) {
                            label.addEventListener('click', function(e) {
                                radio.checked = true;
                                radio.dispatchEvent(new Event('change'));
                                radio.dispatchEvent(new Event('click'));
                            });
                        }
                    }
                });
            }
        }, 500); // ƒê·ª£i 500ms ƒë·ªÉ trang ƒë∆∞·ª£c t·∫£i ho√†n to√†n
    });

    // C·∫£i thi·ªán hi·ªÉn th·ªã b·∫£ng tr√™n ƒëi·ªán tho·∫°i
    function enhanceMobileTableExperience() {
        // Ki·ªÉm tra n·∫øu l√† thi·∫øt b·ªã di ƒë·ªông
        const isMobile = window.innerWidth <= 576;
        
        if (isMobile) {
            // Th√™m class ƒë·ªÉ nh·∫≠n bi·∫øt giao di·ªán mobile
            document.body.classList.add('mobile-view');
            
            // C·∫£i thi·ªán cu·ªôn ngang tr√™n b·∫£ng
            const tableContainer = document.querySelector('.table-container');
            if (tableContainer) {
                // Th√™m th√¥ng b√°o h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng cu·ªôn ngang
                const scrollHint = document.createElement('div');
                scrollHint.className = 'scroll-hint';
                scrollHint.textContent = 'Vu·ªët ngang ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß ‚ÜîÔ∏è';
                scrollHint.style.cssText = 'text-align: center; color: #666; padding: 5px; font-size: 12px; background: #f5f5f5; margin-bottom: 5px; border-radius: 4px;';
                
                // Ch·ªâ th√™m th√¥ng b√°o n·∫øu ch∆∞a c√≥
                if (!tableContainer.querySelector('.scroll-hint')) {
                    tableContainer.insertBefore(scrollHint, tableContainer.firstChild);
                }
                
                // X·ª≠ l√Ω c√°c √¥ n·ªôi dung ƒë·ªÉ ƒë·∫£m b·∫£o vƒÉn b·∫£n d√†i hi·ªÉn th·ªã t·ªët
                const contentCells = document.querySelectorAll('.text-table td:last-child');
                contentCells.forEach(cell => {
                    // Th√™m title cho √¥ ƒë·ªÉ c√≥ th·ªÉ xem n·ªôi dung ƒë·∫ßy ƒë·ªß khi hover
                    cell.title = cell.textContent.trim();
                    
                    // N·∫øu n·ªôi dung qu√° d√†i, th√™m d·∫•u hi·ªáu
                    if (cell.textContent.length > 50) {
                        // Th√™m n√∫t hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß n·ªôi dung
                        if (!cell.querySelector('.expand-content')) {
                            const expandBtn = document.createElement('span');
                            expandBtn.className = 'expand-content';
                            expandBtn.innerHTML = '‚üê';
                            expandBtn.style.cssText = 'position: absolute; right: 3px; bottom: 3px; font-size: 10px; color: #007bff; cursor: pointer;';
                            expandBtn.title = 'Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß n·ªôi dung';
                            
                            // ƒê·∫∑t position relative cho √¥ ch·ª©a n√∫t
                            cell.style.position = 'relative';
                            cell.appendChild(expandBtn);
                            
                            // X·ª≠ l√Ω s·ª± ki·ªán click ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß n·ªôi dung
                            expandBtn.addEventListener('click', function(e) {
                                e.stopPropagation();
                                
                                // T·∫°o popup hi·ªÉn th·ªã n·ªôi dung ƒë·∫ßy ƒë·ªß
                                const popup = document.createElement('div');
                                popup.className = 'content-popup';
                                popup.textContent = cell.getAttribute('data-original-text') || cell.textContent;
                                popup.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; max-width: 300px; max-height: 80%; overflow-y: auto; background: white; padding: 15px; border-radius: 8px; box-shadow: 0 3px 15px rgba(0,0,0,0.2); z-index: 1000; border: 1px solid #ddd;';
                                
                                // Th√™m n√∫t ƒë√≥ng
                                const closeBtn = document.createElement('button');
                                closeBtn.textContent = '‚úï';
                                closeBtn.style.cssText = 'position: absolute; top: 5px; right: 5px; background: none; border: none; font-size: 16px; cursor: pointer; color: #666;';
                                popup.appendChild(closeBtn);
                                
                                // Th√™m popup v√†o body
                                document.body.appendChild(popup);
                                
                                // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng
                                closeBtn.addEventListener('click', function() {
                                    document.body.removeChild(popup);
                                });
                                
                                // ƒê√≥ng popup khi click b√™n ngo√†i
                                document.addEventListener('click', function closePopup(e) {
                                    if (!popup.contains(e.target)) {
                                        document.body.removeChild(popup);
                                        document.removeEventListener('click', closePopup);
                                    }
                                });
                            });
                        }
                    }
                });
                
                // ƒêi·ªÅu ch·ªânh chi·ªÅu cao c·ªßa select box ƒë·ªÉ ph√π h·ª£p v·ªõi ƒëi·ªán tho·∫°i
                const selectBoxes = document.querySelectorAll('.character-select, .talking-to-select, .expression-select');
                selectBoxes.forEach(select => {
                    select.style.textOverflow = 'ellipsis';
                });
            }
            
            // C·∫£i thi·ªán k·∫øt qu·∫£ d·ªãch
            const resultBox = document.querySelector('.result-box');
            if (resultBox) {
                // Th√™m n√∫t m·ªü r·ªông/thu g·ªçn n·∫øu ch∆∞a c√≥
                if (!document.querySelector('.toggle-result-btn')) {
                    const toggleBtn = document.createElement('button');
                    toggleBtn.className = 'toggle-result-btn';
                    toggleBtn.innerHTML = 'M·ªü r·ªông k·∫øt qu·∫£ ‚¨áÔ∏è';
                    toggleBtn.style.cssText = 'display: block; width: 100%; padding: 8px; background: #f0f0f0; border: none; text-align: center; margin-top: 8px; border-radius: 4px; font-size: 13px;';
                    
                    // Th√™m n√∫t v√†o trong output-section
                    const outputSection = document.querySelector('.output-section');
                    if (outputSection) {
                        resultBox.parentNode.insertBefore(toggleBtn, resultBox.nextSibling);
                        
                        // X·ª≠ l√Ω s·ª± ki·ªán click
                        toggleBtn.addEventListener('click', function() {
                            if (resultBox.style.maxHeight === '500px' || !resultBox.style.maxHeight) {
                                resultBox.style.maxHeight = '1000px';
                                this.innerHTML = 'Thu g·ªçn k·∫øt qu·∫£ ‚¨ÜÔ∏è';
                            } else {
                                resultBox.style.maxHeight = '500px';
                                this.innerHTML = 'M·ªü r·ªông k·∫øt qu·∫£ ‚¨áÔ∏è';
                            }
                        });
                    }
                }
            }
            
            // ƒêi·ªÅu ch·ªânh container ch√≠nh
            const container = document.querySelector('.container');
            if (container) {
                container.style.width = '98%';
                container.style.padding = '0';
            }
        }
    }

    // ƒêƒÉng k√Ω s·ª± ki·ªán ƒë·ªÉ c·∫£i thi·ªán giao di·ªán ƒëi·ªán tho·∫°i sau khi trang ƒë√£ t·∫£i
    document.addEventListener('DOMContentLoaded', function() {
        enhanceMobileTableExperience();
        
        // ƒêƒÉng k√Ω l·∫°i khi thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh
        window.addEventListener('resize', enhanceMobileTableExperience);
    });

    // S·ª± ki·ªán cho n√∫t "Xu·∫•t k·∫øt qu·∫£ k√®m t√™n nh√¢n v·∫≠t"
    const exportWithCharacterBtn = document.getElementById('export-with-character-btn');
    if (exportWithCharacterBtn) {
        exportWithCharacterBtn.addEventListener('click', exportWithCharacterNames);
    }

    // H√†m hi·ªÉn th·ªã n√∫t chuy·ªÉn ƒë·ªïi sang Google AI Studio
    function displaySwitchToGoogleButton() {
        // X√≥a n√∫t c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
        const existingButton = document.getElementById('switch-to-google-btn');
        if (existingButton) {
            existingButton.remove();
        }

        // Kh√¥ng c·∫ßn hi·ªÉn th·ªã n√∫t chuy·ªÉn ƒë·ªïi OpenRouter n·ªØa (ƒë√£ x√≥a OpenRouter)
        // if (currentAPIProvider === 'openrouter') {
            // T·∫°o n√∫t m·ªõi
            // const switchButton = document.createElement('button');
            // switchButton.id = 'switch-to-google-btn';
            // switchButton.className = 'btn btn-action';
            // switchButton.innerHTML = '<i class="fas fa-exchange-alt"></i> Chuy·ªÉn ƒë·ªïi sang Google AI Studio';
            // switchButton.style.marginTop = '10px';
            // switchButton.style.backgroundColor = '#4285f4';
            // switchButton.style.color = 'white';
            
            // Th√™m s·ª± ki·ªán click
            // switchButton.addEventListener('click', function() {
                // Chuy·ªÉn ƒë·ªïi sang Google AI Studio
                // currentAPIProvider = 'google';
                // document.getElementById('openrouter-radio').checked = false;
                // document.getElementById('google-radio').checked = true;
                // updateAPIProviderUI();
                
                // LƒÉn trang ƒë·∫øn v√πng t√≠ch ch·ªçn Google AI Studio
                // const apiProviderSection = document.querySelector('.api-provider-section');
                // if (apiProviderSection) {
                //     apiProviderSection.scrollIntoView({ behavior: 'smooth' });
                    
                //     // L√†m n·ªïi b·∫≠t ph·∫ßn Google AI Studio
                //     const googleRadioLabel = document.querySelector('label[for="google-radio"]');
                //     if (googleRadioLabel) {
                //         googleRadioLabel.style.transition = 'background-color 0.5s ease';
                //         googleRadioLabel.style.backgroundColor = 'rgba(66, 133, 244, 0.2)';
                        
                //         // X√≥a hi·ªáu ·ª©ng sau 2 gi√¢y
                //         setTimeout(() => {
                //             googleRadioLabel.style.backgroundColor = '';
                //         }, 2000);
                //     }
                // }
                
                // X√≥a n√∫t sau khi ƒë√£ chuy·ªÉn ƒë·ªïi
                // this.remove();
            // });
            
            // Th√™m n√∫t v√†o d∆∞·ªõi k·∫øt qu·∫£ d·ªãch
            // translationResult.appendChild(switchButton);
        // }
    }
}); // K·∫øt th√∫c DOMContentLoaded 